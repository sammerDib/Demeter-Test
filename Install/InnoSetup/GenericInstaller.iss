; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#pragma verboselevel 9
; /!\ FOR DEBUG ONLY
#ifndef Source
  #define DEBUG 1
#endif
#ifndef DEBUG
  #define DEBUG 0
#endif
#ifndef Source
  #define Source "C:\Users\Mathis\Downloads\USP_TEST"
#endif
#ifndef MyAppVersion
  #define MyAppVersion "1.0"
#endif
#ifndef VersionFile
  #define VersionFile "Version_1.2.3.xml"
#endif
#ifndef ExecutableName
  #define ExecutableName "USP Installer"
#endif

#define MyAppName "UnitySC USP"
#define MyAppPublisher "UnitySC"
#define MyAppURL "https://www.unity-sc.com/"
#define DefaultInstallFolder "{sd}{\}UnitySC{\}Release"

[Setup]

AppId={#MyAppName}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={#DefaultInstallFolder}
DisableDirPage=yes
DefaultGroupName=UnitySC - USP
DisableProgramGroupPage=yes
OutputBaseFilename={#ExecutableName}
SetupIconFile={#Source}\UNLogoBigTrans.ico
#if DEBUG == 1
Compression=none
#else
Compression=lzma2/ultra64
#endif
SolidCompression=no
WizardStyle=modern
CloseApplications=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Dirs]
Name: "{app}"; Attribs: readonly system
Name: "{app}\Config"

[Types]
Name: "full"; Description: "Full installation"
Name: "custom"; Description: "Custom installation (At your own risk)"; Flags: iscustom

[Files]
Source: "{#Source}\UNLogoBigTrans.ico"; DestDir: "{app}\.."; Flags: onlyifdoesntexist uninsneveruninstall
Source: "{#Source}\{#VersionFile}"; DestDir: "{app}"; Flags: ignoreversion; Check: CheckReleasePresence

[Icons]
Name: "{app}\AppLauncher"; Filename: "{app}\Bin\AppLauncher\AppLauncher.exe"; Parameters: """{app}\Config\AppLauncher\LauncherConfig.xml"""; Flags: createonlyiffileexists

[UninstallDelete]
Name: "{app}\desktop.ini"; Type: files

[Code]
var
  CheckAlreadyDone : Boolean;
  IsLicenseFilePresent : Boolean;
  
function ReadXMLVersion(Path: String) : String;
var
  XMLDoc : Variant;
begin
  Log('Reading XML File for version number ::: BEGIN');
  Log(Path)
  XMLDoc := CreateOleObject('MSXML2.DOMDocument');
  XMLDoc.async := False;
  XMLDoc.resolveExternals := False;
  XMLDoc.load(Path);
  if XMLDoc.parseError.errorCode <> 0 then
    RaiseException('Error on line ' + IntToStr(XMLDoc.parseError.line) + ', position ' + IntToStr(XMLDoc.parseError.linepos) + ': ' + XMLDoc.parseError.reason);
  Result:= XMLDoc.selectSingleNode('USPVersion/Version').text
  Log('Reading XML File for version number ::: END');
end;

procedure MoveFolder(SourcePath, DestPath: String);
var
  FindRec: TFindRec;
  SourceFilePath: string;
  DestFilePath: string;
  Max, Count : integer;
  OutputProgressWizardPageInternal: TOutputProgressWizardPage;
begin
  OutputProgressWizardPageInternal := CreateOutputProgressPage('Archiving previous version', SourcePath);
  OutputProgressWizardPageInternal.Show;
  FindFirst(SourcePath + '\*',FindRec)
  repeat 
    Max := Max + 1;
  until not FindNext(FindRec);
  FindClose(FindRec);
  FindFirst(SourcePath + '\*',FindRec)
  if DirExists(DestPath) or CreateDir(DestPath) then
    Log('DestPath created : ' + DestPath);
  repeat
    OutputProgressWizardPageInternal.SetProgress(Count, Max);
    if (FindRec.Name <> '.') and (FindRec.Name <> '..') then
    begin
      SourceFilePath := SourcePath + '\' + FindRec.Name;
      DestFilePath := DestPath + '\' + FindRec.Name;
      if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then
      begin
        if FileCopy(SourceFilePath, DestFilePath, False) then
        begin
          Log(Format('Moved %s to %s', [SourceFilePath, DestFilePath]));
        end
          else
        begin
          RaiseException(Format('Failed to move %s to %s.'#13#13'Be sure that the destination file doesn''t exist', [
            SourceFilePath, DestFilePath]));
        end;
      end
        else
      begin
        if DirExists(DestFilePath) or CreateDir(DestFilePath) then
        begin
          Log(Format('Created %s', [DestFilePath]));
          MoveFolder(SourceFilePath, DestFilePath);
        end
          else
        begin
          RaiseException(Format('Failed to create %s.'#13#13'Be sure that the destination folder doesn''t exist', [DestFilePath]));
        end;
      end;
    end;
    Count := Count + 1;
  until not FindNext(FindRec);
  OutputProgressWizardPageInternal.Hide
  FindClose(FindRec);
end;

procedure FlushRelease(Path: String);
var
  OutputProgressWizardPageInternal: TOutputProgressWizardPage;
begin
  OutputProgressWizardPageInternal := CreateOutputProgressPage('Clean previous version', Path);
  OutputProgressWizardPageInternal.Show;
  OutputProgressWizardPageInternal.SetProgress(0, 2);
  DelTree(Path + '\Bin', True, True, True);
  OutputProgressWizardPageInternal.SetProgress(1, 2);
  DelTree(Path + '\Version_*.xml', False, True, False);
  OutputProgressWizardPageInternal.SetProgress(2, 2);
  OutputProgressWizardPageInternal.Hide;
end;

function StrSplit(Text: String; Separator: String): TArrayOfString;
var
  i, p: Integer;
  Dest: TArrayOfString; 
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      i := i + 1;
    end else begin
      Dest[i] := Text;
      Text := '';
    end;
  until Length(Text)=0;
  Result := Dest
end;

function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

procedure CleanArchive(Path: String);
var
  FileName: String;
begin
  FileName:= ExtractFileName(GetUninstallString());
  StringChangeEx(FileName, '.exe', '', True);
  DelTree(Path + '\' + FileName+'*', False, True, False);
end;

function isEmptyDir(dirName: String): Boolean;
var
  FindRec: TFindRec;
  FileCount: Integer;
begin
  Result := False;
  if FindFirst(dirName+'\*', FindRec) then begin
    try
      repeat
        if (FindRec.Name <> '.') and (FindRec.Name <> '..') then begin
          FileCount := 1;
          break;
        end;
      until not FindNext(FindRec);
    finally
      FindClose(FindRec);
      if FileCount = 0 then Result := True;
    end;
  end;
end;

procedure CheckReleasePresenceAndMove();
var
  VersionNameInstalled, VersionNameSetup, DestinationFolder, UnInstallString: String;
  Path: String;
  FindRec1, FindRec2: TFindRec;
  iResultCode: Integer;
begin
  if not CheckAlreadyDone then
  begin
    Path:= ExpandConstant('{app}')
    if DirExists(Path) and not isEmptyDir(Path)  then
    begin
      FindFirst(ExpandConstant('{app}') +'\Version_*.xml',FindRec1);
      VersionNameInstalled:= ReadXMLVersion(ExpandConstant('{app}\') + FindRec1.Name);
      FindClose(FindRec1);
      ExtractTemporaryFile('{#VersionFile}');
      FindFirst(ExpandConstant('{tmp}') +'\Version_*.xml',FindRec2);
      VersionNameSetup:= ReadXMLVersion(ExpandConstant('{tmp}\') + FindRec2.Name);
      FindClose(FindRec2);
      if VersionNameInstalled = VersionNameSetup
      then
      begin
        MsgBox('The same version is already installed. Modify and Repair will start', mbConfirmation, MB_OK);
      end
      else
      begin
        MsgBox('A previous version has been detected. Archiving will start.', mbConfirmation, MB_OK);
        DestinationFolder := ExpandConstant('{app}\..\Release_')+VersionNameInstalled;
        if not DirExists(DestinationFolder) then
          MoveFolder(ExpandConstant('{app}'), DestinationFolder);
          CleanArchive(DestinationFolder);
          FlushRelease(ExpandConstant('{app}'));
      end;
      UnInstallString := GetUninstallString();
      Exec(RemoveQuotes(UnInstallString), '/VERYSILENT /NORESTART /SUPPRESSMSGBOXES','',SW_HIDE, ewWaitUntilTerminated, iResultCode);
    end;
    CheckAlreadyDone :=True;
  end;
end;

function CheckReleasePresence(): Boolean;
begin 
  Result:= CheckAlreadyDone;
end;

procedure AddAboutSection(ParentForm: TSetupForm; CancelButton: TNewButton);
var 
  URLLabel: TNewLinkLabel;
begin
  URLLabel := TNewLinkLabel.Create(ParentForm);
  URLLabel.Left := ParentForm.ClientWidth - CancelButton.Left - CancelButton.Width;
  URLLabel.Top := CancelButton.Top;
  URLLabel.Anchors := [akLeft, akBottom];
  URLLabel.Caption := '<a href="{#MyAppURL}">UnitySC website</a>';
  URLLabel.UseVisualStyle := True;
  URLLabel.Parent := ParentForm;
  
end;

procedure CopyLicenseFileToTMP;
var
  FilePath: string;
begin
  FilePath:= ExpandConstant('{app}\Bin\UTO\AgileoFramework.license');
  IsLicenseFilePresent:= FileExists(FilePath);
  if IsLicenseFilePresent then
  begin
    FileCopy(FilePath, ExpandConstant('{app}\..\license.license'), False);
  end;
end;

procedure CopyLicenseFileFromTMP;
var
  FilePath: string;
  UTOPath: string;
  tmp: Boolean;
begin
  FilePath:= ExpandConstant('{app}\..\license.license');
  if IsLicenseFilePresent then
  begin
    UTOPath := ExpandConstant('{app}\Bin\UTO');
    tmp := DirExists(UTOPath) or CreateDir(UTOPath);
    FileCopy(FilePath, ExpandConstant(UTOPath + '\AgileoFramework.license'), False);
    DeleteFile(FilePath);
  end;
end;

procedure CreateIcon;
var
  FilePath: string;
  LogoPath: string;
  FileContent : string;
begin
  FilePath:= ExpandConstant('{app}\desktop.ini');
  LogoPath:= ExpandConstant('{app}\..\UNLogoBigTrans.ico');
  FileContent:= '[.ShellClassInfo]'#13'IconResource=' + LogoPath + ',0'
  SaveStringToFile(FilePath, FileContent, False);
end;

procedure InitializeWizard;
begin
  //UninsHs_InitializeWizard();
  AddAboutSection(WizardForm, WizardForm.CancelButton);
  WizardForm.BeveledLabel.Caption := ' {#MyAppPublisher} ';
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  NeedsRestart := False;
  try
    CopyLicenseFileToTMP();
    CheckReleasePresenceAndMove
  except
    Result := 'Error : ' + GetExceptionMessage;
  end;
end;

procedure DeinitializeSetup;
begin
  CopyLicenseFileFromTMP();
  CreateIcon();
end;