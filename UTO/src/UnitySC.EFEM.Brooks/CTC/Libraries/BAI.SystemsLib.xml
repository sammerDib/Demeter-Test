<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BAI.SystemsLib</name>
    </assembly>
    <members>
        <member name="T:System.Threading.Tasks.TaskToApm">
            <summary>
            Provides support for efficiently using Tasks to implement the APM (Begin/End) pattern.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Marshals the Task as an IAsyncResult, using the supplied callback and state
            to implement the APM pattern.
            </summary>
            <param name="task">The Task to be marshaled.</param>
            <param name="callback">The callback to be invoked upon completion.</param>
            <param name="state">The state to be stored in the IAsyncResult.</param>
            <returns>An IAsyncResult to represent the task's asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End``1(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.InvokeCallbackWhenTaskCompletes(System.Threading.Tasks.Task,System.AsyncCallback,System.IAsyncResult)">
            <summary>Invokes the callback asynchronously when the task has completed.</summary>
            <param name="antecedent">The Task to await.</param>
            <param name="callback">The callback to invoke when the Task completes.</param>
            <param name="asyncResult">The Task used as the IAsyncResult.</param>
        </member>
        <member name="T:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult">
            <summary>
            Provides a simple IAsyncResult that wraps a Task.  This, in effect, allows
            for overriding what's seen for the CompletedSynchronously and AsyncState values.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult.Task">
            <summary>The wrapped Task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult.m_state">
            <summary>The new AsyncState value.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult.m_completedSynchronously">
            <summary>The new CompletedSynchronously value.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.TaskWrapperAsyncResult.#ctor(System.Threading.Tasks.Task,System.Object,System.Boolean)">
            <summary>Initializes the IAsyncResult with the Task to wrap and the overriding AsyncState and CompletedSynchronously values.</summary>
            <param name="task">The Task to wrap.</param>
            <param name="state">The new AsyncState value</param>
            <param name="completedSynchronously">The new CompletedSynchronously value.</param>
        </member>
        <member name="T:BAI.Systems.Common.ICarrierIdOp">
            <summary>
            Interface for reading and writing data on a carrier ID tag according to SEMI standard E99-0303.
            A carrier ID tag (an RFID pill for example) contains memory for storing character data (ASCII).
            <list type="bullet">
            <item><description>Carrier ID Data: Any part or the entirety of the characters on the tag.</description></item>
            <item><description>Carrier ID: A subsection used as the primary identifier of the carrier.</description></item>
            <item><description>Unit for size and position: Byte, the size of an ASCII character.</description></item>
            <item><description>Position or offset: All 0 based.</description></item>
            <item><description>Capacity: The storage capacity of tag.</description></item>
            <item><description>Carrier ID Offset: The position of the start of the Carrier ID subsection. Default to 0 at power up.</description></item>
            <item><description>Carrier ID Length: The number of characters of the Carrier ID subsection. Default to 16 at power up.</description></item>
            </list>
            The application should use the two-byte unicode format of the alphanumeric ASCII characters.
            The API performs the conversion between the two-byte unitcode and single-byte ASCII formats.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.ReadCarrierId(System.String)">
            <summary>
            Read the primary Carrier ID from the tag.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <returns>Carrier ID, such as 0123456789ABCDEF</returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.WriteCarrierId(System.String,System.String)">
            <summary>
            Write to the tag to set the primary Carrier ID.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <param name="id">Characters to be written to the primary Carrier ID section of the tag, such as 0123456789ABCDEF</param>
            <remarks>Caution: Most fabs do not allow process, metrology, inspection equipment to change the Carrier ID on a tag
            when running production jobs.</remarks>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.ReadCarrierIdData(System.String,System.Int32,System.Int32)">
            <summary>
            Read a block of data from the tag.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <param name="offset">Character position to start reading, relative to the start of tag (0-based).</param>
            <param name="charactersToRead">Number of characters to read</param>
            <returns>Characters on the specified part of the tag.</returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.ReadCarrierIdData(System.String,System.Int32)">
            <summary>
            Read rest of data from the offset to end of the tag (capcity - 1).
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <param name="offset">Character position to start reading, relative to the start of tag (0-based).</param>
            <returns>Characters from the specified offset to the end of the tag (capacity - 1).</returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.WriteCarrierIdData(System.String,System.Int32,System.String)">
            <summary>
            Write a block of data to a section of the tag.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <param name="offset">Character position to start writing, relative to the start of tag (0-based).</param>
            <param name="data">Data to write to the tag.</param>
            <remarks>Caution: This could overwrite the primary Carrier ID on the tag,
            if the offset and data overlaps with the primary Carrier ID section on the tag.</remarks>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.ChangeCarrierIdLength(System.String,System.Int32)">
            <summary>
            Change then length of the carrier id tag.
            </summary>
            <remarks>
            Use this method to control what part of the carrier ID memory is considered
            the carrier id tag. Typically the first one or two pages of carrier ID memory are considered
            the carrier id tag.
            </remarks>
            <param name="loadPort">Load port where the carrier ID is located, such as PortC.</param>
            <param name="length">The length that the carrier id in bytes, typically 8 or 16.</param>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.GenericCarrierIdCommand(System.String,System.String)">
            <summary>
            Sends a command string directly to the carrier ID reader/writer device.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <param name="command">Command that will be sent to the carrier id device.</param>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.GetCarrierIdDataCapacity(System.String)">
            <summary>
            Get the size of the memory on the tag.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <returns>Size of memory in byte.</returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.GetCarrierIdOffset(System.String)">
            <summary>
            Get the start position of the primary Carrier ID section, relative to the start of the tag.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <returns>Offset in bytes, from the start of the tag (0-based).</returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.GetCarrierIdLength(System.String)">
            <summary>
            Get the allocated length of the primary Carrier ID sub-section on the tag.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <returns>Primary Carrier ID length in bytes.</returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.SetCarrierIdOffset(System.String,System.Int32)">
            <summary>
            Set the start position of the primary Carrier ID section, relative to the start of the tag.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <param name="offset">Start position as an offset to the start of the tag (0-based).</param>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierIdOp.SetCarrierIdLength(System.String,System.Int32)">
            <summary>
            Set the length of memory to allocate for the primary Carrier ID section.
            </summary>
            <param name="device">device - the load port where the carrier is located, such as PortA</param>
            <param name="length">Primary Carrier ID length in bytes.</param>
        </member>
        <member name="T:BAI.Systems.Common.ICarrierProcessingOp">
            <summary>
            Interface representing functions for processing substrates in a carrier.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.GetCarrierDoorState(System.String)">
            <summary>
            Query the position of the load port door.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.GetPodAtPortState(System.String)">
            <summary>
            Query the status of the pod-at-port sensors on the loadport door.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.OpenCarrier(System.String)">
            <summary>
            Open the door of the carrier without mapping.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.CloseCarrier(System.String)">
            <summary>
            Close carrier door without mapping.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.MapCarrier(System.String)">
            <summary>
            Map the contents of a carrier. Can be called when the load port door is already open.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.MapCarrier(System.String,System.String)">
            <summary>
            Map the contents of a carrier. Can be called when the load port door is already open.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
            <param name="validMapperName">The name of the mapper, for example "MappingWaferEngineCamera, MappingWaferEngineEe, LoadPortAMapper, Auto (If "Auto" is selected, the algorithm will choose the fastest mapper configured for the existing CarrierType/SubstrateType)".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.OpenAndMapCarrier(System.String)">
            <summary>
            Open the carrier door and map its contents.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.OpenAndMapCarrier(System.String,System.String)">
            <summary>
            Open the carrier door and map its contents.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
            <param name="validMapperName">The name of the mapper, for example "MappingWaferEngineCamera, MappingWaferEngineEe, LoadPortAMapper, Auto (If "Auto" is selected, the algorithm will choose the fastest mapper configured for the existing CarrierType/SubstrateType)".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.CloseAndMapCarrier(System.String)">
            <summary>
            Close the carrier door and map its contents.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.ICarrierProcessingOp.CloseAndMapCarrier(System.String,System.String)">
            <summary>
            Close the carrier door and map its contents.
            </summary>
            <param name="loadport">The name of the loadport, for example "EFEM.LoadPortA".</param>
            <param name="validMapperName">The name of the mapper, for example "MappingWaferEngineCamera, MappingWaferEngineEe, LoadPortAMapper, Auto (If "Auto" is selected, the algorithm will choose the fastest mapper configured for the existing CarrierType/SubstrateType)".</param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.CarrierLocations">
            <summary>
            List of named wafer locations owned by either an active wafer host or a mobile host
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IMobileCarrierHostOp.GetHostAtTransferLocation(System.String)">
            <summary>
            Returns the host at transfer location.
            Example: For mobileHost "StorageCarousel1" this call returns the "ShelfX" at 
                     transferLocation: "StorageCarousel1.PortA".
            </summary>
            <param name="transferLocation"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.ICarrierPurgeOp.PurgeCarrierStart(System.String)">
            <summary>
            Raises the nozzle and turns on Purge valve for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <remarks>
            Call this method only when the LoadPort is docked and door is closed. For lower level nozzle and valve
            control use control interface on LoadPort
            </remarks>
            <param name="controllerName">>MFC controller name e.g. EFEM1.LoadPortA.MfcRear or EFEM1.LoadPortA.MfcDoor</param>
            <example>
            Clamps and docks carrier on LoadPortA and then raises the nozzle and starts purge:
            <code language="cs">
            IEfem o;
            o.ClampCarrier ("PortA")
            o.DockCarrier ("PortA")
            o.PurgeCarrierStart("EFEM.LoadPortA.MfcRear");
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.ICarrierPurgeOp.PurgeCarrierStop(System.String)">
            <summary>
            Turns off Purge valve and lowers the nozzle for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <remarks>
            Call this method only when the LoadPort is docked and door is closed. For lower level nozzle and valve
            control use control interface on LoadPort
            </remarks>
            <param name="controllerName">>MFC controller name e.g. EFEM1.LoadPortA.MfcRear or EFEM1.LoadPortA.MfcDoor</param>
            <example>
            Stops the purge, lowers the nozzle and then undock and unclamps the carrier on LoadPortA:
            <code language="cs">
            IEfem o;
            o.PurgeCarrierStop("EFEM.LoadPortA.MfcRear");
            o.UndockCarrier ("PortA")
            o.UnclampCarrier ("PortA")
            </code>
            </example>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.CarrierDetectionSignals">
            <summary>
            Contains the carrier detection signals (Presence, Placement and Infopads) value. 
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Carriers.Controls.CarrierDetectionSignals.Signals">
            <summary>
            Contains the 32 bit pattern for all sensors: one byte each for presence , placement and info-pads sensors. Presence - bits 0 to 7, Placement - bits 8 to 15, Infopads - bits 16 to 23.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.CarrierDetectionSignals.GetInfoPadsSignalsState">
            <summary>
            Returns the 8 bit pattern for InfoPads sensors: A - bit 0, B - bit 1, C - bit 2, D - bit 3.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.CarrierDetectionSignals.GetPlacementSignalsState">
            <summary>
            Returns the 8 bit pattern for Placement sensors: 1 - bit 0, 2 - bit 1, 3 - bit 2, 4 - bit 3.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.CarrierDetectionSignals.GetPresenceSignalsState">
            <summary>
            Returns the 8 bit pattern for Presence sensors: 1 - bit 0, 2 - bit 1.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP">
            <summary>
            Digital output signals from the active device, such as a overhead transport system.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.VALID">
            <summary>
            Signal transition is active and selected.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.CS_0">
            <summary>
            Carrier Stage 0 (selection)
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.CS_1">
            <summary>
            Carrier Stage 1 (selection)
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.TR_REQ">
            <summary>
            Handoff Request
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.BUSY">
            <summary>
            Busy for Handoff
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.COMPT">
            <summary>
            Complete Handoff
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.CONT">
            <summary>
            Continuous Handoff
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.AM_AVBL">
            <summary>
            Handoff Arm Available
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA">
            <summary>
            Digital output signals from passive device (such as loadport)
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.L_REQ">
            <summary>
            Load Request
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.U_REQ">
            <summary>
            Unload Request
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.READY">
            <summary>
            Ready for Handoff
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.HO_AVBL">
            <summary>
            Handoff Available
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.ES">
            <summary>
            Emergency Stop
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.VA">
            <summary>
            Vehicle arrived
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.VS_0">
            <summary>
            Carrier Stage 0 from Passive OHs Vehicle
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.VS_1">
            <summary>
            Carrier Stage 1 from Passive OHs Vehicle
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.IAutoHandoffSignalCtrl">
            <summary>
            Low level control for auto handoff.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.IAutoHandoffSignalCtrl.GetAutoHandoffActiveSignal(BAI.Systems.Common.Carriers.AutoHandoffPio,BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP)">
            <summary>
            Query the current status of the active side auto hand signals.
            </summary>
            <param name="pio">Which PIO interface to query</param>
            <param name="signal">Which signal to query</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.IAutoHandoffSignalCtrl.GetAutoHandoffPassiveSignal(BAI.Systems.Common.Carriers.AutoHandoffPio,BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA)">
            <summary>
            Query the current status of the passive side auto hand signals.
            </summary>
            <param name="pio">Which PIO interface to query</param>
            <param name="signal">Which signal to query</param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.IAutoHandoffPassiveSignalCtrl">
            <summary>
            Low level interface to control carrier auto-handoff passive equipment (SEMI Standard E84).
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.IAutoHandoffPassiveSignalCtrl.SetAutoHandoffPassiveSignal(BAI.Systems.Common.Carriers.AutoHandoffPio,BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA,System.Boolean)">
            <summary>
            Set the state of the passive side auto handoff signals.
            </summary>
            <param name="pio">Which PIO interface to set</param>
            <param name="signal">Which signal to set</param>
            <param name="state">Which state to set to</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.IAutoHandoffPassiveSignalCtrl.RunSelfTestOnAutoHandoffSignals(BAI.Systems.Common.Carriers.AutoHandoffPio)">
            <summary>
            Cycles through each signal to check if they are working as intended.
            For A -> P signals, they are just read.
            For P -> A signals, they are flipped twice, 100 ms apart so each is restored to its original state.
            </summary>
            <param name="pio">The PIO interface to cycle through.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.IAutoHandoffActiveSignalCtrl">
            <summary>
            Interface to support carrier auto transfer control (SEMI Standard E84) on active side of transfer.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.AutoHandoffActiveSignalHandler">
            <param name="device">The name of device whose signal changed.</param>
            <param name="pio">On which PIO interface did the signal change.</param>
            <param name="signal">Which signal changed.</param>
            <param name="after">What is the new value of the signal.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.AutoHandoffPassiveSignalHandler">
            <param name="device">The name of device whose signal changed.</param>
            <param name="pio">On which PIO interface did the signal change.</param>
            <param name="signal">Which signal changed.</param>
            <param name="after">What is the new value of the signal.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.IAutoHandoffSignalEvents">
            <summary>
            Interface for client to be notified of DIO signal changes in automatic carrier transfers.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.IAutoHandoffSignalEvents.AutoHandoffActiveSignalChanged">
            <summary>
            Raised when active side signals change.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.IAutoHandoffSignalEvents.AutoHandoffPassiveSignalChanged">
            <summary>
            Raised when passive side signals change.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl">
            <summary>
            Base interface for controlling carrier handoff on a load/active/static port.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.GetCarrierPresenceSignalState">
            <summary>
            Gets the state of the carrier presence hardware sensor.
            </summary>
            <returns />
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.GetCarrierPlacementSignalState">
            <summary>
            Gets the state of the carrier placement hardware sensor.
            </summary>
            <returns />
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.GetCarrierPresenceState">
            <summary>
            Determines the state of the carrier on the load port.
            </summary>
            <returns />
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.GetCarrierClampState">
            <summary>
            Gets the state of the carrier hold-down clamp.
            </summary>
            <returns />
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.ClampCarrier">
            <summary>
            Clamps the carrier.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.UnclampCarrier">
            <summary>
            Unclamps the carrier
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.GetCarrierPortLocation">
            <summary>
            Returns the location of the carrier port.
            </summary>
            <returns>
            For load port: Undocked, Docked, Open, Moving, or Unknown.
            For active port: Out, In, Moving, or Unknown.
            </returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.MoveCarrierPort(System.String)">
            <summary>
            Moves the carrier port to a location.
            </summary>
            <param name="toLocation">
            For load port: Undocked, Docked, Open, Moving, or Unknown.
            For active port: Out, In, Moving, or Unknown.
            </param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.CarrierPortSafetyShieldIsTripped(System.String)">
            <summary>
            Determines if the safety shield is tripped.
            </summary>
            <param name="shield">"EFEM.LoadPortB.LightCurtain" for example</param>
            <returns>True if the shield is tripped, false otherwise.</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.AcquireSpaceForOp(System.String)">
            <summary>
            
            </summary>
            <param name="op">Possible values: HomeAllAxes, HomeAxisY, HomeAxisZ, and AutoHandoff</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.ReleaseSpaceForOp(System.String)">
            <summary>
            
            </summary>
            <param name="op">Possible values: HomeAllAxes, HomeAxisY, HomeAxisZ, and AutoHandoff</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortCtrl.GetCarrierDetectionSignalsState">
            <summary>
            Query the state if the carrier detection sensors (Presence, Placement and InfoPads).
            </summary>
            <returns>A CarrierDetectionSignals object.</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.CarrierPresenceChangeHandler">
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="before">The previous state.</param>
            <param name="after">The new state.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.CarrierPlacementChangeHandler">
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="before">The previous state.</param>
            <param name="after">The new state.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.CarrierClampChangeHandler">
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="before">The previous state.</param>
            <param name="after">The new state.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.CarrierPortLocationChangeHandler">
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="before">The previous location.</param>
            <param name="after">The new location.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.CarrierDetectionSignalChangeHandler">
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="before">The previous signal states.</param>
            <param name="after">The new signal states.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortEvents">
            <summary>
            Interface for clients to subscribe to external events to carrier transfers.
            These events are changes made by active actors (overhead/floor vehicles, operators).
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortEvents.CarrierPresenceSignalChanged">
            <summary>
            The presence sensors that detect if a carrier is near the handoff port have changed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortEvents.CarrierPlacementSignalChanged">
            <summary>
            The placement sensors that detect if a carrier is physically seated on the handoff port have changed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortEvents.CarrierPresenceStateChanged">
            <summary>
            The overall presence state of the carrier on a handoff port have changed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortEvents.CarrierClampStateChanged">
            <summary>
            The clamp status of a carrier has changed, potentially as the result of the auto-clamp feature of autohandoff.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortEvents.CarrierPortLocationChanged">
            <summary>
            The dock status of a carrier handoff port has changed, potentially as the result of the auto-dock feature of autohandoff.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortEvents.CarrierPortSafetyShieldTripped">
            <summary>
            The carrier port safety shield (such as a light curtain) has been tripped and any in-progress handoff has been suspended.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortEvents.CarrierPortSafetyShieldRestored">
            <summary>
            The carrier port safety shield (such as a light curtain) is no longer tripped and it is now possible to autohandoff carriers.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.Controls.ICarrierHandoffPortEvents.CarrierDetectionSignalChanged">
            <summary>
            One of the carrier detection signals(InfoPads, presence, placement sensors) has changed.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.IPurgeRecipeModuleOp">
            <summary>
            High level control of purge recipe automation.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IPurgeRecipeModuleOp.NozzlePurge(System.String,BAI.Systems.Devices.LoadPort.NozzlePurgeMode)">
            <summary>
            Signal that a port is ready to receive a purge carrier and do nozzle purge during handoff.
            This must be called before EnablePurgeRecipeSequence.
            </summary>
            <param name="loadport">Which load port to use.</param>
            <param name="nozzlePurgeMode">Either Auto, for nozzle purge during E84 handoff, or Immediate, for nozzle purge before a PGV handoff.</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IPurgeRecipeModuleOp.EnablePurgeRecipeSequence(System.String,System.Boolean,System.Boolean)">
            <summary>
            Enable purge to execute during the standard API carrier operations. Must be called after ClampCarrier and before the carrier door is opened.
            </summary>
            <param name="loadport">Which load port to use.</param>
            <param name="doPreProcesPurge">Option to enable pre-process purge.</param>
            <param name="doMaintenancePurge">Option to enable pre-process maintenance purge after pre-process purge is complete.</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IPurgeRecipeModuleOp.EnablePurgeRecipeSequence(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable purge to execute during the standard API carrier operations. Must be called after ClampCarrier and before the carrier door is opened.
            </summary>
            <param name="loadport">Which load port to use.</param>
            <param name="doPreProcesPurge">Option to enable pre-process purge.</param>
            <param name="doMaintenancePurge">Option to enable pre-process maintenance purge after pre-process purge is complete.</param>
            <param name="doPostProcessPurge">Option to enable post-process purge.</param>
            <param name="doPostProcessMaintPurge">Option to enable post-process maintenance purge after post-process purge is complete.</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IPurgeRecipeModuleOp.EnablePurgeRecipeSequence(System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Enable purge to execute during the standard API carrier operations. Must be called after ClampCarrier and before the carrier door is opened.
            </summary>
            <param name="loadport">Which load port to use.</param>
            <param name="controllerNames">Option to inform the LoadPort what nozzles to use.</param>
            <param name="doPreProcesPurge">Option to enable pre-process purge.</param>
            <param name="doMaintenancePurge">Option to enable pre-process maintenance purge after pre-process purge is complete.</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IPurgeRecipeModuleOp.EnablePurgeRecipeSequence(System.String,System.String[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable purge to execute during the standard API carrier operations. Must be called after ClampCarrier and before the carrier door is opened.
            </summary>
            <param name="loadport">Which load port to use.</param>
            <param name="controllerNames">Option to inform the LoadPort what nozzles to use.</param>
            <param name="doPreProcesPurge">Option to enable pre-process purge.</param>
            <param name="doMaintenancePurge">Option to enable pre-process maintenance purge after pre-process purge is complete.</param>
            <param name="doPostProcessPurge">Option to enable post-process purge.</param>
            <param name="doPostProcessMaintPurge">Option to enable post-process maintenance purge after post-process purge is complete.</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IPurgeRecipeModuleOp.CancelPurgeRecipeSequence(System.String)">
            <summary>
            Abort a purge in progress. 
            </summary>
            <param name="loadport">Which load port to cancel the purge on.</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IPurgeRecipeModuleOp.ReloadPurgeRecipes">
            <summary>
            Reload purge recipe xml file. 
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.IPurgeRecipeModuleCtrl">
            <summary>
            High level control of individual purge recipe activation.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IPurgeRecipeModuleCtrl.ExecuteSinglePurgeRecipe(System.String,BAI.Systems.Devices.LoadPort.PurgeRecipeType)">
            <summary>
            Immediately run a specified purge recipe on a specified loadport. This will be rejected if a recipe sequence was previously begun with EnablePurgeRecipeSequence on the port.
            </summary>
            <param name="loadport">Which load port to use.</param>
            <param name="purgeRecipeType">Which recipe to execute.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.AutoHandoffDevice">
            <summary>
            Represents which device outputs an autohandoff signal.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.AutoHandoffDevice.Passive">
            <summary>
            The device that receives or gives that carrier during auto handoff.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.AutoHandoffDevice.Active">
            <summary>
            The device that picks or places a carrier during auto handoff.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.AutoHandoffPio">
            <summary>
            Represents an auto handoff parallel input/output communication interface.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.AutoHandoffPio.Floor">
            <summary>
            The interface to ground vehicles.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.AutoHandoffPio.Middle">
            <summary>
            The interface to a carrier buffer.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Carriers.AutoHandoffPio.Overhead">
            <summary>
            The interface to a overhead transport system.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp">
            <summary>
            Methods to control the passive side of an auto handoff interface.
            </summary>
            <remarks>
                <para>
                    Devices like loadports use protocols like E84 to communicate with
                    material handling systems in factories. These material handling systems,
                    such as overhead transport systems, can place and remove carriers from passive
                    devices.
                </para>
                <para>
                    This interface allows users to control the autohandoff interface at a high level.
                </para>
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.AutoHandoffIsAvailable(System.String)">
            <summary>
            Queries if autohandoff is set to available on any of the installed connectors on one device.
            </summary>
            <param name="device">The name of the device, such as "PortA".</param>
            <returns>true if any interface is available for autohandoff, false otherwise</returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.SetAutoHandoffAvailable(System.String)">
            <summary>
            Set autohandoff to available on all installed PIO interfaces on one device.
            </summary>
            <remarks>
            This will set the
            <see cref="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.HO_AVBL"/>
            signal to high and prepare the state machine
            for handing off a carrier. The carrier will not be transferred until
            the active side requests a transfer.
            </remarks>
            <param name="device">The name of the device, such as "PortA".</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.SetAutoHandoffUnavailable(System.String)">
            <summary>
            Set autohandoff to unavailable on all installed PIO interfaces on one device.
            </summary>
            <remarks>
            This corresponds to setting the HO_AVBL signal low.
            </remarks>
            <param name="device">The name of the device, such as "PortA".</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.AutoHandoffIsAvailable(System.String,BAI.Systems.Common.Carriers.AutoHandoffPio)">
            <summary>
            Queries if autohandoff is set to available.
            </summary>
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="pio">The PIO interface to query.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.SetAutoHandoffAvailable(System.String,BAI.Systems.Common.Carriers.AutoHandoffPio)">
            <summary>
            Set autohandoff to available on one PIO interfaces on one device.
            </summary>
            <remarks>
            This will set the
            <see cref="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.HO_AVBL"/>
            signal to high and prepare the state machine
            for handing off a carrier. The carrier will not be transferred until
            the active side requests a transfer.
            </remarks>
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="pio">The PIO interface to set as available.</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.SetAutoHandoffUnavailable(System.String,BAI.Systems.Common.Carriers.AutoHandoffPio)">
            <summary>
            Set autohandoff to unavailable on one PIO interfaces on one device.
            </summary>
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="pio">The PIO interface to set as unavailable.</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.AutoHandoffIsEngaged(System.String)">
            <summary>
            Query if autohandoff is engaged on any of the installed interfaces on a device.
            </summary>
            <remarks>
            This corresponds to the
            <see cref="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.VALID"/>
            signal.
            </remarks>
            <param name="device">The name of the device, such as "PortA".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.AutoHandoffIsEngaged(System.String,BAI.Systems.Common.Carriers.AutoHandoffPio)">
            <summary>
            Query if autohandoff is engaged on the PIO interface of a device.
            </summary>
            <remarks>
            This corresponds to the
            <see cref="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalAtoP.VALID"/>
            signal.
            </remarks>
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="pio">The PIO interface to query.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.CarrierHandoffEmsIsTriggered(System.String)">
            <summary>
            Queries if EMS is trigger for a handoff port.
            </summary>
            <remarks>
            This corresponds to the
            <see cref="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.ES"/>
            signal being low.
            </remarks>
            <param name="device">The name of the device, such as "PortA".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.TriggerCarrierHandoffEms(System.String)">
            <summary>
            Trigger the EMS for a handoff port.
            </summary>
            <remarks>
            This will set the
            <see cref="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.ES"/>
            signal low.
            </remarks>
            <param name="device">The name of the device, such as "PortA".</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.ResetCarrierHandoffEms(System.String)">
            <summary>
            Reset the EMS signal to a non-alarm state.
            </summary>
            <remarks>
            This will set the
            <see cref="F:BAI.Systems.Common.Carriers.Controls.AutoHandoffSignalPtoA.ES"/>
            signal high.
            </remarks>
            <param name="device">The name of the device, such as "PortA".</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOp.RunSelfTestOnAutoHandoffPio(System.String,BAI.Systems.Common.Carriers.AutoHandoffPio)">
            <summary>
            Cycles through each signal to check if they are working as intended on a given LoadPort.
            For A -> P signals, they are just read.
            For P -> A signals, they are flipped twice, 100 ms apart so each is restored to its original state.
            </summary>
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="pio">The PIO interface to cycle through the signals.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.AutoHandoffEventHandler">
            <param name="device">One which device the signal changed, for example "EFEM.LoadPortA".</param>
            <param name="pio">On which PIO interface the signal changed changed.</param>
            <param name="signalSource">Which side of the PIO interface changed the signal.</param>
            <param name="signalName">The name of the signal.</param>
            <param name="stateAfter">The new state of the signal.</param>
            <param name="message">An human-readable message describing the event.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.AutoHandoffErrorHandler">
            <param name="device">One which device the signal changed, for example "EFEM.LoadPortA".</param>
            <param name="level">The severity of the error. <see cref="F:BAI.Systems.Common.AlarmLevel.Fatal"/> level disables auto handoff.</param>
            <param name="pio">On which PIO interface the signal changed changed.</param>
            <param name="signalSource">Which side of the PIO interface changed the signal.</param>
            <param name="signalName">The name of the signal.</param>
            <param name="stateAfter">The new state of the signal.</param>
            <param name="message">An human-readable message describing the event.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.AutoHandoffTimerHandler">
            <param name="device">One which device the signal changed, for example "EFEM.LoadPortA".</param>
            <param name="level">The severity of the error. <see cref="F:BAI.Systems.Common.AlarmLevel.Fatal"/> level disables auto handoff.</param>
            <param name="pio">On which PIO interface the signal changed changed.</param>
            <param name="timer">The name of the time. For example, "TP3".</param>
            <param name="span">The length of the timeout. For example: "30 s".</param>
            <param name="description">A human-readable description of what was supposed to happen during the timeout period.</param>
            <param name="message">An human-readable message describing the event.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents">
            <summary>
            Events for monitoring the status of E84 handoffs.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffAvailable">
            <summary>
            HO_AVBL on
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffUnavailable">
            <summary>
            HO_AVBL off
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffEngaged">
            <summary>
            VALID on
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffDisengaged">
            <summary>
            VALID off
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffLoadStarted">
            <summary>
            L_REQ on
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffLoadTransferred">
            <summary>
            L_REQ off
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffUnloadStarted">
            <summary>
            U_REQ on
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffUnloadTransferred">
            <summary>
            U_REQ off
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffActiveSignalLost">
            <summary>
            A->P off too early
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffActiveSignalUnexpected">
            <summary>
            A->P on  too early 
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffTimedoutOnTP">
            <summary>
            TP1 - TP6 timed out
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffTimedoutOnTD">
            <summary>
            TD3 timed out
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffEmsTriggered">
            <summary>
            ES off
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffEmsCleared">
            <summary>
            ES on
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceEvents.AutoHandoffCancelled">
            <summary>
            AutoHandoff Cancelled
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOpSetup.AutoHandoffSafetyShieldIsActivated(System.String)">
            <summary>
            Checks if AutoHandoffSafetyShield is activated for a device.
            </summary>
            <param name="device">Name of the device to check. For example "EFEM.LoadPortA".</param>
            <returns>true if the AutoHandoffSafetyShield is activated, false otherwise.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOpSetup.ActivateAutoHandoffSafetyShield(System.String,System.Boolean)">
            <summary>
            Activates or deactivates the AutoHandoffSafetyShield for the named device.
            </summary>
            <param name="device">Name of the device to activate or deactivate the AutoHandoffSafetyShield for. For example "EFEM.LoadPortA".</param>
            <param name="activate">The desired state of the AutoHandoffSafetyShield.</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOpSetup.GetTpTimerSetpoint(System.String,System.String)">
            <summary>
            Gets the value for the selected TP timer for the selected device.
            </summary>
            <param name="device">Name of the device to get the TP timer. For example "EFEM.LoadPortA".</param>
            <param name="timer">Name of the timer. For example "TP1" (can be between TP1-TP6).</param>
            <returns>the value of the TP timer.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOpSetup.SetTpTimerSetpoint(System.String,System.String,BAI.General.IntWithUnit)">
            <summary>
            Sets the TP timer for the selected device.
            </summary>
            <param name="device">Name of the device to set the TP timer for. For example "EFEM.LoadPortA".</param>
            <param name="timer">Name of the timer. For example "TP1" (can be between TP1-TP6).</param>
            <param name="val">Value to set the TP timer. For example "2 s".</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOpSetup.GetTdTimerSetpoint(System.String,System.String)">
            <summary>
            Gets the value for the selected TD timer for the selected device.
            </summary>
            <param name="device">Name of the device to get the TD timer. For example "EFEM.LoadPortA".</param>
            <param name="timer">Name of the timer. For example "TD1" (can be TD0, TD1, TD3).</param>
            <returns>the value of the TD timer.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOpSetup.SetTdTimerSetpoint(System.String,System.String,BAI.General.IntWithUnit)">
            <summary>
            Sets the TD timer for the selected device.
            </summary>
            <param name="device">Name of the device to set the TD timer for. For example "EFEM.LoadPortA".</param>
            <param name="timer">Name of the timer. For example "TD1" (can be TD0, TD1, TD3).</param>
            <param name="val">Value to set the TD timer. For example "200 ms".</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOpSetup.GetTcTimerSetpoint(System.String,System.String)">
            <summary>
            Gets the value for the selected TC timer for the selected device.
            </summary>
            <param name="device">Name of the device to get the TC timer. For example "EFEM.LoadPortA".</param>
            <param name="timer">Name of the timer. For example "TC1" (can be TC1 or TC2).</param>
            <returns>the value of the TC timer.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.IAutoHandoffPassiveDeviceOpSetup.SetTcTimerSetpoint(System.String,System.String,BAI.General.IntWithUnit)">
            <summary>
            Sets the TC timer for the selected device.
            </summary>
            <param name="device">Name of the device to set the TC timer for. For example "EFEM.LoadPortA".</param>
            <param name="timer">Name of the timer. For example "TC1" (can be TC1 or TC2).</param>
            <param name="val">Value to set the TC timer. For example "200 ms".</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceOp">
            <summary>
            Methods for controlling carrier handoff passive devices such as loadports.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceOp.GetCarrierPresenceState(System.String)">
            <summary>
            Query the presence state of the carrier on <paramref name="device"/>.
            </summary>
            <param name="device">The name of the device, such as "LoadPortA".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceOp.IsCarrierClamped(System.String)">
            <summary>
            Query the clamp status of a carrier handling device.
            </summary>
            <param name="device">The name of the device to clamp, such as "LoadPortA".</param>
            <returns>true if the carrier is clamped, false otherwise</returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceOp.ClampCarrier(System.String)">
            <summary>
            Clamps the carrier.
            </summary>
            <param name="device">The name of the device to clamp, such as "LoadPortA".</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceOp.UnclampCarrier(System.String)">
            <summary>
            Unclamps the carrier.
            </summary>
            <param name="device">The name of the device to clamp, such as "LoadPortA".</param>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceOp.CarrierPortIsAtLocation(System.String,System.String)">
            <summary>
            Queries if the carrier handling device is
            </summary>
            <remarks>
            The <paramref name="location"/> parameter can be different values based on the device type:
            <list type="bullet">
                <item>
                    <description>Loadports: "Docked" or "Undocked"</description>
                </item>
                <item>
                    <description>Active port: "In" or "Out"</description>
                </item>
            </list>
            </remarks>
            <param name="device">Which device to query.</param>
            <param name="location">The name of the location.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceOp.MoveCarrierPortToLocation(System.String,System.String)">
            <summary>
            Moves the carrier handling device to a location.
            </summary>
            <remarks>
            The <paramref name="location"/> parameter can be different values based on the device type:
            <list type="bullet">
                <item>
                    <description>Loadports: "Docked" or "Undocked"</description>
                </item>
                <item>
                    <description>Active port: "In" or "Out"</description>
                </item>
            </list>
            </remarks>
            <param name="device">Which device to query.</param>
            <param name="location">The name of the location to move to.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.CarrierHandoffPassiveDeviceEventHandler">
            <param name="device">The name name, for example "EFEM.LoadPortA".</param>
            <param name="location">The location of the carrier handoff device. For example, loadports are "Docked" or "Undocked". Active Ports may be "In" or "Out".</param>
            <param name="carrier">The presence state of the carrier on the handoff device.</param>
            <param name="data">The name of the PIO interface that initiated the handoff or "Manual" for manual handoff. Multiple PIOs are separated with pluses.</param>
            <param name="message">An optional message.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.CarrierHandoffPassiveDeviceErrorHandler">
            <param name="device">The name name, for example "EFEM.LoadPortA".</param>
            <param name="level">The severity of the error. <see cref="F:BAI.Systems.Common.AlarmLevel.Fatal"/> errors disable auto handoff.</param>
            <param name="location">The location of the carrier handoff device. For example, loadports are "Docked" or "Undocked". Active Ports may be "In" or "Out".</param>
            <param name="carrier">The presence state of the carrier on the handoff device.</param>
            <param name="data">The name of the PIO interface that initiated the handoff or "Manual" for manual handoff. Multiple PIOs are separated with pluses.</param>
            <param name="message">An optional message.</param>
        </member>
        <member name="T:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents">
            <summary>
            Events for monitoring carrier handoff devices such as loadports.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.CarrierClamped">
            <summary>
            Raised when the carrier becomes clamped. The <c>location</c> parameter will be "Undocked".
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.CarrierUnclamped">
            <summary>
            Raised when the carrier becomes unclamped. The <c>location</c> parameter will be "Undocked".
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.CarrierPortMovedToLocation">
            <summary>
            Raised when the carrier handoff location finishes moving. The <c>location</c> for load port: "Docked/Undocked", for active port: "In/Out".
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.CarrierPortMovedOffLocation">
            <summary>
            Raised when the carrier handoff location starts moving. The <c>location</c> for load port: "Docked/Undocked", for active port: "In/Out".
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.CarrierArrived">
            <summary>
            Raised when a carrier arrives.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.CarrierRemoved">
            <summary>
            Raised when a carrier is removed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.UnexpectedCarrierArrival">
            <summary>
            Raised when a carrier is placed on a load port while auto handoff is enabled but not engaged.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.UnexpectedCarrierRemoval">
            <summary>
            Raised when a carrier is removed from a load port while auto handoff is enabled but not engaged.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.CarrierPresenceStateError">
            <summary>
            Raised when a carrier is misplaced on a loadport.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Carriers.ICarrierHandoffPassiveDeviceEvents.CarrierHandoffError">
            <summary>
            Error other than specific error events defined.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Carriers.CarrierProperties.VerticalOffset">
            <summary>
            An extra Z offset applied to the end effector when picking / placing and from the carrier. Also, the mapping start position.
            Usually will be needed when starting slot has been shifted.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Carriers.CarrierProperties.HorizontalOffset">
            <summary>
            An extra radial offset applied to the end effector when picking from the carrier.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Carriers.ICarrierWaferMapOpSetup.WaferThickness">
            <summary>
            This value is used only if RequireWaferMapProperties is set to false.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Carriers.ICarrierWaferMapOpSetup.RequireWaferMapProperties">
            <summary>
            Indicates whether or not wafer thickness and range are required to be set before the carrier can be opened and mapped.
            Initially set to the value of the RequireWaferMapProperties op param.
            If the RequireWaferMapProperties op param is not true then this cannot be enabled.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Carriers.ICarrierWaferMapOpSetup.WaferMapProperties">
            <summary>
            Represents the minimum, target, and maximum thicknesses for a wafer when mapping.
            If RequireWaferMapProperties is true, then carriers cannot be opened and mapped without valid WaferMapProperties set.
            This is reset when carrier presence changes to absent.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.MotionAxisUpdateHandler">
            <summary>
            For posiiton update on a motion axis, such as the Theta axis on a wafer aligner, shuttle axis on a load port.
            This is used by event interfaces such as IWaferAlignerMotionEvents, ILoadPortMotionEvents.
            The wafer engine robot device does not use this interface. Its interfaces starts with IRobot.
            </summary>
            <param name="device">Full name of a device, such as EFEM.LoadPortB</param>
            <param name="axis">Short name of the axis such as Shuttle, Vertical axis fon a load port device</param>
            <param name="position">Axis position in physical units such as mm, degree. Not encoder counts.</param>
            <param name="msg">Optional message. Can be null.</param>
        </member>
        <member name="T:BAI.Systems.Common.Controls.MotionAxisErrorNotifier">
            <summary>
            For error notification on a motion axis, such as the Theta axis on a wafer aligner, shuttle axis on a load port.
            This is used by event interfaces such as IWaferAlignerMotionEvents, ILoadPortMotionEvents.
            The wafer engine robot device does not use this interface. Its interfaces starts with IRobot.
            The name is chosen to be ErrorNotifier instead of FailureHandler to hint that this is primarily for error notification.
            This is usually not used to recover from failures.
            </summary>
            <param name="device">Full name of a device, such as EFEM.LoadPortB</param>
            <param name="axis">Short name of the axis such as Shuttle, Vertical axis fon a load port device</param>
            <param name="position">Axis position in physical units such as mm, degree. Not encoder counts. This can be null.</param>
            <param name="error">Usually the exception type of the error. This must not be null.</param>
            <param name="msg">Usually the exception message. This must not be null.</param>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IN2SystemMainValveCtrl.OpenN2MainValve">
            <summary>
            This method is used to open the Main N2 Valve.
            The MFC status is checked for both front and
            rear valve and the operation is blocked if MFCs are not idle or the N2 system safety interlocks are tripped. 
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IN2SystemMainValveCtrl.CloseN2MainValve">
            <summary>
            This method is used to close the Main N2 Valve. 
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.ILightingCtrl">
            <summary>
            Manages control of the tool lighting.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.ILightingCtrl.SetLightingLevel(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Allows settign of the mini environment's light level.
            </summary>
            <param name="lightName">Light name (e.g. Led1)</param>
            <param name="level">Light level in percentage (0-100 pct) or in lumens (0-310 lm)</param>
        </member>
        <member name="M:BAI.Systems.Common.Controls.ILightingCtrl.GetLightingLevel(System.String)">
            <summary>
            Get the mini environment's light level.
            </summary>
            <param name="lightName">Light name (e.g. Led1)</param>
            <returns>Light level</returns>
        </member>
        <member name="M:BAI.Systems.Common.Controls.ILightingCtrl.InitializeLightLevel">
            <summary>
            Initializez the light level to a preconfigured value.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.ILightingEvents">
            <summary>
            Call backs for mini environment lighting.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Controls.ILightingEvents.LightingLevelChanged">
            <summary>
            Call back to inform that the mini environment's lighting level has changed.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IChamberCtrl.IsolateFromPump(System.Boolean)">
            <summary>
            To isolate or deisolate from vacuum pump when vacuum foreline is shared with another module
            </summary>
            <param name="isolate">To isolate or deisolate</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IChamberCtrl.PumpToBase">
            <summary>
            Bring chamber to base state (pumped to vacuum with no purge gas flow)
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IChamberCtrl.PumpToStandby">
            <summary>
            Bring chamber to standby state (pumped to vacuum with very small level of purge gas flow)
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IChamberCtrl.PumpToTransferZone">
            <summary>
            Bring chamber to vacuum transfer state (pumped to vacuum with purge gas flow at transfer level)
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IChamberCtrl.GetValveState(System.String)">
            <summary>
            Return the state of a given valve on the chamber
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IChamberCtrl.LockPort(System.String)">
            <summary>
            For chambers with ports that can lock (VCE). 
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.IOpticSensorCtrl">
            <summary>
            A generic interface for optical sensors, such as wafer aligner optical linear/CCD sensors
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IOpticSensorCtrl.GetOpticSensorReceivedIntensity(System.String)">
            <summary>
            Get the intensity of signal received
            </summary>
            <param name="sensor">Name of sensor such as "WaferAligner.LightSensor"</param>
            <returns>Received intensity such as 80 %</returns>
        </member>
        <member name="T:BAI.Systems.Common.Controls.IPurgeGasFlowCtrl">
            <summary>
            Interface to abstract the functionality of an MFC
            
            Flow rate can be sccm, slm, (or % of full scale)
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.PurgeMfcGasFlowLevelHandler">
            <summary>
            Call back for events to update MFC flow level
            </summary>
            <param name="controllerName">MFC controller name e.g. Front or Rear</param>
            <param name="flowLevel">Flow level in slm </param>
        </member>
        <member name="T:BAI.Systems.Common.Controls.PurgeMfcGasFlowStateHandler">
            <summary>
            Call back for events to update MFC flow state
            </summary>
            <param name="controllerName">MFC controller name e.g. Front or Rear</param>
            <param name="flowState">Flow state (FlowStarted, SetPointReached, FlowComplete or FlowError)</param>
        </member>
        <member name="E:BAI.Systems.Common.Controls.IPurgeGasFlowEvents.PurgeMfcGasFlowLevelChanged">
            <summary>
            Call back for events to update MFC flow level
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Controls.IPurgeGasFlowEvents.PurgeMfcGasFlowStateChanged">
            <summary>
            Call back for events to update MFC flow state
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.RoboticPosition">
            <summary>
            Immutable object to represent the coordinates of a robotic device
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Controls.RoboticPosition.Robot">
            <summary>
            Name of the robotic device
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Controls.RoboticPosition.Axes">
            <summary>
            Get the axes names of the robotic coordinates
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Controls.RoboticPosition.Coordinates">
            <summary>
            Return a copy of the coordinates: key = axis name, value = position
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.RoboticPosition.ToString">
            <summary>
            Return the Standard format of the position in Current Culture
            </summary>
            <returns></returns>
        </member>
        <member name="F:BAI.Systems.Common.Controls.RobotMotionProfile.Full">
            <summary>
            Approximately 100%, use this for wafer.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.RobotMotionProfile.High">
            <summary>
            Approximately  75%, use this for translator.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.RobotMotionProfile.Medium">
            <summary>
            Approximately  50%, use this for translator + ring.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.RobotMotionProfile.Low">
            <summary>
            Approximately  25%.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.RobotMotionProfile.Home">
            <summary>
            Approximately  10%.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.RobotMotionProfile.Jog">
            <summary>
            Approximately  1%.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.MotionProfileNames.Full">
            <summary>
            100%
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.MotionProfileNames.High">
            <summary>
            Approximately  75%.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.MotionProfileNames.Medium">
            <summary>
            Approximately  50%.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.MotionProfileNames.Low">
            <summary>
            Approximately  25%.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.MotionProfileNames.Home">
            <summary>
            Approximately  10%.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.MotionProfileNames.Jog">
            <summary>
            Approximately  1%.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.ZAxisMotionProfileName.StrokeUp">
            <summary>
            Approximately  20%.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.ZAxisMotionProfileName.StrokeDown">
            <summary>
            Approximately  20%.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.IEndEffecterCtrl">
            <summary>
            Controls to move end effecters to taught locations.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IEndEffecterCtrl.RetractEndEffecter(System.String)">
            <summary>
            Retract an end effecter from extended positions.
            </summary>
            <param name="endEffecter">Name of the end effecter, such as "EE1"</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IEndEffecterCtrl.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer)">
            <summary>
            Extend an end effecter to a named position.
            Note - parent module must ensure that port is open already and states open.
            </summary>
            <param name="endEffecter">Name of the end effecter, such as "EE1"</param>
            <param name="location">Location of where the end effecter will extend to, such as "PortU.Slot1"</param>
            <param name="verticalOffset">The offset position from wafer plane, such as Below, Wafer, Above</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IEndEffecterCtrl.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer,System.Single,System.Single)">
            <summary>
            Extend an end effecter to a named position with radial (mm) and theta (deg) offsets
            Note - parent module must ensure that port is open already and states open
            </summary>
            <param name="endEffecter">Name of the end effecter, such as "EE1"</param>
            <param name="location">Location of where the end effecter will extend to, such as "PortU.Slot1"</param>
            <param name="verticalOffset">The offset position from wafer plane, such as Below, Wafer, Above</param>
            <param name="radialOffsetMM">A radial offset position applied from the taught position</param>
            <param name="thetaOffsetDeg">A theta offset position applied from the taught position</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IEndEffecterCtrl.MoveUpToWaferPlane(System.String,System.String)">
            <summary>
            Moves the end effecter up from below the wafer to the wafer plane.
            </summary>
            <param name="endEffecter">Name of the end effecter, such as "EE1"</param>
            <param name="location">Location of where the end effecter will move up to wafer plane, such as "PortU.Slot1"</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IEndEffecterCtrl.MoveDownToWaferPlane(System.String,System.String)">
            <summary>
            Moves the end effecter down from above the wafer to the wafer plane.
            </summary>
            <param name="endEffecter">Name of the end effecter, such as "EE1"</param>
            <param name="location">Location of where the end effecter will move down to wafer plane, such as "PortU.Slot1"</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IEndEffecterCtrl.MoveUpToGetWafer(System.String,System.String)">
            <summary>
            Moves the end effecter up to above the wafer. This move can be started when at the wafer plane or below the wafer.
            </summary>
            <param name="endEffecter">Name of the end effecter, such as "EE1"</param>
            <param name="location">Location of where the end effecter will move up to, such as "PortU.Slot1"</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IEndEffecterCtrl.MoveDownToPutWafer(System.String,System.String)">
            <summary>
            Moves the end effecter down to below the wafer. This move can be started when at the wafer plane or above the wafer.
            </summary>
            <param name="endEffecter">Name of the end effecter, such as "EE1"</param>
            <param name="location">Location of where the end effecter will move down to, such as "PortU.Slot1"</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="F:BAI.Systems.Common.Controls.SubstrateRestraintType.Passive">
            <summary>
            The wafer is held on the end effecter by friction; no actuation of the wafer restraint is possible.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.SubstrateRestraintType.Edge">
            <summary>
            The wafer is restrained by gripping its edge.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Controls.SubstrateRestraintType.Vacuum">
            <summary>
            The wafer is restrained by applying vacuum.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Controls.EndEffecterInfo.Name">
            <summary>
            The name of the end effector.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Controls.EndEffecterInfo.HasSubstrateSense">
            <summary>
            Indicates whether the end effector is able to sense the presence of a substrate.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Controls.EndEffecterInfo.HasVacuumSense">
            <summary>
            Indicates whether the end effecter has a vacuum sensor whose level can be read through the
            <see cref="M:BAI.Systems.Common.Controls.IEndEffecterInfo.GetEeVacuumLevel(System.String)"/> method.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Controls.EndEffecterInfo.RestraintType">
            <summary>
            Describes by what means the wafer is restrained on the end effector.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.IRobotCtrl">
            <summary>
            Nethods for lower level control of the robot.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Controls.IRobotCtrl.MotionAxes">
            <summary>
            The names of the axes of the robot.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.MotionServoIsOn">
            <summary>
            Whether all axes are servoed on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.SetMotionServo(System.Boolean)">
            <summary>
            Set the servo state of all axes.
            </summary>
            <param name="on"><c>true</c> to turn on the more, <c>false</c> to turn it off</param>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.MotionServoIsOnForAxis(System.String)">
            <summary>
            Query the servo state of one axis.
            </summary>
            <param name="axis">The axis name, such as "EE1".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.SetMotionServoForAxis(System.String,System.Boolean)">
            <summary>
            Set the servo state for one axis.
            </summary>
            <param name="axis">The axis name, such as "EE1".</param>
            <param name="on"><c>true</c> to turn on the more, <c>false</c> to turn it off</param>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.HomeAllAxes">
            <summary>
            Home the all axes in the robot.
            </summary>
            <remarks>
            This method may throw an exception if the robot is not in a safe position to home.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.HomeAxis(System.String)">
            <summary>
            Home a single axis. This method does not perform safety checks before starting the homing process.
            </summary>
            <remarks>
            </remarks>
            <param name="axis">The name of the axis, such as "EE1".</param>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.StopMotion(System.String)">
            <summary>
            Stop motion on an axis (soft or hard stop) - motion stops, but servo is till on.
            </summary>
            <param name="axis">The name of the axis, such as "EE1".</param>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.StopMotion">
            <summary>
            Stop motion on all axes (soft or hard stop) - motion stops, but servo is till on.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.Ems">
            <summary>
            Emergency Motor Stop (EMS) - stops motion, servo for all-axes turned off, alarm tripped.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.GetRobotMotionProfiles">
            <summary>
            A list of valid profile names that can be passed to <see cref="M:BAI.Systems.Common.Controls.IRobotCtrl.SetActiveRobotMotionProfile(System.String)"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.GetActiveRobotMotionProfile">
            <summary>
            The name of the profile that will be used for operational commands.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.SetActiveRobotMotionProfile(System.String)">
            <summary>
            Sets the name of the profile that will be used for operational commands.
            </summary>
            <param name="profile">One of the motion profile returned by <see cref="M:BAI.Systems.Common.Controls.IRobotCtrl.GetRobotMotionProfiles"/>.</param>
            <remarks>
            The <see cref="T:BAI.Systems.Common.Controls.RobotMotionProfileName"/> class also defines some common motion profile names.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.MoveRelative(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Move an axis a relative amount from its current position. There are NO safety checks to prevent damage to the robot or substrates.
            </summary>
            <param name="axis">The axis name, such as "EE1".</param>
            <param name="distance">How far to move the axis.</param>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.MoveAbsolute(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Move an axis to a position. There are NO safety checks to prevent damage to the robot or substrates.
            </summary>
            <param name="axis">The axis name, such as "EE1".</param>
            <param name="position">To what position to move the axis.</param>
            <remarks>
            This method will fail if the robot has not been homed.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.GetAxisPosition(System.String)">
            <summary>
            Query the current position of the axis.
            </summary>
            <param name="axis">The axis name, such as "EE1".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IRobotCtrl.GetRobotPosition">
            <summary>
            Get current position of all axes in the robot.
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="T:BAI.Systems.Common.Controls.RoboticPositionUpdateHandler">
            <param name="source">The name of the robot.</param>
            <param name="position">The new position of the robot.</param>
        </member>
        <member name="T:BAI.Systems.Common.Controls.DioChangeHandler">
            <param name="source">The name of the device whose signal changed.</param>
            <param name="signal">The name of the signal that changed.</param>
            <param name="before">The previous state of the signal.</param>
            <param name="after">The current state of the signal.</param>
        </member>
        <member name="T:BAI.Systems.Common.Controls.IRobotEmsEvents">
            <summary>
            Events for monitoring that state of the emergency stop feature.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Controls.IRobotEmsEvents.EmsTriggered">
            <summary>
            Raised when the emergency stop is trigger, either by software or hardware.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Controls.IRobotEmsEvents.EmsCleared">
            <summary>
            Raised when the physical emergency stop button is no longer triggered.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.IRobotEvents">
            <summary>
            Events for monitoring the status of the robot.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Controls.IRobotEvents.RobotPositionChanged">
            <summary>
            Raised approximating 4 times a second while the robot is changing position.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Controls.IWaferRestraintCtrl">
            <summary>
            Interface representing active mechanism to secure wafer on a wafer host
            such as edge grip, vacuum suction, or e-chuck.
            </summary>
            <remarks>
            High level operation such as
            <see cref="M:BAI.Systems.Common.ITransferOp.GetWafer(System.String,System.String)"/>
            automatically actuate grip. This interface it used if the user needs low level
            control. It is often paired with <see cref="T:BAI.Systems.Common.Controls.IEndEffecterCtrl"/>.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IWaferRestraintCtrl.GetWaferRestraintState(System.String)">
            <summary>
            Query the state of the wafer restraint mechanism.
            </summary>
            <param name="waferHost">The name of the wafer host, such as "EE1".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IWaferRestraintCtrl.ApplyWaferRestraint(System.String)">
            <summary>
            Applies the wafer restraint, preventing the wafer from being easily removed from the wafer host.
            </summary>
            <param name="waferHost">The name of the wafer host, such as "EE1".</param>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IWaferRestraintCtrl.ReleaseWaferRestraint(System.String)">
            <summary>
            Release the wafer restraint, allowing the wafer to be easily removed from the wafer host.
            </summary>
            <param name="waferHost">The name of the wafer host, such as "EE1".</param>
        </member>
        <member name="T:BAI.Systems.Common.Controls.IWaferPresenceSensorCtrl">
            <summary>
            A generic interface to represent a sensor for wafer presence, such as vacuum sensor, optical sensor, capacitance sensor and etc
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Controls.IWaferPresenceSensorCtrl.GetWaferPresenceSensorState(System.String)">
            <summary>
            Read the wafer presence state from a sensor such as from the CCD sensor on wafer aligner
            </summary>
            <param name="sensor">Name of the sensor such as OFA.VacSensor</param>
            <returns>Detected wafer presence state from this particular sensor</returns>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.ChamberOperationFailedException">
            <summary>
            Exception thrown when a request can not be accomodated at current state
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.WaferPresenceConflictException">
            <summary>
            Exception thrown when two ways are determining wafer presence are in conflict.
            Example one: multiple wafer sensors might give conflicting results 
            that could be caused by faulty sensors, or wafer slipage.
            Example two: persistent information on wafer presence might be in conflict with sensors.
            User might have removed/placed wafer manually. Such conflicts needs to be resolved by use confirmation.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.SecureWaferException">
            <summary>
            Exception thrown when a SecureWafer() call failed
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.ReleaseWaferException">
            <summary>
            Exception thrown when a ReleaseWafer() call failed
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.GateStateInconsistentException">
            <summary>
            Exception thrown when a gate's open/closed digital signals are in conflict.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.HardwareException">
            <summary>
            Base exception for all exception that is caused directly by hardware problems
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Exceptions.ExecutionExceptions.HardwareException.#ctor(System.String,System.UInt32,System.String,System.Exception)">
            <summary>
            Full constructor - all other constructors call the full constructor
            </summary>
            <param name="source">source of exception - normally use the convention module.devoce.object.</param>
            <param name="message">error message</param>
            <param name="innerException">optional inner exception if not null</param>
            <param name="errorcode"></param>
        </member>
        <member name="M:BAI.Systems.Common.Exceptions.ExecutionExceptions.IobHwException.#ctor(System.String,System.UInt32,System.String,System.Exception)">
            <summary>
            Full constructor - all other constructors call the full constructor
            </summary>
            <param name="source">source of exception - normally use the convention module.devoce.object.</param>
            <param name="message">error message</param>
            <param name="innerException">optional inner exception if not null</param>
            <param name="errorcode"></param>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.MotionException">
            <summary>
            Base exception for motion related errors
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.TransferExecutionException">
            <summary>
            Exception thrown when end effecter failed in executing wafer transfer.
            This is extremely rare. When happens, usually it's due to motion failure.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.UnexpectedStateException">
            <summary>
            Exception thrown when a request can not be accomodated at current state
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ChamberPressuresNotEqualException">
            <summary>
            Exception thrown when attempt to open gate between two chambers while pressure differential is beyond defined tolerance range.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.CanNotOpenMoreThanOnePortInVacException">
            <summary>
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ChamberIsNotClosedException">
            <summary>
            Exception thrown when attempt to pump/vent chamber when chamber if not fully closed.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.CanNotClosePortOnEndEffecterException">
            <summary>
            Exception thrown when a close port command can not be executed due to extended end effecter
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.CanNotClosePortOnWaferException">
            <summary>
            Exception thrown when a close port command can not be executed due to wafer presence in port
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.NeighborModuleNotReadyToOpenPortException">
            <summary>
            Exception thrown when a open port command can not be executed due to neighbor module not ready
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.NeighborModuleNotAtAtmToOpenPortException">
            <summary>
            Exception thrown when a open port command can not be executed due to neighbor module not at ATM pressure
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.NeighborModuleNotAtVacToOpenPortException">
            <summary>
            Exception thrown when a open port command can not be executed due to neighbor module not at vacuum pressure
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.NeighborChamberNotClosedToOpenPortException">
            <summary>
            Exception thrown when a open port command can not be executed due to neighbor module not at vacuum pressure
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Exceptions.ValidationExceptions.DeviceNameFormatException.#ctor(System.String,System.String,System.String)">
            <summary>
            String format exception thrown when an input string parameter does not conform to device name format Module.Device
            </summary>
            <param name="source"></param>
            <param name="paramName">Name of the string parameter intended to be a device name</param>
            <param name="paramValue"></param>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.DeviceException">
            <summary>
            Geric exception thrown by module level software (EFEM, TC, VT, PM, and etc)
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Exceptions.ValidationExceptions.DeviceException.#ctor(System.String,System.UInt32,System.String,System.Exception)">
            <summary>
            Full constructor - all other constructors call the full constructor
            </summary>
            <param name="source">source of exception - normally use the convention module.devoce.object.</param>
            <param name="errorcode"></param>
            <param name="message">error message</param>
            <param name="innerException">optional inner exception if not null</param>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.InvalidDioSignalException">
            <summary>
            Exception is client calls DIO methods with an invalid signal
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.InvalidDoSignalException">
            <summary>
            This exception is throw usually when client attempts to write to a DI signal.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.DioSignalNotConnectedException">
            <summary>
            This exception is throw when client attempts to read/write a DIO signal that's not connected
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.HwCommException">
            <summary>
            Geric exception thrown by module level software (EFEM, TC, VT, PM, and etc)
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Exceptions.ValidationExceptions.HwCommException.#ctor(System.String,System.UInt32,System.String,System.Exception)">
            <summary>
            Full constructor - all other constructors call the full constructor
            </summary>
            <param name="source">source of exception - normally use the convention module.devoce.object.</param>
            <param name="errorcode"></param>
            <param name="message">error message</param>
            <param name="innerException">optional inner exception if not null</param>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ObjectIdMatchNotFoundException">
            <summary>
            Exception thrown when given short name for an object did not lead to a match in searching.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ObjectIdMatchNotUniqueException">
            <summary>
            Exception thrown when given short name for an object did not lead to a unique match in searching.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ComponentIsDisabledException">
            <summary>
            </summary>    
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.CanNotExtendEndEffecterToClosedPortException">
            <summary>
            </summary>    
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.CanNotMoveEndEffecterUpToGetWaferException">
            <summary>
            </summary>    
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.CanNotMoveEndEffecterDownToPutWaferException">
            <summary>
            </summary>    
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.StateTransitionRejectedException">
            <summary>
            Exception thrown when a request can not be accomodated at current state
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.SubstrateRestraintException">
            <summary>
            Base exception for wafer restraint problems.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.SubstrateHostHasNoWaferRestraintHwException">
            <summary>
            Exception thrown when a SecureWafer() call is made on a wafer host that does not support restraint
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.NoWaferToSecureException">
            <summary>
            Exception thrown when a SecureWafer() call is made while there is no wafer on host
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.SubstrateTransferException">
            <summary>
            Base exception for wafer transfer problems.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.InvalidWaferTransferException">
            <summary>
            Exception thrown when a transfer is not valid for various reasons.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.PreTransferException">
            <summary>
            Exception thrown when conditions are not met to execute a transfer.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.PortNotOpenToStartTransferException">
            <summary>
            Exception thrown if the gate on a port for wafer transfer is not open.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.SubstrateAbsentAtFromLocationException">
            <summary>
            Exception thrown if there is no wafer on the from location.
            </summary>
            <remarks>
            For a GetWafer transfer, the from location would be the target location
            For a PutWafer transfer, the from location would be the end effecter.
            </remarks>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.SubstrateUnknownAtFromLocationException">
            <summary>
            Exception thrown if there is wafer state is unknown at the from location.
            </summary>
            <remarks>
            For a GetWafer transfer, the from location would be the target location
            For a PutWafer transfer, the from location would be the end effecter.
            </remarks>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.SubstratePresentAtToLocationException">
            <summary>
            Exception thrown if there is there is already a wafer on the to location.
            For a GetWafer transfer, the to location would be the end effecter.
            For a PutWafer transfer, the to location would be the target location.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.SubstrateNotAbsentAtToLocationException">
            <summary>
            Exception thrown if substrate state is not absent on the to location.
            For a GetWafer transfer, the to location would be the end effecter.
            For a PutWafer transfer, the to location would be the target location.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.SubstrateHostNotInTransferLocationException">
            <summary>
            Exception thrown if the location for end effecter to get/put wafers from/to has no wafer host.
            For example, when transfer a wafer from TC to a VT, if no TC column is ready at the port location, 
            this exception is thrown.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.CanNotStartNewTransferBeforeCurrentFinishesException">
            <summary>
            Exception thrown if commanded to run a new transfer before current transfer completes.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.ValidationExceptions.CanNotExtendEndEffecterException">
            <summary>
            </summary>    
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.GeneralExceptions.FacilitiesException">
            <summary>
            Exception to flag facilities problems such as CDA, VAC, and purge gas pressure not OK
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.VerificationExceptions.InvalidWaferSwapException">
            <summary>
            Base exception for wafer transfer problems.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.VerificationExceptions.AwcOffsetsOutOfRangeException">
            <summary>
            </summary>    
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.VerificationExceptions.InvalidRequestForCurrentStateException">
            <summary>
            Exception thrown when a request can not be accomodated at current state
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.VerificationExceptions.InvalidVerticalOffsetException">
            <summary>
            </summary>    
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.VerificationExceptions.PostTransferException">
            <summary>
            Exception thrown when something is not correct after a wafer transfer motion.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.VerificationExceptions.CanNotConfirmWaferTransferredException">
            <summary>
            Exception thrown if can not determine if wafer transferred successfully after transfer motion
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.VerificationExceptions.WaferRemainedAfterPutWaferException">
            <summary>
            Exception thrown if it is determined that the wafer is still on the end effector
            after a PutWafer operation.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Exceptions.VerificationExceptions.WaferAbsentAfterGetWaferException">
            <summary>
            Exception thrown if it is determined that the wafer is still on the end effector
            after a PutWafer operation.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.FastPumpPressureForPump">
            <summary>
            Pressure to trigger second step of pumping - open fast pump valve
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.FastPumpHysteresisForPump">
            <summary>
            Percentage hysteresis above fast pump pressure set point for DI signal AT_FST_PMP_PRESS to turn false
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.PurgeOpenPressureForPump">
            <summary>
            Pressure to trigger fourth step of pumping - open purge gas flow
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.PurgeLevelForPump">
            <summary>
            Purge gas flow control percentage for vacuum tranfer (set point for MKS 640K)
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.TransferPressureForPump">
            <summary>
            Transfer pressure (set point for MKS 901P)
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.TransferHysteresisForPump">
            <summary>
            Percentage hysteresis above transfer pressure set point for DI signal AT_TRANS_PRESS to turn false
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.PumpToPressureForPump">
            <summary>
            Target pressure for pump - when PumpChamber() call returned
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.GasTypeForVent">
            <summary>
            Gas type used to vent: NITROGEN, AIR, ARGON, HYDROGEN, HELIUM, H2O
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.AtmPressureForVent">
            <summary>
            Atmospheric pressure (set point for MKS 901P, 760 +- 20 torr)
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.AtmHysteresisForVent">
            <summary>
            Percentage hysteresis below ATM pressure set point for DI signal AT_ATM_PRESS to turn false
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.VentTimeAfterAtmForVent">
            <summary>
            Time delay from reaching ATM pressure to close vent valve (to compensate for gas cooling)
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.UseEqualizeValveForVent">
            <summary>
            Option whether to use the pressure equlization valve in venting if it's installed
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.EqualizeOpenDelayForVent">
            <summary>
            Time delay to open pressure equalization valve for vent from reaching ATM pressure
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.VentToPressureForVent">
            <summary>
            Target pressure for venting - slightly above 760 torr, normally
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IChamberOpSetup.PurgeLevelForStandby">
            <summary>
            Purge gas flow control percentage for standby (in vacuum)
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IChamberOpSetup.ResetChamberOpParams">
            <summary>
            Reset all chamber operation setup parameters by loading them from cofiguration file for the module
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IChamberOp.PumpChamber">
            <summary>
            Pump chamber to vacuum transfer zone (with purge gas flowing)
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IChamberOp.SetPortState(System.String,BAI.Systems.Common.GateState)">
            <summary>
            Method provided for client to set port state only if 
            there is no hardware wiring to this module on port closed signal
            </summary>
            <param name="port"></param>
            <param name="state"></param>
        </member>
        <member name="T:BAI.Systems.Common.IModulePortInterlock">
            <summary>
            Information about the status of the hardware interlocking signals.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IModulePortInterlock.PortIsReadyForEndEffecter(System.String)">
            <summary>
            Query if a port is ready to accept an end effecter.
            </summary>
            <param name="port">the name of the port</param>
            <returns><c>true</c> if the port is ready, <c>false</c> otherwise</returns>
        </member>
        <member name="M:BAI.Systems.Common.IModulePortInterlock.PortIsClearOfEndEffecters(System.String)">
            <summary>
            Query of the port is being advised that the end effector is clear and it is safe for the port to close.
            </summary>
            <param name="port">the name of the port</param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Common.IActiveModulePortInterlock">
            <summary>
            Methods for controlling hardware interlock signals.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IActiveModulePortInterlock.SetPortClearOfEndEffecters(System.String,System.Boolean)">
            <summary>
            Signals whether <paramref name="port"/> is clear of an end effector.
            </summary>
            <remarks>
                <para>
                    It is typically not necessary to directly use this interface.
                    The robot can be configured to automatically control
                    the hardware interlock signals.
                </para>
                <para>
                    This sets a hardware interlock signal that indicates to the device
                    controlling <paramref name="port"/> whether or not the robot
                    end effecter is clear of the port.
                </para>
            </remarks>
            <param name="port">which port to signal</param>
            <param name="clear"><c>true</c> if the robot is clear and the port is safe to close</param>
        </member>
        <member name="M:BAI.Systems.Common.IVacModulePortInterlock.PortIsReadyToClose(System.String)">
            <summary>
            Same logic as PortIsClearOfEndEffecters() on vacuum modules
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.IActiveVacModulePortInterlock.SetPortReadyToClose(System.String,System.Boolean)">
            <summary>
            Same logic as SetPortClearOfEndEffecters() on vacuum modules
            </summary>
            <param name="port"></param>
            <param name="ready"></param>
        </member>
        <member name="T:BAI.Systems.Common.AlarmLevel">
            <summary>
            The severity level of the alarm.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.AlarmLevel.Warning">
            <summary>
            An alarm the does not stop the tool from operating.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.AlarmLevel.Fatal">
            <summary>
            An alarm the stops the tool from operating.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.AlarmEventHandler">
            <param name="source">The name of the device that generated the alarm.</param>
            <param name="level">The level of the alarm, i.e. how severe it is.</param>
            <param name="message">An informational method describing the alarm.</param>
        </member>
        <member name="T:BAI.Systems.Common.AlarmClearHandler">
            <param name="initiator">The name of the initiator that generated the alarm clearing.</param>
            <param name="source">The name of the device that generated the alarm.</param>
            <param name="level">The level of the alarm, i.e. how severe it is.</param>
            <param name="message">An informational message describing the alarm.</param>
        </member>
        <member name="T:BAI.Systems.Common.IAlarmEvents">
            <summary>
            Contains events for subscribing to notifications about alarms.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.IAlarmEvents.AlarmGenerated">
            <summary>
            Raised when an object encounters an alarm condition.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.IAlarmEvents.AlarmCleared">
            <summary>
            Raised when an alarm condition was cleared.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.AlarmClearInitiator">
            <summary>
            Contains the alarm clearing initiator
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.MaterialManager.ISimulatedMaterialManager">
            <summary>
            A version of the <see cref="T:BAI.Systems.Common.MaterialManager.IMaterialManager"/> that does not persist changes.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.MaterialManager.MaterialManager.#ctor(BAI.Systems.Common.Rules.Persistence.RulesPersistenceManager,BAI.Systems.Common.MaterialManager.ISubstrateManager,BAI.Systems.Common.MaterialManager.ICarrierManager,BAI.Systems.Utils.Configs.FabSpecManager)">
            <summary>
            For unit tests.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.MaterialManager.MaterialManager.BeginSubstrateTransfer(BAI.General.ObjectId,BAI.General.ObjectId)">
            <summary>
            Mark substrates in the substrate map as being in the transferring state. This does not validate the substrate presence for the transfer.
            </summary>
            <param name="fromLocation"></param>
            <param name="toLocation"></param>
        </member>
        <member name="M:BAI.Systems.Common.MaterialManager.MaterialManager.EndSubstrateTransfer(BAI.General.ObjectId,BAI.General.ObjectId,BAI.Systems.Common.MaterialManager.MaterialSignature)">
            <summary>
            For internal use only - use EndSubstrateTransfer((ObjectId fromLocation, ObjectId toLocation) instead.
            </summary>
            <param name="fromLocation"></param>
            <param name="toLocation"></param>
            <param name="substrateType"></param>
        </member>
        <member name="M:BAI.Systems.Common.MaterialManager.MaterialManager.ResolveSubstrateMap(BAI.General.ObjectId,BAI.Systems.Common.WaferPresenceState)">
            <summary>
            Check to see if there are pending substrate transfers at the mapped location and update the substrate map if there is enough information.
            This should be called from MapWaferPresenceOnHost and SetWaferPresenceOnHost.
            </summary>
            <param name="location">Location that was mapped.</param>
            <param name="presenceAtLocation">Mapped wafer presence state of the location.</param>
        </member>
        <member name="M:BAI.Systems.Common.MaterialManager.MaterialManager.ClearAllSubstrateTransfers">
            <summary>
            End any pending substrate transfers that might happening to or from location when a location becomes unavailable;
            they will not be able to be resolved through MapWaferPresence or SetWaferPresence.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.MaterialManager.MaterialManager.GetWaferPresenceOnHost(BAI.General.ObjectId)">
            <summary>
            Get the wafer presence state associated with the correct location in the substrate map, even when a substrate is in transit.
            This should be used on the module.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="F:BAI.Systems.Common.Rules.Persistence.RulesPersistenceManager.configFileFullPath">
            <summary>
            If null or the empty string, no saving should be performed.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Rules.Persistence.RulesPersistenceManager.#ctor(BAI.Systems.Common.Rules.Persistence.MaterialRulesConfig,BAI.Systems.Utils.Configs.FabSpecManager)">
            <summary>
            For testing purposes, does not save rules to disk.
            </summary>
            <param name="config"></param>
            <param name="materialSpec"></param>
        </member>
        <member name="T:BAI.Systems.Common.Materials.PodTypeInfo">
            <summary>
            Data type for pod definition - expose to app in a subsequent release
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Materials.CassetteTypeInfo">
            <summary>
            Data type for cassette definition - expose to app in a subsequent release
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Materials.CarrierTypeInfo">
            <summary>
            Data type for carrier definition - expose to app in a subsequent release
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl">
            <summary>
            Interface to identify material type on load port, including carriers, substrates.
            </summary>
            <remarks>
            <para>
            It is supported by the ILoadPort interface and therefore, Load Port objects.
            After a carrier arrives at a handoff port (such as load port),
            the carrier type and the substrate type it carrier may not be unique.
            This interface provide methods for the app to select so that they are unique.
            Carrier operations can not proceed unless the carrier and substrate types are uniquely identified.
            </para>
            <para>
            The sequence of operation is as follows:
            <list type="number">
            	<item><description>EFEM sends event to App: CarrierArrived()</description></item>
            	<item><description>App calls EFEM: GetMatchingCarrierTypesOnHandoffPort()</description></item>
            	<item><description>If above returns array > 1, App calls EFEM: SetActiveCarrierTypeOnHandoffPort()</description></item>
            	<item><description>App calls EFEM: GetMatchingSubstrateTypesOnHandoffPort()</description></item>
            	<item><description>If above returns array > 1, App calls EFEM: SetActiveSubstrateTypeOnHandoffPort()</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl.GetMatchingCarrierTypesForCarrierOnPort">
            <summary>
            Returns the carrier types that match the signature for current carrier on a load port
            </summary>
            <returns>Array of matches. Size 0 if no match or no carrier on load port.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl.GetActiveCarrierTypeForCarrierOnPort">
            <summary>
            Returns the active carrier type for current carrier on load port.
            And active carrier type is either the only carrier type that matches the signature of current carrier on load port,
            or the one selected by app when there are multiple matches.
            </summary>
            <return>Carrier type if unique carrier is a unique match, or an active type has been selected.
            Empty string if no carrier, or no active carrier type selected.
            </return>
        </member>
        <member name="M:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl.SetActiveCarrierTypeOnHandoffPort(System.String)">
            <summary>
            Sets the active carrier type for current carrier on load port.
            For definition of active carrier type, see GetActiveCarrierTypeForCarrierOnPort()
            </summary>
            <param name="carrierType">Carrier type app selected from the array returned by GetMatchingCarrierTypesForCarrierOnPort()</param>
        </member>
        <member name="M:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl.GetMatchingSubstrateTypesForCarrierOnPort">
            <summary>
            Returns the substrate types that the carrier type(s) can carry for current carrier on load port.
            If the carrier type is uniquely matches or if an active carrier type is selected,
            the substrate types this carrier can carrier are returned.
            Otherwise, substrate types for all matching carrier are returned.
            </summary>
            <returns>Array of substrate types current carrier(s) can carry.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl.GetActiveSubstrateTypeForCarrierOnPort">
            <summary>
            Returns the active substrate type in active carrier type on load port.
            </summary>
            <returns>Empty string if neither active carrier type nor active substrate type is determined.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl.SetActiveSubstrateTypeForCarrierOnPort(System.String)">
            <summary>
            Sets the active substrate type for active carrier on load port.
            </summary>
            <param name="substrateType">Substrate type app selected from the array returned by GetMatchingSubstrateTypesForCarrierOnPort()</param>
        </member>
        <member name="M:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl.ActiveCarrierTypeIsSetOnCarrierHandoffPort">
            <summary>
            Determines if active carrier type is determined (unique match is found or app has selected one).
            </summary>
            <returns>True if active carrier type is determined.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl.ActiveSubstrateTypeIsSetOnCarrierHandoffPort">
            <summary>
            Determines if active substrate type is determined (unique match is found or app has selected one).
            </summary>
            <returns>True if active substrate type is determined.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.Control.IMaterialTypeIdCtrl.ActiveMaterialTypesAreSetOnCarrierHandoffPort">
            <summary>
            Determines if active material types (both carrier and substrate types) have been determined.
            </summary>
            <returns>True only if both carrier and substrate types are determined.</returns>
        </member>
        <member name="T:BAI.Systems.Common.Materials.IMaterialSpec">
            <summary>
            New interface for App
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Materials.IMaterialTypeIdOp">
            <summary>
            Interface to identify material type in EFEM, including carriers, substrates.
            </summary>
            <remarks>
            <para>
            It is supported by the IEFEM interface and therefore, EFEM Proxies.
            After a carrier arrives at a handoff port (such as load port),
            the carrier type and the substrate type it carrier may not be unique.
            This interface provide methods for the app to select so that they are unique.
            Carrier operations can not proceed unless the carrier and substrate types are uniquely identified.
            </para>
            <para>
            The sequence of operation is as follows:
            <list type="number">
            	<item><description>EFEM sends event to App: CarrierArrived()</description></item>
            	<item><description>App calls EFEM: GetMatchingCarrierTypesOnHandoffPort()</description></item>
            	<item><description>If above returns array > 1, App calls EFEM: SetActiveCarrierTypeOnHandoffPort()</description></item>
            	<item><description>App calls EFEM: GetMatchingSubstrateTypesOnHandoffPort()</description></item>
            	<item><description>If above returns array > 1, App calls EFEM: SetActiveSubstrateTypeOnHandoffPort()</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetMatchingCarrierTypesOnHandoffPort(System.String)">
            <summary>
            Returns the carrier types that match the signature for current carrier on a load port
            </summary>
            <param name="handoffPort">Carrier handoff port such as "PortA", . . . "PortD".</param>
            <returns>Array of matches. Size 0 if no match or no carrier on load port.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetActiveCarrierTypeOnHandoffPort(System.String)">
            <summary>
            Returns the active carrier type for current carrier on load port.
            And active carrier type is either the only carrier type that matches the signature of current carrier on load port,
            or the one selected by app when there are multiple matches.
            </summary>
            <param name="handoffPort">Carrier handoff port such as "PortA", . . . "PortD".</param>
            <return>Carrier type if unique carrier is a unique match, or an active type has been selected.
            Empty string if no carrier, or no active carrier type selected.
            </return>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.SetActiveCarrierTypeOnHandoffPort(System.String,System.String)">
            <summary>
            Sets the active carrier type for current carrier on load port.
            For definition of active carrier type, see GetActiveCarrierTypeOnHandoffPort()
            </summary>
            <param name="handoffPort">Carrier handoff port such as "PortA", . . . "PortD".</param>
            <param name="carrierType">Carrier type app selected from the array returned by GetMatchingCarrierTypesOnHandoffPort()</param>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetMatchingSubstrateTypesOnHandoffPort(System.String)">
            <summary>
            Returns the substrate types that the carrier type(s) can carry for current carrier on load port.
            If the carrier type is uniquely matches or if an active carrier type is selected,
            the substrate types this carrier can carrier are returned.
            Otherwise, substrate types for all matching carrier are returned.
            </summary>
            <param name="handoffPort">Carrier handoff port such as "PortA", . . . "PortD".</param>
            <returns>Array of substrate types current carrier(s) can carry.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetActiveSubstrateTypeOnHandoffPort(System.String)">
            <summary>
            Returns the active substrate type in active carrier type on load port.
            </summary>
            <param name="handoffPort">Carrier handoff port such as "PortA", . . . "PortD".</param>
            <returns>Empty string if neither active carrier type nor active substrate type is determined.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.SetActiveSubstrateTypeOnHandoffPort(System.String,System.String)">
            <summary>
            Sets the active substrate type for active carrier on load port.
            </summary>
            <param name="handoffPort">Carrier handoff port such as "PortA", . . . "PortD".</param>
            <param name="substrateType">Substrate type app selected from the array returned by GetMatchingSubstrateTypesOnHandoffPort()</param>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.ActiveCarrierTypeIsSetOnCarrierHandoffPort(System.String)">
            <summary>
            Determines if active carrier type is determined (unique match is found or app has selected one).
            </summary>
            <param name="handoffPort">Carrier handoff port such as "PortA", . . . "PortD".</param>
            <returns>True if active carrier type is determined.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.ActiveSubstrateTypeIsSetOnCarrierHandoffPort(System.String)">
            <summary>
            Determines if active substrate type is determined (unique match is found or app has selected one).
            </summary>
            <param name="handoffPort">Carrier handoff port such as "PortA", . . . "PortD".</param>
            <returns>True if active substrate type is determined.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.ActiveMaterialTypesAreSetOnCarrierHandoffPort(System.String)">
            <summary>
            Determines if active material types (both carrier and substrate types) have been determined.
            </summary>
            <param name="handoffPort">Carrier handoff port such as "PortA", . . . "PortD".</param>
            <returns>True only if both carrier and substrate types are determined.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.ReloadFabSpec">
            <summary>
            After editing the Materials.Spec.xml or Mappers.Spec.xml, this call allows to reload it back into the system.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetSubstratesInCarriers">
            <summary>
            Returns the production materials defined in the Materials.Spec.xml
            </summary>
            <returns>Array of SubstratesInCarrier which contains carrier type and substrate types</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetCarrierTypeInfo(System.String)">
            <summary>
            Returns the carrier's properties such as its signatures, pod properties, and cassette properties, etc. defined in the Materials.Spec.xml
            </summary>
            <param name="carrierName">The carrier name defined in the Materials.Spec.xml</param>
            <returns>CarrierTypeInfo</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetSubstrateTypeInfo(System.String)">
            <summary>
            Returns the substrate properties such as its thickness, shape, flex, etc. defined in the Materials.Spec.xml
            </summary>
            <param name="substrateName">The substrate name defined in the Materials.Spec.xml</param>
            <returns>SubstrateTypeInfo</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.SetSubstrateTypeOnStationSlot(System.String,System.String)">
            <summary>
            Set a substrate type on a tool station location. This substrate type will be applied to the substrate on the next GetSubstrate
            from that location. A valid substrate type must be set before each GetSubstrate is called on the station location.
            </summary>
            <param name="substrateName">The substrate name defined in the production materials in Materials.Spec.xml</param>
            <param name="locationName">Location where the substrate type will be set for the next GetSubstrate, such as "EFEM.PortU.Slot1"</param>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.SetDestinationCarrierTypeOnStationSlot(System.String,System.String)">
            <summary>
            Set a carrier type on a tool station location. If the production carrier has only a single substrate defined, this substrate type will be
            applied to the substrate on the next GetSubstrate from that location. If there is more than one substrate type defined, SetSubstrateTypeOnStationSlot
            must be used to specify the substrate instead. A valid substrate type must be set before each GetSubstrate is called on the station location.
            </summary>
            <param name="carrierName">The carrier name defined in the production materials in Materials.Spec.xml</param>
            <param name="locationName">Location where the substrate type will be set for the next GetSubstrate, such as "EFEM.PortU.Slot1"</param>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetSubstrateTypeOnStationSlot(System.String)">
            <summary>
            Get the substrate type on a tool station location.This substrate type will be applied to the substrate on the next GetSubstrate
            from that location.
            </summary>
            <param name="locationName">Location where the substrate type will be set for the next GetSubstrate, such as "EFEM.PortU.Slot1"</param>
            <returns>The substrate name defined in the production materials in Materials.Spec.xml</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetAllProductionSubstrateTypes">
            <summary>
            Get all the substrate types on the production list. 
            </summary>
            <returns>All the substrate types defined in the production materials in Materials.Spec.xml</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetNumberOfSubstratesInStations(System.String)">
            <summary>
            Get the number of substrates in the tool stations given a substrate type. The substrate type must be defined in the Material Spec file. Targets all tool stations.
            </summary>
            <param name="substrateType">Substrate type to get number of in tool station such as "Wafer.300mm.Standard"</param>
            <returns>The quantity of substrates in the tool stations of given substrate type</returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.GetNumberOfSubstratesInStations">
            <summary>
            Get the all the substrate types and their quantities across all tool stations.
            </summary>
            <returns>
            The quantity of substrates of all substrate types in the tool stations as a dictionary.
            The key is the substrate type name and the value is the number of substrates of that type.
            </returns>
        </member>
        <member name="M:BAI.Systems.Common.Materials.IMaterialTypeIdOp.SetNumberOfSubstratesInStations(System.String,System.Int32)">
            <summary>
            Set the number of substrates in the tool stations given a substrate type and quantity. The substrate type must be defined in the Material Spec file. Targets all tool stations. This method overrides normal functionality.
            </summary>
            <param name="substrateType">Substrate type to be set such as "Wafer.300mm.Standard"</param>
            <param name="substrateQuantity">Quantity of substrates in tool station</param>
        </member>
        <member name="T:BAI.Systems.Common.Materials.SubstrateTypeInfo">
            <summary>
            Data type for susbstrate definition - expose to app in a subsequent release
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.IAwcRobotOpSetup">
            <summary>
            Interface for enabling and disabling Active Wafer Centering on a Wafer Engine 300xp robot.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.IOfaWaferEngineOp">
            <summary>
            Interface for On the Fly Aligner operations for a Wafer Engine 300xp robot.
            All methods start and end with a wafer on an end effector. 
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IOfaWaferEngineOp.OfaAlignWafer(System.String,System.Double)">
            <summary>
            Starting with a wafer on an end effector, pick it up with the OFA and then align it to the specified angle.
            Fires an IncomingWaferAnglePosted event with the notch angle before alignment.
            </summary>
            <param name="ee">End effector with wafer to be aligned.</param>
            <param name="postAngleDegree">Angle in degrees to align the wafer notch to.</param>
        </member>
        <member name="M:BAI.Systems.Common.IOfaWaferEngineOp.OfaAlignWafer(BAI.Systems.Common.WaferAlignFeature,System.String,System.Double,BAI.Systems.Common.AlignerSensorType)">
            <summary>
            Starting with a wafer on an end effector, pick it up with the OFA and then align it to the specified angle.
            Fires an IncomingWaferAnglePosted event with the notch angle before alignment.
            </summary>
            <param name="feature">Feature to use for alignment.</param>
            <param name="ee">End effector with wafer to be aligned.</param>
            <param name="postAngleDegree">Angle in degrees to align the wafer notch to.</param>
            <param name="alignerType">Which sensor to use to align the wafer.</param>
        </member>
        <member name="M:BAI.Systems.Common.IOfaWaferEngineOp.OfaRadialAlign(System.String)">
            <summary>
            Align a wafer on the OFA chuck and then realign it so that the wafer's center is aligned with the end effector's center line.
            Starts and ends with a wafer on the OFA chuck. This does not get or put the wafer.
            </summary>
            <param name="ee">End effector to center the wafer over. The wafer will not be put.</param>
        </member>
        <member name="M:BAI.Systems.Common.IOfaWaferEngineOp.OfaRadialAlign(BAI.Systems.Common.WaferAlignFeature,System.String,BAI.Systems.Common.AlignerSensorType)">
            <summary>
            Align a wafer on the OFA chuck and then realign it so that the wafer's center is aligned with the end effector's center line.
            Starts and ends with a wafer on the OFA chuck. This does not get or put the wafer.
            </summary>
            <param name="feature">Feature to use for alignment.</param>
            <param name="ee">End effector to center the wafer over. The wafer will not be put.</param>
            <param name="alignerType">Which sensor to use to align the wafer.</param>
        </member>
        <member name="M:BAI.Systems.Common.IOfaWaferEngineOp.OfaAlignWaferAndReadId(System.String,System.String,System.Collections.Generic.KeyValuePair{BAI.General.NumberWithUnit,System.Collections.Generic.List{System.String}}[])">
            <summary>
            Starting with a wafer on an end effector, pick it up with the OFA, read the wafer ID, and then realign it back to the original notch angle.
            Fires an IncomingWaferAnglePosted event with the notch angle before ID reads.
            Fires a WaferIdReadFailure event for each wafer ID read that fails.
            </summary>
            <param name="ee">End effector with wafer to be aligned.</param>
            <param name="readerDevice">Which OCR device, wafer top or bottom reader</param>
            <param name="angleRecipes">Array of angle and recipes for that angle.</param>
            <returns>Array of wafer ID data for all angles and recipes that reading was attempted. Last one may be successful or failure.</returns>
        </member>
        <member name="M:BAI.Systems.Common.IOfaWaferEngineOp.OfaAlignWaferAndReadId(BAI.Systems.Common.WaferAlignFeature,System.String,System.String,System.Collections.Generic.KeyValuePair{BAI.General.NumberWithUnit,System.Collections.Generic.List{System.String}}[],BAI.Systems.Common.AlignerSensorType)">
            <summary>
            Starting with a wafer on an end effector, pick it up with the OFA, read the wafer ID, and then realign it back to the original notch angle.
            Fires an IncomingWaferAnglePosted event with the notch angle before ID reads.
            Fires a WaferIdReadFailure event for each wafer ID read that fails.
            </summary>
            <param name="feature">Feature to use for alignment.</param>
            <param name="ee">End effector with wafer to be aligned.</param>
            <param name="readerDevice">Which OCR device, wafer top or bottom reader</param>
            <param name="angleRecipes">Array of angle and recipes for that angle.</param>
            <param name="alignerType">Which sensor to use to align the wafer.</param>
            <returns>Array of wafer ID data for all angles and recipes that reading was attempted. Last one may be successful or failure.</returns>
        </member>
        <member name="M:BAI.Systems.Common.IOfaWaferEngineOp.OfaAlignWaferAndReadId(System.String,System.String,System.Collections.Generic.KeyValuePair{BAI.General.NumberWithUnit,System.Collections.Generic.List{System.String}}[],BAI.General.NumberWithUnit)">
            <summary>
            OFA picks wafer on end-effecter, reads ID and places it back on end-effector with specified post-align angle.
            After picking, OFA aligns wafer, rotates to first angle, then reads wafer ID with OCR recipes specified for the angle. 
            Reading stops at first success. Otherwise, OFA moves wafer to next angle to continue reading.
            If reading failed at all angles, OFA performs an offset correction, and run the above reading process again.
            At the first wafer alignment, OFA fires an event IncomingWaferAnglePosted with the notch angle before ID reads.
            For each reading attempt, OFA Fires an event WaferIdReadPerformed.
            </summary>
            <param name="ee">End effector with wafer to be aligned.</param>
            <param name="readerDevice">Which OCR device, wafer top or bottom reader</param>
            <param name="angleRecipes">Array of angle and recipes for that angle.</param>
            <param name="postAngle">Post-align angle - the angle that the wafer is aligned to at the end of the method call.</param>
            <returns>Array of wafer ID data for all angles and recipes that reading was attempted. Last one may be successful or failure.</returns>
        </member>
        <member name="M:BAI.Systems.Common.IOfaWaferEngineOp.OfaAlignWaferAndReadId(BAI.Systems.Common.WaferAlignFeature,System.String,System.String,System.Collections.Generic.KeyValuePair{BAI.General.NumberWithUnit,System.Collections.Generic.List{System.String}}[],BAI.General.NumberWithUnit,BAI.Systems.Common.AlignerSensorType)">
            <summary>
            OFA picks wafer on end-effecter, reads ID and places it back on end-effector with specified post-align angle.
            After picking, OFA aligns wafer, rotates to first angle, then reads wafer ID with OCR recipes specified for the angle. 
            Reading stops at first success. Otherwise, OFA moves wafer to next angle to continue reading.
            If reading failed at all angles, OFA performs an offset correction, and run the above reading process again.
            At the first wafer alignment, OFA fires an event IncomingWaferAnglePosted with the notch angle before ID reads.
            For each reading attempt, OFA Fires an event WaferIdReadPerformed.
            </summary>
            <param name="feature">Feature to use for alignment.</param>
            <param name="ee">End effector with wafer to be aligned.</param>
            <param name="readerDevice">Which OCR device, wafer top or bottom reader</param>
            <param name="angleRecipes">Array of angle and recipes for that angle.</param>
            <param name="postAngle">Post-align angle - the angle that the wafer is aligned to at the end of the method call.</param>
            <param name="alignerType">Which sensor to use to align the wafer.</param>
            <returns>Array of wafer ID data for all angles and recipes that reading was attempted. Last one may be successful or failure.</returns>
        </member>
        <member name="T:BAI.Systems.Common.OfaOperationResult`1">
            <summary>
            This class is for internal use only.
            It is not used as part of any public API.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.Controls.ISubstrateEndEffecterCtrl.MoveEeToLocation(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Move the robot along a previously defined path to the destination described
            by the parameters.
            </summary>
            <remarks>
            The <paramref name="rPosition"/> can be one of the following values:
            <list type="bullet">
                <item>
                    <term>Retracted</term>
                </item>
                <item>
                    <term>Pre</term>
                </item>
                <item>
                   <term>Post</term>
                </item>
                <item>
                    <term>Transfer</term>
                </item>
            </list>
            The <paramref name="zPosition"/> can be one of the following values:
            <list type="bullet">
                <item>
                    <term>Below</term>
                </item>
                <item>
                    <term>Above</term>
                </item>
                <item>
                   <term>Transfer</term>
                </item>
            </list>
            </remarks>
            <param name="ee">Which end effector to move.</param>
            <param name="location">The destination location.</param>
            <param name="rPosition">The radial (robot arm) position at the end of the move.</param>
            <param name="zPosition">The Z axis position at the end of the move.</param>
            <param name="carrierType"></param>
            <param name="substrateType"></param>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.Controls.ISubstrateRestraintCtrl">
            <summary>
            Interface representing active mechanism to secure substrate on a substrate host
            such as edge grip, vacuum suction or e-chuck
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.Controls.ISubstrateRestraintCtrl.GetSubstrateRestraintState(System.String)">
            <summary>
            Get the restraint state of the specified substrate host.
            </summary>
            /// <param name="substrateHost">Name of substrate host such as "EE1"</param>
            <returns>
            The LockState, which could be Locked, Unlocked, Unknown, or Error.
            </returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.Controls.ISubstrateRestraintCtrl.ApplySubstrateRestraint(System.String)">
            <summary>
            Applies restraint on the specified substrate host.
            </summary>
            /// <param name="substrateHost">Name of substrate host such as "EE1"</param>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.Controls.ISubstrateRestraintCtrl.ReleaseSubstrateRestraint(System.String)">
            <summary>
            Releases restraint on the specified substrate host.
            </summary>
            /// <param name="substrateHost">Name of substrate host such as "EE1"</param>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.Controls.SubstrateStatusUpdateHandler">
            <param name="module">Which module moved a substrate, for example "EFEM".</param>
            <param name="substrateHost">The name of the substrate presence host, for example "EFEM.WaferEngine.EE1".</param>
            <param name="waferPresence">The new state of the substrate host.</param>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.Controls.ISubstrateStatusEvents">
            <summary>
            Events relating to changes in presence and absence of substrates at hosts.
            </summary>
        </member>
        <member name="E:BAI.Systems.Common.Substrates.Controls.ISubstrateStatusEvents.SubstratePresenceChanged">
            <summary>
            Raised when the presence state of a substrate host changes.
            For example, when a substrate is transfer or a substrate host is mapped.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.SubstrateSize">
            <summary>
            The diameter of a substrate in millimeters.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.SubstrateHostOrientation">
            <summary>
            Represents the state of a substrate host that is flippable.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstrateHostOrientation.Unknown">
            <summary>
            The state of the substrate host is not known.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstrateHostOrientation.FaceUp">
            <summary>
            The substrate host is facing upwards.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstrateHostOrientation.FaceDown">
            <summary>
            The substrate host is facing downwards.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.ISubstrateHostFlipOp">
            <summary>
            Operations on substrate hosts that can flip their substrates upside down.
            </summary>
            <remarks>
            These methods are usable with both end effecter mounted flippers and
            standalone flipper devices.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateHostFlipOp.FlipHost(System.String,BAI.Systems.Common.Substrates.SubstrateHostOrientation)">
            <summary>
            Move the substrate host to the <paramref name="desiredOrientation"/>.
            </summary>
            <param name="host">The name of the flipping host, such as "EE1" or "WaferFlipper.Chuck".</param>
            <param name="desiredOrientation">The orientation to change the host to.</param>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateHostFlipOp.GetHostOrientation(System.String)">
            <summary>
            Queries the current orientation of the substrate host.
            </summary>
            <param name="host">The name of the flipping host, such as "EE1" or "WaferFlipper.Chuck".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateIdOp.ReadSubstrateId(System.String)">
            <summary>
            Read substrate ID if there's multiple wafer ID readers (front and back sides for example).
            </summary>
            <param name="readerDevice">Specify which wafer ID reader</param>
            <returns>Substrate ID read back</returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateIdOpSetup.GetSubstrateIdConfigParamNames(System.String)">
            <summary>
            Get Bcr high level configurations
            </summary>
            <param name="readerDevice">Specify which wafer ID reader</param>
            <returns>Substrate ID read back</returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateIdOpSetup.GetSubstrateIdConfigParam(System.String,System.String)">
            <summary>
            Get BCR high level configuration parameter
                    Parameter Name               Expected Value
                    ===============================================================
                    "TRIGGER.DELAY-TYPE",        0= Disabled. 1=Enable
                    "TRIGGER.DELAY-TIME",        integer, unit is milliseconds
                    "DECODER.TIMEOUT"            integer, unit is milliseconds
            </summary>
            <param name="readerDevice">Specify which wafer ID reader</param>
            <param name="param">Reader parameter name </param>
            <returns>Value of configuration parameter</returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateIdOpSetup.SetSubstrateIdConfigParam(System.String,System.String,System.String)">
            <summary>
            Set BCR high level configuration parameter. Currently the supported parameters are
                    Parameter Name               Expected Value
                    ===============================================================
                    "TRIGGER.DELAY-TYPE",        0= Disabled. 1=Enable
                    "TRIGGER.DELAY-TIME",        integer, unit is milliseconds
                    "DECODER.TIMEOUT"            integer, unit is milliseconds
            </summary>
            <param name="readerDevice">Specify which wafer ID reader</param>
            <param name="param">Reader parameter name </param>
            <param name="value">value assign to the param  </param>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.SubstratePresenceState">
            <summary>
            Represents the absence or presence or a substrate.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstratePresenceState.Error">
            <summary>
            Any inconsistency among hardware sensors and software persistent data.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstratePresenceState.Unknown">
            <summary>
            Presence is unknown, either because the presence has not been mapped or it was invalidated.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstratePresenceState.Unavailable">
            <summary>
            Carrier door closed, for example
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstratePresenceState.Absent">
            <summary>
            There is no substrate at this location. Putting a substrate at this location will be allowed.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstratePresenceState.Present">
            <summary>
            There is a substrate. Getting a substrate at this location will be allowed.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstratePresenceState.Double">
            <summary>
            There are two substrates stacked on top of each other.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstratePresenceState.Cross">
            <summary>
            One substrate spans two slots in a carrier.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.SubstratePresenceState.WrongSize">
            <summary>
            Smaller than lower thickness bound.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.ISubstrateHostsManager">
            <summary>
            Tracks the presence of substrates.
            </summary>
            <remarks>
            <para>
                A "substrate host" is a location whose presence is tracked.
                Modules implementing this interface cache the presence state of all substrate hosts.
            </para>
            <para>
                Transfer operations will confirm presence is in the correct state before starting.
                Transfer operations will updated the presence after they complete or fail.
            </para>
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateHostsManager.InitSubstratePresence">
            <summary>
            Initialize - read from a file in CTC/Persist/ folder, and detect with sensors
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Substrates.ISubstrateHostsManager.SubstrateHostNames">
            <summary>
            The names of the substrate hosts.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateHostsManager.GetSubstratePresenceOnHost(System.String)">
            <summary>
            Returns the cached substrate presence state.
            </summary>
            <param name="host">The name of the substrate host to query.</param>
            <returns>The cached presence state.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateHostsManager.SetSubstratePresenceOnHost(System.String,BAI.Systems.Common.Substrates.SubstratePresenceState)">
            <summary>
            Updates the cached presence state.
            </summary>
            <param name="host">The name of the substrate host.</param>
            <param name="state">The new state to set for the host.</param>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateHostsManager.GetSubstrateHostNames(System.String)">
            <summary>
            Get Substrate hosts that matches search string.
            </summary>
            <param name="searchString">Keyword for search - any word in Substrate hosts.
            If null, all hosts within the module are returned.
            </param>
            <returns>Array of hosts that matches search keyword.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateHostsManager.GetSubstratePresence(System.String)">
            <summary>
            Find Substrate hosts that matches search keyword and return Substrate presence information.
            </summary>
            <param name="hostSearchString">Keyword for host search - any word in Substrate hosts.
            If null, all hosts within the module are returned.
            </param>
            <returns>Arrary of hosts with Substrate presence that matches search keyword.</returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateHostsManager.LoadSubstratePresenceMap">
            <summary>
            Loads the substrate presences by reading from the persist file and updating the cached substrates in memory.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.ISubstrateMapOp">
            <summary>
            Interface for modules with Substrate presence mapper hardware.
            </summary>
            <remarks>
            This interface is designed to be used in three situations:
            <list type="bullet">
                <item>
                    <description>Initialization time after axes have been homed.</description>
                </item>
                <item>
                    <description>Recovery from errors.</description>
                </item>
                <item>
                    <description>Service</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateMapOp.MapSubstratePresenceOnHost(System.String)">
            <summary>
            Use hardware sensors to detect substrate presence on a given host.
            </summary>
            <param name="host">String specific enough to uniquely identify a host.</param>
            <returns>Presence or absence from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateMapOp.MapSubstratePresence(System.String)">
            <summary>
            Use hardware sensors to detect substrate presence on a group of hosts.
            </summary>
            <param name="hostSearchString">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateMapOp.DetectSubstrateSize(System.String)">
            <summary>
            Use hardware sensors to detect substrate size on a given host.
            </summary>
            <param name="host">String specific enough to uniquely identify a host.</param>
            <returns>Substrate size from hardware detection</returns>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp">
            <summary>
            Advanced substrate transfer interface.
            </summary>
            <remarks>
            Please see the documentation website for this class for more information about parameters.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyGetSubstrate(System.String,System.String)">
            <summary>
            Moves the robot to be ready to get a substrate from <paramref name="location" />.
            </summary>
            <remarks>
            Call this method before calling <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.GetSubstrate(System.String,System.String)" /> for increased efficiency.
            <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyGetSubstrate(System.String,System.String)" /> supports concurrent execution with more calls than <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.GetSubstrate(System.String,System.String)" /> does.
            </remarks>
            <param name="ee">end effecter to use to pick substrate</param>
            <param name="location">location where the substrate is to be picked up</param>
            <example>
            Moves the robot to be ready to get a substrate using EE1 at PortA.Slot1:
            <code language="cs">
            ISubstrateTransferAdOp o;
            o.MoveToReadyGetSubstrate("EE1", "PortA.Slot1");
            </code>
            </example>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyPutSubstrate(System.String,System.String)">
            <summary>
            Moves the robot to be ready to put a substrate to <paramref name="location" />.
            </summary>
            <remarks>
            Call this method before calling <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.PutSubstrate(System.String,System.String)" /> for increased efficiency.
            <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyPutSubstrate(System.String,System.String)" /> supports concurrent execution with more calls than <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.PutSubstrate(System.String,System.String)" /> does.
            </remarks>
            <param name="ee">end effecter to use to place substrate</param>
            <param name="location">location where the substrate is to be placed</param>
            <example>
            Moves the robot to be ready to put a substrate using EE1 at PortA.Slot1:
            <code language="cs">
            ISubstrateTransferAdOp o;
            o.MoveToReadyPutSubstrate("EE1", "PortA.Slot1");
            </code>
            </example>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)">
            <summary>
            Robot moves to get a substrate with specified end effecter from location specified.
            </summary>
            <remarks>
            Motion consists of three steps (there may be blending - overlaps):
            <list type="number">
                <item>
                    <description>Extend end effecter to specified location (from current height below substrate).</description>
                </item>
                <item>
                    <description>Move up (from below substrate to above substrate) to pick the substrate.</description>
                </item>
                <item>
                    <description>Retract end effecter to home position (from current height above substrate).</description>
                </item>
            </list>
            <para>
                Call <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)" /> method before calling this method for efficiency.
                If the robot is not in position, this method will call <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)" /> first.
            </para>
            </remarks>
            <param name="endEffecter">end effecter to use to pick substrate</param>
            <param name="fromLocation">location where the substrate is to be picked up</param>
            <param name="options">Options to modify the substrate transfer.</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)">
            <summary>
            Moves the robot to put a substrate with specified end effecter to location specified.
            </summary>
            <remarks>
            Motion consists of three steps (there may be blending - overlaps)
            <list type="number">
                <item>
                    <description>Extend end effecter to specified location (from current height above substrate).</description>
                </item>
                <item>
                    <description>Move down (from above substrate to below substrate) to put the substrate.</description>
                </item>
                <item>
                    <description>Retract end effecter to home position (from current height below substrate).</description>
                </item>
            </list>
            <para>
                Call <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)" /> before calling this method for efficiency.
                If the robot is not in position, this method will call <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)" /> first.
            </para>
            </remarks>
            <param name="endEffecter">end effecter to use to place substrate</param>
            <param name="toLocation">location where the substrate is to be placed</param>
            <param name="options">Options to modify the substrate transfer.</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <summary>
            Moves the robot to be ready to get a substrate from <paramref name="fromLocation" />.
            </summary>
            <remarks>
            Call this method before calling <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)" /> for increased efficiency.
            <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)" /> supports concurrent execution with more calls than <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)" /> does.
            </remarks>
            <param name="endEffecter">end effecter to use to pick substrate</param>
            <param name="fromLocation">location where the substrate is to be picked up</param>
            <param name="options">Options to modify the substrate transfer.</param>
            <example>
            Moves the robot to be ready to get a substrate using EE1 at PortA.Slot1:
            <code language="cs">
            ISubstrateTransferAdOp o;
            o.MoveToReadyGetSubstrate("EE1", "PortA.Slot1", new TransferOptions());
            </code>
            </example>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <summary>
            Moves the robot to be ready to put a substrate to <paramref name="toLocation" />.
            </summary>
            <remarks>
            Call this method before calling <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)" /> for increased efficiency.
            <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)" /> supports concurrent execution with more calls than <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)" /> does.
            </remarks>
            <param name="endEffecter">end effecter to use to place substrate</param>
            <param name="toLocation">location where the substrate is to be picked up</param>
            <param name="options">Options to modify the substrate transfer.</param>
            <example>
            Moves the robot to be ready to put a substrate using EE1 at PortA.Slot1:
            <code language="cs">
            ISubstrateTransferAdOp o;
            o.MoveToReadyPutSubstrate("EE1", "PortA.Slot1");
            </code>
            </example>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.GetStopLocation">
            <summary>
            At what point during the <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)"/>
            should the robot stop.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.GetStopLocation.ReadyGet">
            <summary>
            Stop before extending the end effector.
            </summary>
            <remarks>
            Equivalent to <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)"/>.
            </remarks>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.GetStopLocation.PreGet">
            <summary>
            Partially extend the end effector toward the station.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.GetStopLocation.BelowGet">
            <summary>
            Stop after extending the end effector, below the substrate.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.GetStopLocation.Transfer">
            <summary>
            Stop at the substrate plane.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.GetStopLocation.Get">
            <summary>
            Stop at the substrate plane.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.GetStopLocation.AboveGet">
            <summary>
            Stop after move Z axis up, before retracting the end effector.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.GetStopLocation.Above">
            <summary>
            Same as <see cref="F:BAI.Systems.Common.Substrates.GetStopLocation.AboveGet"/>.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.GetStopLocation.EndGet">
            <summary>
            Stop at the very end of a transfer (i.e. complete the transfer).
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.PutStopLocation">
            <summary>
            At what point during the <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)"/>
            should the robot stop.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.PutStopLocation.ReadyPut">
            <summary>
            Stop before extending the end effector.
            </summary>
            <remarks>
            Equivalent to <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)"/>.
            </remarks>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.PutStopLocation.PrePut">
            <summary>
            Partially extend the end effector toward the station.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.PutStopLocation.AbovePut">
            <summary>
            Stop after extending the end effector, above the substrate.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.PutStopLocation.Transfer">
            <summary>
            Stop at the substrate plane.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.PutStopLocation.Put">
            <summary>
            Stop at the substrate plane.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.PutStopLocation.BelowPut">
            <summary>
            Stop after moving Z down, below the substrate.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.PutStopLocation.Below">
            <summary>
            Same as <see cref="F:BAI.Systems.Common.Substrates.PutStopLocation.BelowPut"/>.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.Substrates.PutStopLocation.EndPut">
            <summary>
            Stop at the very end of a transfer (i.e. complete the transfer).
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Substrates.GetTransferOptions.StopLocation">
            <summary>
            Stops the transfer early.
            Defaults to <see cref="F:BAI.Systems.Common.Substrates.GetStopLocation.EndGet"/>, which does the complete transfer.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Substrates.PutTransferOptions.StopLocation">
            <summary>
            Stops the transfer early.
            Defaults to <see cref="F:BAI.Systems.Common.Substrates.PutStopLocation.EndPut"/>, which does the complete transfer.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Substrates.TransferOptions.RadialOffset">
            <summary>
            How much further to extend the end effector axis from the taught position.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Substrates.TransferOptions.ThetaOffset">
            <summary>
            How much further to move the theta axis from the taught position.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Substrates.TransferOptions.EeTineOffset">
            <summary>
            Positive numbers move the tines farther apart from each other.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Substrates.TransferOptions.TriggerEvWhenEEPassedClearance">
            <summary>
            Triggers an event when an end effector passes the station clearance point. Uses transfer id
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Substrates.TransferOptions.TransferId">
            <summary>
            User may set this id which will be used to associate asynchronous events with a transfer
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.ISubstrateTransferDualOp">
            <summary>
            Interface for throughput optimized transfers that involve two end-effectors (and substrates).
            </summary>
            <remarks>
            Only works for devices with dual end effecters.
            The transfer locations must be at the same station, usually same location or two adjacent locations.
            Not all methods may be implemented by a transfer device.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferDualOp.GetPutSubstrates(System.String,System.String,System.String,System.String)">
            <summary>
            A get and then put Substrates swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet">The the end effector to pick with first.</param>
            <param name="getLocation">The transfer location from which to pick.</param>
            <param name="eePut">The the end effecter use to place after picking.</param>
            <param name="putLocation">The transfer location at which the substrate on <paramref name="eePut"/> should be placed.</param>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferDualOp.PutGetSubstrates(System.String,System.String,System.String,System.String)">
            <summary>
            A put and then get Substrates swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut">The end effecter from which the substrate should be placed.</param>
            <param name="putLocation">The transfer location at which the substrate on <paramref name="eePut"/> while be put.</param>
            <param name="eeGet">The end effecter with which to subsequently pick the substrate.</param>
            <param name="getLocation">The transfer location from which <paramref name="eeGet"/> will pick the substrate.</param>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferDualOp.GetPutSubstrates(System.String,System.String,System.String,System.String,BAI.Systems.Common.Substrates.SwapTransferOptions)">
            <summary>
            A get and then put Substrates swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="options"></param>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferDualOp.PutGetSubstrates(System.String,System.String,System.String,System.String,BAI.Systems.Common.Substrates.SwapTransferOptions)">
            <summary>
            A put and then get Substrates swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="options"></param>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferDualOp.GetTwoSubstrates(System.String)">
            <summary>
            Simultaneously get 2 substrates with both end effecters from two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferDualOp.PutTwoSubstrates(System.String)">
            <summary>
            Simultaneously put 2 substrates with both end effecters to two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="T:BAI.Systems.Common.Substrates.ISubstrateTransferOp">
            <summary>
            Basic substrate transfer operation interface.
            </summary>
            <remarks>
            Substrate: a thin object such as wafer, reticle, film carrier, JEDEC trays.
            The parameter ee stands for end effector, such as EE1 and EE2 for lower and upper hands on a robot.
            The parameter location is a transfer location such as EFEM.PortA.Slot25.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.GetSubstrate(System.String,System.String)">
            <summary>
            Robot moves to get a substrate with specified end effecter from location specified.
            </summary>
            <remarks>
            Motion consists of three steps (there may be blending - overlaps):
            <list type="number">
                <item>
                    <description>Extend end effecter to specified location (from current height below substrate).</description>
                </item>
                <item>
                    <description>Move up (from below substrate to above substrate) to pick the substrate.</description>
                </item>
                <item>
                    <description>Retract end effecter to home position (from current height above substrate).</description>
                </item>
            </list>
            <para>
                Call <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyGetSubstrate(System.String,System.String)" /> method before calling
                <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.GetSubstrate(System.String,System.String)" /> for efficiency.
                If not, this method will call <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyGetSubstrate(System.String,System.String)" /> first.
            </para>
            </remarks>
            <param name="ee">end effecter to use to pick substrate</param>
            <param name="location">location where the substrate is to be picked up</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.PutSubstrate(System.String,System.String)">
            <summary>
            Moves the robot to put a substrate with specified end effecter to location specified.
            </summary>
            <remarks>
            Motion consists of three steps (there may be blending - overlaps)
            <list type="number">
                <item>
                    <description>Extend end effecter to specified location (from current height above substrate).</description>
                </item>
                <item>
                    <description>Move down (from above substrate to below substrate) to put the substrate.</description>
                </item>
                <item>
                    <description>Retract end effecter to home position (from current height below substrate).</description>
                </item>
            </list>
            <para>
                Call the <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyPutSubstrate(System.String,System.String)" />
                method before calling <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.PutSubstrate(System.String,System.String)" /> for efficiency.
                If not, this method will call <see cref="M:BAI.Systems.Common.Substrates.ISubstrateTransferAdOp.MoveToReadyPutSubstrate(System.String,System.String)" /> first.
            </para>
            </remarks>
            <param name="ee">end effecter to use to place substrate</param>
            <param name="location">location where the substrate is to be placed</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.GetSubstrate(System.String,System.String,System.Double,System.Double)">
            <summary>
            Pick a substrate with an offset correction vector - used for example in picking substrate from aligner.
            </summary>
            <param name="ee">end effecter to use to pick substrate</param>
            <param name="location">location where the substrate is to be picked up</param>
            <param name="dR_mm">The offset of the robot arm in millimeters.</param>
            <param name="dT_degree">The offset of the robot's theta axis in degrees.</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.Substrates.ISubstrateTransferOp.PutSubstrate(System.String,System.String,System.Double,System.Double)">
            <summary>
            Place a substrate with an offset correction vector - used for example in placing wafer to aligner.
            </summary>
            <param name="ee">end effecter to use to place substrate</param>
            <param name="location">location where the substrate is to be placed</param>
            <param name="dR_mm">The offset of the robot arm in millimeters.</param>
            <param name="dT_degree">The offset of the robot's theta axis in degrees.</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="T:BAI.Systems.Common.IWaferAlignOpSetup">
            <summary>
            Interface to setup operations for a wafer alignment device.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IWaferAlignOpSetup.TimeoutForAlignWafer">
            <summary>
            Maximum time to wait for align operation
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.IWaferAlignOpSetup.EnableMultipleNotchSearch">
            <summary>
            Enable or disalbe search algorithm for additional notches.
            If disabled, aligner finds the first notch only. The alignment runs through quickly.
            If enabled, aligner will find additional notches. It would throw MultipleNotchesFoundOnWaferException if found. 
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOpSetup.ResetWaferAlignOpParams">
            <summary>
            Reload setup parameters from EC controller persistent media (CF disk)
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.IWaferAlignOp">
            <summary>
            Interface to run wafer alignment operations using a wafer aligner device.
            A wafer aligner device is usually setup to work with multiple robotic end-effectors.
            The alignment is performed for a specific robotic end-effector.
            Most often, the same end-effector places and picks the wafer before/after alignment.
            In such case, the end-effector parameter can be omitted in the alignment method.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOp.AlignWafer(System.String,BAI.Systems.Common.WaferAlignFeature,System.Double)">
            <summary>
            Align wafer on specified wafer aligner with respect to default robot.
            After the fiducial marker is identified, the wafer is rotated the <paramref name="angleDegree"/>
            position.
            </summary>
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1"</param>
            <param name="feature">Which fiducial marker to search for.</param>
            <param name="angleDegree">The angle to mvoe the wafer to after aligning Relative to the fiducial marker.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOp.AlignWafer(System.String,BAI.Systems.Common.WaferSize,BAI.Systems.Common.WaferAlignFeature,System.Double)">
            <summary>
            Align wafer on specified wafer aligner with respect to default robot.
            After the fiducial marker is identified, the wafer is rotated the <paramref name="angleDegree"/>
            position.
            </summary>
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1"</param>
            <param name="size">The size of the wafer.</param>
            <param name="feature">Which fiducial marker to search for.</param>
            <param name="angleDegree">The angle to mvoe the wafer to after aligning Relative to the fiducial marker.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOp.AlignWafer(System.String,BAI.Systems.Common.WaferAlignFeature,System.Double,System.String)">
            <summary>
            Align wafer on specified wafer aligner with to specified robot (end effecter)
            </summary>
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1", "AL1.WaferAligner1"</param>
            <param name="feature"></param>
            <param name="angleDegree"></param>
            <param name="endEffecter">Robot end effecter name such as "EFEM.WaferEngine.EE1", "AT.WaferEngine.EE2"</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOp.AlignWafer(System.String,BAI.Systems.Common.WaferSize,BAI.Systems.Common.WaferAlignFeature,System.Double,System.String)">
            <summary>
            Aligns a wafer.
            </summary>
            <param name="aligner">The name of the aligner, such as "WaferAligner1".</param>
            <param name="size">The size of the wafer to be aligned.</param>
            <param name="feature">Which feature should be used when aligning the wafer.</param>
            <param name="angleDegree">An offset in degrees. The wafer will be moved to this position after aligning.</param>
            <param name="endEffecter">Which end effector will be used to pick the aligned wafer.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOp.AlignerMoveRelative(System.String,System.Double)">
            <summary>
            Move Aligner to a relative angle. 
            </summary>
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1", "AL1.WaferAligner1"</param>
            <param name="angleDegree">How many degrees to move the aligner chuck.</param>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOp.AlignerGetCurrentAngle(System.String)">
            <summary>
            Returns aligner's current angle.This angle is relative to the home position.
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1", "AL1.WaferAligner1"</param>
            </summary>
            <returns> current angle</returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOp.ReAlignWafer(System.String,System.String)">
            <summary>
      Quickly realigns a wafer to the given <paramref name="endEffector" />.  The wafer must already have been aligned.
    </summary><remarks>
      <para>
        Adjusts the wafer to face the given <paramref name="endEffector" /> and returns new pick offsets
        to be used with the <paramref name="endEffector" />.
      </para>
      <para>
        The wafer must not be moved between the last align and calling this method.
        The align must not be reset between the last align and calling this method.
        Otherwise the results returned may be incorrect.
      </para>
    </remarks><param name="aligner">Algner name such as "Aligner1"</param><param name="endEffector">End effector for result - likely to use to pick wafer</param><exception cref="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.NoWaferOnChuckToAlignException">
      There is no wafer on the aligner.
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.WaferNotAlignedException">
      Wafer on aligner is no aligned yet.
    </exception><returns>Alignment result for the desired end effecter to pick the wafer with.</returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOp.ReAlignWafer(System.String,System.String,System.Double)">
            <summary>
            Quickly re-align the wafer by relative move. The wafer must have been successfully aligned before.
            </summary>
            <param name="aligner">WaferAligner is only one installed. Otherwise, WaferAligner1 or WaferAligner2</param>
            <param name="endEffector">EE1 or EE2</param>
            <param name="angleDegree">The final angle the wafer will be oriented relative to the end effector</param>
            <returns>Alignment result with the re-aligned angle</returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignOp.RelativeReAlignWafer(System.String,System.String,System.Double)">
            <summary>
            Quickly re-align the wafer by relative move. The wafer must have been successfully aligned before.
            </summary>
            /// <param name="aligner">WaferAligner is only one installed. Otherwise, WaferAligner1 or WaferAligner2</param>
            <param name="endEffector">EE1 or EE2</param>
            <param name="angleDegree">The new angle the wafer will be oriented to relative to the current aligned angle</param>
            <returns>Alignment result with the re-aligned angle</returns>
        </member>
        <member name="T:BAI.Systems.Common.IWaferAlignBufferOp">
            <summary>
            For wafer aligners with buffering slots. The EG300X model for example has two buffer slots.
            Transfer wafer between wafer aligner chuck and wafer aligner buffers.
            Only applicable to wafer aligners with buffers such as the EG-300.
            
            A buffered wafer aligner has three wafer hosts
                EFEM.WaferAligner.Slot1 - Lower buffer slot, EFEM robot places wafer on   this slot for   alignment 
                EFEM.WaferAligner.Slot2 - Upper buffer slot, EFEM robot picks  wafer from this slot after alignment 
                EFEM.WaferAligner.Chuck - Picks wafer from Slot1, aligns it, places wafer to Slot2  after alignment 
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignBufferOp.GetWaferFromAlignmentBuffer(System.String,System.String)">
            <summary>
            Tranfer wafer on alignment buffer to aligner chuck
            </summary>
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1"</param>
            <param name="bufferHost">Source buffer - "EFEM.WaferAligner.Slot1" for example</param>
        </member>
        <member name="M:BAI.Systems.Common.IWaferAlignBufferOp.PutWaferToAlignmentBuffer(System.String,System.String)">
            <summary>
            Tranfer wafer from aligner chuck to alignment buffer
            </summary>
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1"</param>
            <param name="bufferHost">Destination buffer - "EFEM.WaferAligner.Slot2" for example</param>
        </member>
        <member name="M:BAI.Systems.Common.IWaferFlipOp.FlipWafer(System.String,System.Double)">
            <summary>
            Flip a wafer on the specified wafer flipper device to angle specified
            </summary>
            <param name="flipper"></param>
            <param name="angleDegree"></param>
        </member>
        <member name="T:BAI.Systems.Common.IWaferIdOp">
            <summary>
            Methods for reading wafer ids.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IWaferIdOp.ReadWaferId(System.String,System.String)">
            <summary>
            Read wafer ID if EFEM has multiple wafer ID readers (front and back sides for example).
            </summary>
            <param name="readerDevice">Specify which wafer ID reader</param>
            <param name="recipe">Wafer ID reader recipe name.</param>
            <returns>Wafer ID read back</returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferIdOp.SaveLastReadImage(System.String,System.String,BAI.Systems.Common.WaferIdImageType)">
            <summary>
            Saves the last read image to a location on the CTC computer.
            </summary>
            <param name="readerDevice">The name of the ID reader device.</param>
            <param name="path">Where to save the file.</param>
            <param name="imageType">What image format to save the file as.</param>
        </member>
        <member name="M:BAI.Systems.Common.IWaferIdOp.GetOcrConfigs(System.String)">
            <summary>
            Returns the names of OCR configs that are currently enabled on the device.
            </summary>
            <param name="readerDevice">The device name.</param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Common.IOptimizedTransferOp">
            <summary>
            Interface for throughput optimized wafer transfers.
            Only works for devices with dual end effecters.
            The transfer locations must be at the same station.
            Not all methods may be implemented by a transfer device.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IOptimizedTransferOp.GetPutWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
        </member>
        <member name="M:BAI.Systems.Common.IOptimizedTransferOp.PutGetWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
        </member>
        <member name="M:BAI.Systems.Common.IOptimizedTransferOp.GetTwoWafers(System.String)">
            <summary>
            Simultaneously get 2 wafers with both end effecters from two transfer locations 
            near each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Common.IOptimizedTransferOp.PutTwoWafers(System.String)">
            <summary>
            Simultaneously put 2 wafers with both end effecters to two transfer locations 
            near each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="T:BAI.Systems.Common.Wafers.WaferLocations">
            <summary>
            List of named wafer locations owned by either an active wafer host or a mobile host.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.Wafers.NamedLocation">
            <summary>
            Class to represent a named location for an active or a mobile wafer host to reach - the owner.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.Wafers.NamedLocation.ToString">
            <summary>
            Returns string representation of NamedLocation
            </summary>
            <returns>Strig in format of NamedLocation(owner, location)</returns>
        </member>
        <member name="T:BAI.Systems.Common.Wafers.Wafer">
            <summary>
                Wafer class represents the data structure for a single wafer in the system.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.Wafers.Wafer.WaferId">
            <summary>
                Wafer ID is either obtained from wafer ID reader device or set by user
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.WaferAlignFeature">
            <summary>
            Which fiducial marker on the wafer to align to.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferAlignFeature.Notch">
            <summary>
            A small notch in the wafer.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferAlignFeature.Flat">
            <summary>
            A flat edge of the wafer.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferAlignFeature.None">
            <summary>
            The wafer has no features.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.AlignerSensorType.Default">
            <summary>
            This is line sensor if it is installed, camera if there is no line sensor
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.WaferAlignmentResult">
            <summary>
            Wafer alignment result on wafer center location after alignment
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.WaferAlignmentResult.Diameter">
            <summary>
            Wafer diameter.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.WaferAlignmentResult.ThetaOffset">
            <summary>
            Wafer center theta offset in robot coordinates
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.WaferAlignmentResult.RadialOffset">
            <summary>
            Wafer center radial offset in robot coordinates.
            </summary>
        </member>
        <member name="P:BAI.Systems.Common.WaferAlignmentResult.DistanceToRobotCenter">
            <summary>
            Nominal distance from robot origin - rotation center (not EE 0 position).
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.HighLowState">
            <summary>
            Represents the state of a digital input.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.HighLowState.Unknown">
            <summary>
            The input has not been read.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.HighLowState.Low">
            <summary>
            The input level is low.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.HighLowState.High">
            <summary>
            The input level is high.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.GateState">
            <summary>
            Represents the status of gate, for example a loadport door or slot valve.
            Using the robot to access a location beyond the gate is only allowed
            when the gate is <see cref="F:BAI.Systems.Common.GateState.Open"/>.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.GateState.Error">
            <summary>
            Hardware IO signals open and closed are in conflict.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.GateState.Unknown">
            <summary>
            The state of gate is not known.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.GateState.Open">
            <summary>
            The gate is open and the device behind the gate can be accessed.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.GateState.Closed">
            <summary>
            The gate is closed.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.LockState">
            <summary>
            Indicates the state of a device that locks in place, such as an end effecter or loadport APHD.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.LockState.Error">
            <summary>
            Hardware IO signals open and closed are in conflict.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.LockState.Unknown">
            <summary>
            The state of the gripper is unknown.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.LockState.Unlocked">
            <summary>
            The device is unlocked and the gripped object can be removed.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.LockState.Locked">
            <summary>
            The device is locked and the gripped object cannot be removed.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.UiIndicatorState">
            <summary>
            User interface indicator such as light tower, alarm buzzer, or LED.
            </summary>
            <devdoc>
            This enum maps directly to byte 2 of the DIO_SET_LINE DSP command.
            Only Falcon's DSP implements Strobe.
            </devdoc>
        </member>
        <member name="F:BAI.Systems.Common.UiIndicatorState.Off">
            <summary>
            The indicator is off.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.UiIndicatorState.On">
            <summary>
            The indicator is on.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.UiIndicatorState.Pulsating">
            <summary>
            The indicator is pulsating on and off. The indicator is on and off for equal amounts of time.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.UiIndicatorState.Strobe">
            <summary>
            Not supported. The indicator is strobing on and off. The time spent on and off are different.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.PresenceState">
            <summary>
            The presence of object such as a carrier.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.PresenceState.Error">
            <summary>
            Inconsistency among hardware sensors and software persistent data.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.PresenceState.Unknown">
            <summary>
            The state of the object is not known.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.PresenceState.Absent">
            <summary>
            There is no carrier.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.PresenceState.Present">
            <summary>
            The is carrier with a cassette.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.PresenceState.PodOnly">
            <summary>
            There is a pod, but it does not have a cassette within it.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.PlacementState">
            <summary>
            Indicates whether the a carrier placed on a device.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.PlacementState.Misplaced">
            <summary>
            The carrier is misplaced, i.e. only pressing some sensors.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.PlacementState.Unknown">
            <summary>
            The presence is not known, i.e. the sensors are still being debounced.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.PlacementState.NotPlaced">
            <summary>
            There is no carrier.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.PlacementState.Placed">
            <summary>
            There is a carrier.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.WaferPresenceState">
            <summary>
            Represents the absence or presence or a wafer.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferPresenceState.Error">
            <summary>
            Any inconsistency among hardware sensors and software persistent data.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferPresenceState.Unknown">
            <summary>
            Presence is unknown, either because the presence has not been mapped or it was invalidated.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferPresenceState.Unavailable">
            <summary>
            Carrier door closed, for example
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferPresenceState.Absent">
            <summary>
            There is no substrate at this location. Putting a substrate at this location will be allowed.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferPresenceState.Present">
            <summary>
            There is a substrate. Getting a substrate at this location will be allowed.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferPresenceState.Double">
            <summary>
            There are two substrates stacked on top of each other.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferPresenceState.Cross">
            <summary>
            One substrate spans two slots in a carrier.
            </summary>
        </member>
        <member name="F:BAI.Systems.Common.WaferPresenceState.WrongSize">
            <summary>
            Smaller than lower thickness bound.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.VerticalOffsetFromWafer">
            <summary>
            Vertical offset from wafer plane
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.WaferSize">
            <summary>
            The diameter of a wafer in millimeters.
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.IMobileHostsOpSetup">
            <summary>
            Interface to setup Transfer Center carousel's motion parameters/profiles
            </summary>
        </member>
        <member name="T:BAI.Systems.Common.ITransferOp">
            <summary>
            Methods for transfering wafers.
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.ITransferOp.MoveToReadyGet(System.String,System.String)">
            <summary>
            Moves the robot to be ready to get a wafer from <paramref name="fromLocation" />.
            </summary>
            <remarks>
            Call this method before calling <see cref="M:BAI.Systems.Common.ITransferOp.GetWafer(System.String,System.String)" /> for increased efficiency.
            <see cref="M:BAI.Systems.Common.ITransferOp.MoveToReadyGet(System.String,System.String)" /> supports concurrent execution with more calls than <see cref="M:BAI.Systems.Common.ITransferOp.GetWafer(System.String,System.String)" /> does.
            </remarks>
            <param name="endEffecter">end effecter to use to pick wafer</param>
            <param name="fromLocation">location where the wafer is to be picked up</param>
            <example>
            Moves the robot to be ready to get a wafer using EE1 at PortA.Slot1:
            <code language="cs">
            ITransferOp o;
            o.MoveToReadyGet("EE1", "PortA.Slot1");
            </code>
            </example>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.ITransferOp.MoveToReadyPut(System.String,System.String)">
            <summary>
            Moves the robot to be ready to put a wafer to <paramref name="toLocation" />.
            </summary>
            <remarks>
            Call this method before calling <see cref="M:BAI.Systems.Common.ITransferOp.PutWafer(System.String,System.String)" /> for increased efficiency.
            <see cref="M:BAI.Systems.Common.ITransferOp.MoveToReadyPut(System.String,System.String)" /> supports concurrent execution with more calls than <see cref="M:BAI.Systems.Common.ITransferOp.PutWafer(System.String,System.String)" /> does.
            </remarks>
            <param name="endEffecter">end effecter to use to place wafer</param>
            <param name="toLocation">location where the wafer is to be placed</param>
            <example>
            Moves the robot to be ready to put a wafer using EE1 at PortA.Slot1:
            <code language="cs">
            ITransferOp o;
            o.MoveToReadyPut("EE1", "PortA.Slot1");
            </code>
            </example>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.ITransferOp.GetWafer(System.String,System.String)">
            <summary>
            Robot moves to get a wafer with specified end effecter from location specified.
            </summary>
            <remarks>
            Motion consists of three steps (there may be blending - overlaps):
            <list type="number">
                <item>
                    <description>Extend end effecter to specified location (from current height below wafer).</description>
                </item>
                <item>
                    <description>Move up (from below wafer to above wafer) to pick the wafer.</description>
                </item>
                <item>
                    <description>Retract end effecter to home position (from current height above wafer).</description>
                </item>
            </list>
            <para>
                Call MoveToReadyGet() method before calling GetWafer() for efficiency.
                If not, this method will call MoveToReadyGet() first.
            </para>
            </remarks>
            <param name="endEffecter">end effecter to use to pick wafer</param>
            <param name="fromLocation">location where the wafer is to be picked up</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.ITransferOp.PutWafer(System.String,System.String)">
            <summary>
            Moves the robot to put a wafer with specified end effecter to location specified.
            </summary>
            <remarks>
            Motion consists of three steps (there may be blending - overlaps)
            <list type="number">
                <item>
                    <description>Extend end effecter to specified location (from current height above wafer).</description>
                </item>
                <item>
                    <description>Move down (from above wafer to below wafer) to put the wafer.</description>
                </item>
                <item>
                    <description>Retract end effecter to home position (from current height below wafer).</description>
                </item>
            </list>
            <para>
                Call MoveToReadyPut() method before calling PutWafer() for efficiency.
                If not, this method will call MoveToReadyPut() first.
            </para>
            </remarks>
            <param name="endEffecter">end effecter to use to place wafer</param>
            <param name="toLocation">location where the wafer is to be placed</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.ITransferOp.GetWafer(System.String,System.String,System.Double,System.Double)">
            <summary>
            Pick a wafer with an offset correction vector - used for example in picking wafer from aligner.
            </summary>
            <param name="endEffecter" />
            <param name="fromLocation" />
            <param name="radialOffset_mm">The offset of the robot arm in millimeters.</param>
            <param name="thetaOffset_degree">The offset of the robot's theta axis in degrees.</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.ITransferOp.PutWafer(System.String,System.String,System.Double,System.Double)">
            <summary>
            Place a wafer with an offset correction vector - used for example in placing wafer to aligner.
            </summary>
            <param name="endEffecter" />
            <param name="toLocation" />
            <param name="radialOffset_mm">The offset of the robot arm in millimeters.</param>
            <param name="thetaOffset_degree">The offset of the robot's theta axis in degrees.</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.WaferAbsentAtFromLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.WaferPresentAtToLocationException">
      <para>Thrown if there is there is already a wafer on the to location.</para>
      <para>
        For a GetWafer transfer, the to location would be the end effecter.
        For a PutWafer transfer, the to location would be the target location.
      </para>
    </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Common.IWaferHostsManager.InitWaferPresence">
            <summary>
            Initialize - read from Persist/Module.WaferOnHost.txt file, and detect with sensors
            </summary>
        </member>
        <member name="M:BAI.Systems.Common.IWaferHostsManager.GetWaferPresenceOnHost(System.String)">
            <summary>
            Detect wafer presence on a given host.
            </summary>
            <param name="host">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from software cache.</returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferHostsManager.SetWaferPresenceOnHost(System.String,BAI.Systems.Common.WaferPresenceState)">
            <summary>
            A high level transfer coordinator/manager call this method on a module 
            to set the presence/absence on a passive/mobile host in that module after
            an active host has finished a get/put wafer operation. 
            </summary>
            <param name="host">the passive/mobile host that is participating in a transfer operation</param>
            <param name="state">wafer presence state to set the host to</param>
        </member>
        <member name="M:BAI.Systems.Common.IWaferHostsManager.GetWaferHostNames(System.String)">
            <summary>
            Get wafer hosts that matches search string
            </summary>
            <param name="searchString">Keyword for search - any word in wafer hosts.
            If null, all hosts within the module are returned.
            </param>
            <returns>Array of hosts that matches search keyword.</returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferHostsManager.GetWaferPresence(System.String)">
            <summary>
            Find wafer hosts that matches search keyword and return wafer presence information.
            </summary>
            <param name="hostSearchString">Keyword for host search - any word in wafer hosts.
            If null, all hosts within the module are returned.
            </param>
            <returns>Arrary of hosts with wafer presence that matches search keyword.</returns>
        </member>
        <member name="T:BAI.Systems.Common.ITransferLocationsManager">
            <summary>
            Query information about transfer locations.
            </summary>
            <remarks>
            A transfer location is a location that the robot can pick or place a substrate from.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.ITransferLocationsManager.GetTransferLocations(System.String,System.String)">
            <summary>
            Find the transfer locations that matches the search keyword for either an active or mobile wafer host.
            </summary>
            <param name="activeOrMobileHost">Name of active host (e.g. end effecter) or
            mobile host (e.g. Carrier Buffer active port)</param>
            <param name="searchString">a substring of the transfer locations to find</param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Common.IWaferMapOp">
            <summary>
            Interface for modules with wafer presence mapper hardware, including VT and TC and some EFEM.
            </summary>
            <remarks>
            <para>This interface is designed to be used in three situations:</para>
            <list type="bullet">
                <item><description>Initialization time after axes have been homed.</description></item>
                <item><description>Recovery from errors.</description></item>
                <item><description>Service</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BAI.Systems.Common.IWaferMapOp.MapWaferPresenceOnHost(System.String)">
            <summary>
            Detect wafer presence on a given host
            </summary>
            <param name="host">String specific enough to uniquely identiy a host</param>
            <returns>Presence or absence from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferMapOp.MapWaferPresence(System.String)">
            <summary>
            Detect wafer presence on a group of hosts
            </summary>
            <param name="hostSearchString">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Common.IWaferMapOp.DetectWaferSize(System.String)">
            <summary>
            Detect wafer size on a given host
            </summary>
            <param name="host">String specific enough to uniquely identiy a host</param>
            <returns>Wafer size from hardware detection</returns>
        </member>
        <member name="T:BAI.Systems.Communications.DispatchProxy">
            <summary>
            DispatchProxy provides a mechanism for the instantiation of proxy objects and handling of
            their method dispatch.
            </summary>
        </member>
        <member name="M:BAI.Systems.Communications.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Whenever any method on the generated proxy type is called, this method
            will be invoked to dispatch control.
            </summary>
            <param name="targetMethod">The method the caller invoked</param>
            <param name="args">The arguments the caller passed to the method</param>
            <returns>The object to return to the caller, or <c>null</c> for void methods</returns>
        </member>
        <member name="M:BAI.Systems.Communications.DispatchProxy.Create``2">
            <summary>
            Creates an object instance that derives from class <typeparamref name="TProxy"/>
            and implements interface <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The interface the proxy should implement.</typeparam>
            <typeparam name="TProxy">The base class to use for the proxy class.</typeparam>
            <returns>An object instance that implements <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is a class, 
            or <typeparamref name="TProxy"/> is sealed or does not have a parameterless constructor</exception>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.IPointToPointCommClient.SendRequest(BAI.Systems.Communications.EtherComm.RequestData)">
            <summary>
            Send a request to server.
            </summary>
            <param name="request">Request</param>
            <returns>message token with ID to look up reply message</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.IPointToPointCommClient.HasReceivedReply(BAI.Systems.Communications.EtherComm.MessageToken)">
            <summary>
            Check if reply has arrived from server
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.IPointToPointCommClient.GetReply(BAI.Systems.Communications.EtherComm.MessageToken)">
            <summary>
            Get reply that server has sent back. Null if reply not received on client end yet.
            </summary>
            <param name="token">message token with id obtained when sent request to server</param>
            <returns>reply from server if it has arrived at client end. Otherwise, returns null</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.IPointToPointCommClient.WaitForReply(BAI.Systems.Communications.EtherComm.MessageToken,System.Int32)">
            <summary>
            Wait for reply message until specified timeout.
            </summary>
            <param name="token">message token with id obtained when sent request to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds.
            If smaller than default system timeout, system default is used silently.
            </param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.IPointToPointCommClient.SendRequestAndWaitReply(BAI.Systems.Communications.EtherComm.RequestData,System.Int32)">
            <summary>
            This is the same as SendRequest() + WaitForReply()
            </summary>
            <param name="request">Request to be sent to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds.
            If smaller than default system timeout, system default is used silently.</param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.P2PATOMCommImp.SendRequest(BAI.Systems.Communications.EtherComm.RequestData)">
            <summary>
            Send a request to server.
            </summary>
            <param name="request">Request</param>
            <returns>message token with ID to look up reply message</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.P2PATOMCommImp.HasReceivedReply(BAI.Systems.Communications.EtherComm.MessageToken)">
            <summary>
            Check if reply has arrived from server
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.P2PATOMCommImp.GetReply(BAI.Systems.Communications.EtherComm.MessageToken)">
            <summary>
            Get reply that server has sent back. Null if reply not received on client end yet.
            </summary>
            <param name="token">message token with id obtained when sent request to server</param>
            <returns>reply from server if it has arrived at client end. Otherwise, returns null</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.P2PATOMCommImp.WaitForReply(BAI.Systems.Communications.EtherComm.MessageToken,System.Int32)">
            <summary>
            Wait for reply message until specified timeout.
            </summary>
            <param name="token">message token with id obtained when sent request to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds. 
            If smaller than default system timeout, system default is used silently.
            </param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.P2PATOMCommImp.SendRequestAndWaitReply(BAI.Systems.Communications.EtherComm.RequestData,System.Int32)">
            <summary>
            This is the same as SendRequest() + WaitForReply()
            </summary>
            <param name="request">Request to be sent to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds. 
            If smaller than default system timeout, system default is used silently.</param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommClientImp.SendRequest(BAI.Systems.Communications.EtherComm.RequestData)">
            <summary>
            Send a request to server.
            </summary>
            <param name="request">Request</param>
            <returns>message token with ID to look up reply message</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommClientImp.HasReceivedReply(BAI.Systems.Communications.EtherComm.MessageToken)">
            <summary>
            Check if reply has arrived from server
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommClientImp.GetReply(BAI.Systems.Communications.EtherComm.MessageToken)">
            <summary>
            Get reply that server has sent back. Null if reply not received on client end yet.
            </summary>
            <param name="token">message token with id obtained when sent request to server</param>
            <returns>reply from server if it has arrived at client end. Otherwise, returns null</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommClientImp.WaitForReply(BAI.Systems.Communications.EtherComm.MessageToken,System.Int32)">
            <summary>
            Wait for reply message until specified timeout.
            </summary>
            <param name="token">message token with id obtained when sent request to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds. 
            If smaller than default system timeout, system default is used silently.
            </param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommClientImp.SendRequestAndWaitReply(BAI.Systems.Communications.EtherComm.RequestData,System.Int32)">
            <summary>
            This is the same as SendRequest() + WaitForReply()
            </summary>
            <param name="request">Request to be sent to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds. 
            If smaller than default system timeout, system default is used silently.</param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommClientImp.toMessageId(BAI.Systems.Communications.EtherComm.MessageToken)">
            <summary>
            Convert a message token to a message id for finding reply message
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommClientImp.toMessageToken(BAI.Infras.SocketComm.MessageId)">
            <summary>
            Convert a message id to a message token for client to look up reply 
            </summary>
            <param name="id">mesage id returned from connection to server</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommClientImp.toReqMessage(BAI.Systems.Communications.EtherComm.RequestData)">
            <summary>
            Convert request data to a full socket communication request message
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommClientImp.toReplyData(BAI.Infras.SocketComm.RepMessage)">
            <summary>
            Extract reply data from a full socket communication reply message
            </summary>
            <param name="reply"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommProxy.SendRequest(BAI.Systems.Communications.EtherComm.RequestData)">
            <summary>
            Send a request to server.
            </summary>
            <param name="request">Request</param>
            <returns>message token with ID to look up reply message</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommProxy.HasReceivedReply(BAI.Systems.Communications.EtherComm.MessageToken)">
            <summary>
            Check if reply has arrived from server
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommProxy.GetReply(BAI.Systems.Communications.EtherComm.MessageToken)">
            <summary>
            Get reply that server has sent back. Null if reply not received on client end yet.
            </summary>
            <param name="token">message token with id obtained when sent request to server</param>
            <returns>reply from server if it has arrived at client end. Otherwise, returns null</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommProxy.WaitForReply(BAI.Systems.Communications.EtherComm.MessageToken,System.Int32)">
            <summary>
            Wait for reply message until specified timeout.
            </summary>
            <param name="token">message token with id obtained when sent request to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds.
            If smaller than default system timeout, system default is used silently.
            </param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.PointToPointCommProxy.SendRequestAndWaitReply(BAI.Systems.Communications.EtherComm.RequestData,System.Int32)">
            <summary>
            This is the same as SendRequest() + WaitForReply()
            </summary>
            <param name="request">Request to be sent to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds.
            If smaller than default system timeout, system default is used silently.</param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.XMsgConnection.SendRequest(BAI.Systems.HwComm.XMsg.XMsgMaster)">
            <summary>
            Send a request to server.
            </summary>
            <param name="req">Request</param>
            <returns>message token with ID to look up reply message</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.XMsgConnection.WaitForReply(BAI.Systems.HwComm.XMsg.XMsgMaster,BAI.Systems.Communications.EtherComm.MessageToken,System.Int32)">
            <summary>
            Wait for reply message until specified timeout.
            </summary>
            <param name="request"></param>
            <param name="token">message token with id obtained when sent request to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds.
            If smaller than default system timeout, system default is used silently.
            </param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="M:BAI.Systems.Communications.EtherComm.XMsgConnection.SendRequestAndWaitReply(BAI.Systems.HwComm.XMsg.XMsgMaster,System.Int32)">
            <summary>
            This is the same as SendRequest() + WaitForReply()
            </summary>
            <param name="request">Request to be sent to server</param>
            <param name="msTimeout">timeout for the wait period in milli-seconds.
            If smaller than default system timeout, system default is used silently.</param>
            <returns>reply message received with result or error</returns>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadCommClientBase.mMessageLog">
            <summary>
            Null unless logging is enabled.
            </summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Status">
            <summary>Status</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Executed">
            <summary>Executed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Acknowledged">
            <summary>Acknowledged</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CanopenError">
            <summary>CanOpen Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CanopenResponseTimeout">
            <summary>CanOpen response timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CanopenAbort">
            <summary>CanOpen Abort</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.SystemInternalTimeout">
            <summary>System internal timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.IllegalCommand">
            <summary>Illegal command</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.IllegalNumberOfParameters">
            <summary>Illegal number of parameters</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.IllegalParameterValue">
            <summary>Illegal parameter value</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.SyntaxError">
            <summary>Syntax error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.IllegalAddress">
            <summary>Illegal address</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CommandNotSupported">
            <summary>Command not supported</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.StartConditionForCommandNotValid">
            <summary>Start condition for command not valid</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.InvalidSystemOperation">
            <summary>Invalid system operation</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MotorPowerFailure">
            <summary>Motor power failure</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.EmergencyFunctionActivated">
            <summary>Emergency function activated</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.EStopRelayMalfunction">
            <summary>E-Stop Relay malfunction</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.FileIoError">
            <summary>File IO error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.VisionInvalidSystemOperation">
            <summary>Vision Invalid System Operation</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.DockAborted">
            <summary>Dock aborted</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Unloadclampeddockedaborted">
            <summary>UnloadClampedDockedAborted</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Unloadclampedundockedaborted">
            <summary>UnloadClampedUndockedAborted</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Unloadaborted">
            <summary>UnloadAborted</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Undockaborted">
            <summary>UndockAborted</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CommandRejectedAnotherSequenceCommandIsStillInProgress">
            <summary>Command rejected, another sequence command is still in progress</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.InvalidSequenceName">
            <summary>Invalid sequence name</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.InvalidSequenceReturnValue">
            <summary>Invalid sequence return value</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.SequenceDoesNotHaveReturnValue">
            <summary>Sequence does not have return value</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.SequencerIsNotInitialized">
            <summary>Sequencer is not initialized</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.SequenceCanNotBeExecutedDueToActiveServiceMode">
            <summary>Sequence can not be executed due to active Service mode</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ServiceModeAccessDenied">
            <summary>Service Mode Access Denied</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.VacuumSystemFailure">
            <summary>Vacuum System failure</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.WaferProtrusionSensorTriggered">
            <summary>Wafer protrusion sensor triggered</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.NotInitialized">
            <summary>Not initialized</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.InitializationIsNotComplete">
            <summary>Initialization is not complete</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ResourceNotAvailable">
            <summary>Resource not available</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.InvalidConfiguration">
            <summary>Invalid configuration</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.NotCalibrated">
            <summary>Not Calibrated</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.VacuumNotSensed">
            <summary>Vacuum not sensed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.VacuumPresent">
            <summary>Vacuum present</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CarrierNotPlaced">
            <summary>Carrier not placed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CarrierNotPresent">
            <summary>Carrier not present</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CarrierEdgeDetectionFailure">
            <summary>Carrier edge detection failure (POD Advance sensor does not trigger)</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CarrierDoorDetected">
            <summary>Carrier door detected</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LimitPositionD1NotReached">
            <summary>Limit position d1 not reached</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LimitPositionD2NotReached">
            <summary>Limit position d2 not reached</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.DoorMotionIsDisabledByInterlock">
            <summary>Door motion is disabled by interlock</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.SafetyFrameActive">
            <summary>Safety frame active</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchCannotOpen">
            <summary>Latch cannot open</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchCannotClose">
            <summary>Latch cannot close</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CarrierIsNotInUnclampedState">
            <summary>Carrier is not in unclamped state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CarrierIsNotInClampedState">
            <summary>Carrier is not in clamped state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleIsNotInExtendedState">
            <summary>Shuttle is not in extended state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleIsNotInRetractedState">
            <summary>Shuttle is not in retracted state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.VacuumIsNotInEstablishedState">
            <summary>Vacuum is not in established state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.VacuumIsInEstablishedState">
            <summary>Vacuum is in established state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CarrierDoorIsNotInLatchedState">
            <summary>Carrier door is not in latched state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CarrierDoorIsInLatchedState">
            <summary>Carrier door is in latched state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.PivotIsNotInExtendedState">
            <summary>Pivot is not in extended state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.PivotIsNotInRetractedState">
            <summary>Pivot is not in retracted state</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.DoorIsNotInUpPosition">
            <summary>Door is not in UP position</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.DoorIsNotInDownPosition">
            <summary>Door is not in DOWN position</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TimeExceededE84SequenceTimeout">
            <summary>Time exceeded E84 Sequence timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TimeoutTp1">
            <summary>Timeout TP1</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TimeoutTp2">
            <summary>Timeout TP2</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TimeoutTp3">
            <summary>Timeout TP3</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TimeoutTp4">
            <summary>Timeout TP4</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TimeoutTp5">
            <summary>Timeout TP5</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84ProtocolError">
            <summary>E84 Protocol Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.HomeNotPerformedOrFoupNotProperlyLoadedUnloaded">
            <summary>home not performed or FOUP not properly loaded/unloaded</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84SequenceAborted">
            <summary>E84 Sequence Aborted</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TimeoutTp6">
            <summary>Timeout TP6</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TimeoutTd1">
            <summary>Timeout TD1</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.HoAvblOrEsSignalIsNotSet">
            <summary>HO_AVBL or ES signal is not set</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84HandoffIsActive">
            <summary>E84 Handoff is active</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84HandoffEnabled">
            <summary>E84 Handoff enabled</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84HandoffAvailableIsEnabled">
            <summary>E84 Handoff Available is enabled</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84CarrierStatusError">
            <summary>E84 Carrier Status Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84InterlockLightCurtain">
            <summary>E84 Interlock Light Curtain</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84InterlockDoorInterlock">
            <summary>E84 Interlock Door Interlock</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84InterlockInitializing">
            <summary>E84 Interlock Initializing</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84InterlockE84stop">
            <summary>E84 Interlock E84Stop</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84interlockDocking">
            <summary>E84Interlock_Docking</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84interlockMisplacement">
            <summary>E84Interlock_Misplacement</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.E84activesidesignalon">
            <summary>E84ActiveSideSignalOn</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.InvalidWaferEdges">
            <summary>Invalid wafer edges</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TooMayWafersDetected">
            <summary>Too may wafers detected</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Mapresultunavailable">
            <summary>MapResultUnavailable</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.IncorrectSlotForFindbias">
            <summary>Incorrect slot for findbias</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.FindBiasNotPerformed">
            <summary>Find bias Not performed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.WaferSlotOutOfRange">
            <summary>Wafer slot out of range</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoGenericError">
            <summary>Shuttle Servo Generic Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoOverCurrent">
            <summary>Shuttle Servo Over Current</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoPeakCurrent">
            <summary>Shuttle Servo Peak Current</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoOverTemp">
            <summary>Shuttle Servo Over Temp</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoUnknownMotor">
            <summary>Shuttle Servo Unknown Motor</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleNotArrivedAtTarget">
            <summary>Shuttle Not Arrived At Target</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoFollowingError">
            <summary>Shuttle Servo Following Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleHomingError">
            <summary>Shuttle Homing Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoCommutationError">
            <summary>Shuttle Servo Commutation Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoSettleTimeout">
            <summary>Shuttle Servo Settle Timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoCommandConfigError">
            <summary>Shuttle Servo Command Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoSensorConfigError">
            <summary>Shuttle Servo Sensor Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoOutputConfigError">
            <summary>Shuttle Servo Output Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ShuttleServoUndefinedError">
            <summary>Shuttle Servo Undefined Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.TeachRangeExceeds">
            <summary>Teach Range Exceeds</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ClampNotArrivedAtTarget">
            <summary>Clamp Not Arrived At Target</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ClampHomingError">
            <summary>Clamp Homing Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LockNotArrivedAtTarget">
            <summary>Lock Not Arrived At Target</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LockHomingError">
            <summary>Lock Homing Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoGeneric">
            <summary>Latch Servo Generic</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoOverCurrent">
            <summary>Latch Servo Over Current</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoPeakCurrent">
            <summary>Latch Servo Peak Current</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoOverTemp">
            <summary>Latch Servo Over Temp</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoUnknownMotor">
            <summary>Latch Servo Unknown Motor</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchNotArrivedAtTarget">
            <summary>Latch Not Arrived At Target</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoFollowingError">
            <summary>Latch Servo Following Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchHomingError">
            <summary>Latch Homing Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoCommutationError">
            <summary>Latch Servo Commutation Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoSettleTimeout">
            <summary>Latch Servo Settle Timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoCommandConfigError">
            <summary>Latch Servo Command Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoSensorConfigError">
            <summary>Latch Servo Sensor Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoOutputConfigError">
            <summary>Latch Servo Output Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchServoUndefinedError">
            <summary>Latch Servo Undefined Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.LatchSensorFaultError">
            <summary>Latch Sensor Fault Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperNotArrivedAtTarget">
            <summary>Mapper Not Arrived At Target</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperHomingError">
            <summary>Mapper Homing Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperSensorFaultError">
            <summary>Mapper Sensor Fault Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoGeneric">
            <summary>Mapper Servo Generic</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoOverCurrent">
            <summary>Mapper Servo Over Current</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoPeakCurrent">
            <summary>Mapper Servo Peak Current</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoOverTemperature">
            <summary>Mapper Servo Over Temperature</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoUnknownMotor">
            <summary>Mapper Servo Unknown Motor</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoNotArrivedAtTarget">
            <summary>Mapper Servo Not Arrived At Target</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoFollowingError">
            <summary>Mapper Servo Following Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoHomingError">
            <summary>Mapper Servo Homing Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoCommutationError">
            <summary>Mapper Servo Commutation Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoSettleTimeout">
            <summary>Mapper Servo Settle Timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoCommandConfigError">
            <summary>Mapper Servo Command Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoSensorConfigError">
            <summary>Mapper Servo Sensor Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoOutputConfigError">
            <summary>Mapper Servo Output Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.MapperServoUndefinedError">
            <summary>Mapper Servo Undefined Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoGeneric">
            <summary>Z motor Servo Generic</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoOverCurrent">
            <summary>Z Motor Servo Over Current</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoPeakCurrent">
            <summary>Z Motor Servo Peak Current</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoOverTemp">
            <summary>Z Motor Servo Over Temp</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoUnknownMotor">
            <summary>Z Motor Servo Unknown Motor</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorNotArrivedAtTarget">
            <summary>Z Motor Not Arrived At Target</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoFollowingError">
            <summary>Z Motor Servo Following Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorHomingError">
            <summary>Z Motor Homing Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoCommutationError">
            <summary>Z Motor Servo Commutation Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoSettleTimeout">
            <summary>Z Motor Servo Settle Timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoCommandConfigError">
            <summary>Z Motor Servo Command Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoSensorConfigError">
            <summary>Z Motor Servo Sensor Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoOutputConfigError">
            <summary>Z Motor Servo Output Config Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.ZMotorServoUndefinedError">
            <summary>Z Motor Servo Undefined Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.PivotNotArrivedAtTarget">
            <summary>Pivot Not Arrived At Target</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.DoorNotClosed">
            <summary>Door not closed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.PivotHomingError">
            <summary>Pivot Homing Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidCrcError">
            <summary>CID_CRC_Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidInitnotcomplete">
            <summary>CID_InitNotComplete</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidNotopenedorunavailable">
            <summary>CID_NotOpenedOrUnavailable</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidTimeout">
            <summary>CID_Timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosAutomaticreadingnotpossible">
            <summary>CID_Hermos_AutomaticReadingNotPossible</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosExternalreadingnotpossible">
            <summary>CID_Hermos_ExternalReadingNotPossible</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosDatatransfertotagnotpossible">
            <summary>CID_Hermos_DataTransferToTagNotPossible</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosTagorantennanotinstalled">
            <summary>CID_Hermos_TagOrAntennaNotInstalled</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosWrongparameterorcommand">
            <summary>CID_Hermos_WrongParameterOrCommand</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosUnknownerror">
            <summary>CID_Hermos_UnknownError</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosSystemnotconfigured">
            <summary>CID_Hermos_SystemNotConfigured</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosParityorandchecksumerror">
            <summary>CID_Hermos_ParityOrAndChecksumError</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosNovalidacknowledgement">
            <summary>CID_Hermos_NoValidAcknowledgement</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosMessagetoolong">
            <summary>CID_Hermos_MessageTooLong</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosInvalidparameterorcommand">
            <summary>CID_Hermos_InvalidParameterOrCommand</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosPageisprohibited">
            <summary>CID_Hermos_PageIsProhibited</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidHermosTimeoutacknowledgementbyterminal">
            <summary>CID_Hermos_TimeoutAcknowledgementByTerminal</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceUndefinedCommand">
            <summary>CID_Keyence_Undefined_command</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceWrongCommandFormat">
            <summary>CID_Keyence_Wrong_command_format</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceNothingCorrespondsToNumberInCommand">
            <summary>CID_Keyence_Nothing_corresponds_to_number_in_command</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceMValueOutOfValueRange">
            <summary>CID_Keyence_m_value_out_of_value_range</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceIllegalNumberOfReadableCharacters">
            <summary>CID_Keyence_Illegal_number_of_readable_characters</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceNumberInCommandTooLong">
            <summary>CID_Keyence_Number_in_command_too_long</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceHhhDataTooShort">
            <summary>CID_Keyence_hhh_data_too_short</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceNValueOutOfRange">
            <summary>CID_Keyence_n_value_out_of_range</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceNValueExceedsSettingRange">
            <summary>CID_Keyence_n_value_exceeds_setting_range</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceNnValueOrNnnValueExceedsSettingRange">
            <summary>CID_Keyence_nn_value_or_nnn_value_exceeds_setting_range</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceHhhValueNotSpecifiedInHexCodeFormat">
            <summary>CID_Keyence_hhh_value_not_specified_in_hex_code_format</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceHhhValue0xffCannotBeSet">
            <summary>CID_Keyence_hhh_value_0xFF_cannot_be_set</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceHhhValueOrAaaValuePresetCharExceeded">
            <summary>CID_Keyence_hhh_value_or_aaa_value_preset_char_exceeded</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceAaaValueInvalidCharacter">
            <summary>CID_Keyence_aaa_value_invalid_character</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceEepromDataMayGetDamaged">
            <summary>CID_Keyence_EEPROM_data_may_get_damaged</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceErrorInMemoryAreaOfInitialSettings">
            <summary>CID_Keyence_Error_in_memory_area_of_initial_settings</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyencePresetdataIllegalCharacters">
            <summary>CID_Keyence_PresetData_Illegal_characters</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyencePresettingTwoTimesExmark">
            <summary>CID_Keyence_Presetting_two_times_ExMark</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceBusyNgReading">
            <summary>CID_Keyence_Busy_NG_Reading</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyenceReadingError">
            <summary>CID_Keyence_Reading_ERROR</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidKeyencePossiblyMalfunctioningServiceRequired">
            <summary>CID_Keyence_Possibly_malfunctioning_Service_required</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronParityError">
            <summary>CID_Omron_Parity_Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronFramingError">
            <summary>CID_Omron_Framing_Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronOverflowError">
            <summary>CID_Omron_Overflow_Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronFormatErrorWrongCommandStructure">
            <summary>CID_Omron_Format_Error_Wrong_command_structure</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronFrameLengthError">
            <summary>CID_Omron_Frame_Length_Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronTransmissionErrorTagDisturbed">
            <summary>CID_Omron_Transmission_Error_Tag_Disturbed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronVerificationErrorDataInTagCannotBeWritten">
            <summary>CID_Omron_Verification_Error_Data_in_Tag_cannot_be_Written</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronNoTagInFrontOfAntenna">
            <summary>CID_Omron_No_tag_in_front_of_antenna</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronPageSpecifiedIsIncorrect">
            <summary>CID_Omron_Page_Specified_is_incorrect</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronWriteZoneProtectedTagIsInReadOnlyZone">
            <summary>CID_Omron_Write_Zone_Protected_Tag_is_in_read_only_zone</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronHardwareErrorAntennaNotWorkProperly">
            <summary>CID_Omron_Hardware_Error_Antenna_not_work_properly</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronWriteProtectionPageIsWriteProtected">
            <summary>CID_Omron_Write_Protection_page_is_write_protected</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronTransmissionErrorBetweenAntennaAndTag">
            <summary>CID_Omron_Transmission_Error_between_Antenna_and_tag</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronIdSystemTagDoesNotMatchSpecs">
            <summary>CID_Omron_ID_system_Tag_does_not_match_specs</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronCommunicationErrorFaultyDataReceivedFromCidrw">
            <summary>CID_Omron_Communication_Error_faulty_data_received_from_CIDRW</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidOmronCidrwDisconnectedOrNotWorkingProperly">
            <summary>CID_Omron_CIDRW_disconnected_or_not_working_properly</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystWrongTargetId">
            <summary>CID_Asyst_Wrong_target_ID</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystFalseSequenceOffset">
            <summary>CID_Asyst_False_sequence_offset</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystFalseDataLength">
            <summary>CID_Asyst_False_data_length</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystDataTooLong">
            <summary>CID_Asyst_Data_too_long</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystDataLengthDoesNotMatchData">
            <summary>CID_Asyst_Data_length_does_not_match_data</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystRejectedAtLeastOneAttributeDoesNotExist">
            <summary>CID_Asyst_Rejected_At_least_one_attribute_does_not_exist</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystRejectedAtLeastOneAttributeBeyondValueRangeLimits">
            <summary>CID_Asyst_Rejected_At_least_one_attribute_beyond_value_range_limits</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystFileNotFound">
            <summary>CID_Asyst_File_not_found</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystFileNameIsReservedKeyword">
            <summary>CID_Asyst_File_Name_is_reserved_keyword</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystNoWritingPossibleTagIsDisabled">
            <summary>CID_Asyst_No_writing_possible_Tag_is_disabled</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystFalseTimeoutValue">
            <summary>CID_Asyst_False_timeout_value</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystWrongDataFormat">
            <summary>CID_Asyst_Wrong_data_format</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystChecksumErrorInTagData">
            <summary>CID_Asyst_Checksum_error_in_tag_data</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystFailureToWriteMidPage1HasReadOnlyStatus">
            <summary>CID_Asyst_Failure_to_write_MID_Page_1_has_read_only_status</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystSinglePageTagWasDetected">
            <summary>CID_Asyst_Single_page_tag_was_detected</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystTimeoutBetweenTwoCharacters">
            <summary>CID_Asyst_Timeout_between_two_characters</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystNoCommunicationWithTagCe">
            <summary>CID_Asyst_No_communication_with_tag_CE</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystTagErrorNoWritingOntoTagPossibleTe">
            <summary>CID_Asyst_Tag_error_No_writing_onto_tag_possible_TE</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystHardwareErrorNoCommunicationWithRfnHe">
            <summary>CID_Asyst_Hardware_error_No_communication_with_RFN_HE</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystEquipmentErrorEe">
            <summary>CID_Asyst_Equipment_error_EE</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystUnidentifiedDeviceIdUdn">
            <summary>CID_Asyst_Unidentified_device_ID_UDN</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystUnidentifiedDataStreamUsn">
            <summary>CID_Asyst_Unidentified_data_stream_USN</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystUnidentifiedFunctionTypeUfn">
            <summary>CID_Asyst_Unidentified_function_type_UFN</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystInvalidDataIdn">
            <summary>CID_Asyst_Invalid_data_IDN</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystTransactionTimerTimeoutTtn">
            <summary>CID_Asyst_Transaction_timer_Timeout_TTN</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystDataTooLongDln">
            <summary>CID_Asyst_Data_too_long_DLN</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystUnknownError">
            <summary>CID_Asyst_Unknown_Error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystDeniedConstantDoesNotExist">
            <summary>CID_Asyst_Denied_constant_does_not_exist</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystDeniedInvalidConstant">
            <summary>CID_Asyst_Denied_invalid_constant</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystTagReadWriteFailure">
            <summary>CID_Asyst_Tag_Read_Write_Failure</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystFileAlreadyExists">
            <summary>CID_Asyst_File_already_exists</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystFileNotFoundSmartTag">
            <summary>CID_Asyst_File_not_Found Smart Tag</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystNoFilesPresentInTag">
            <summary>CID_Asyst_No_Files_present_in_Tag</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystInsuffientSpaceForFile">
            <summary>CID_Asyst_Insuffient_space_for_file</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystInvalidTagSerialNumber">
            <summary>CID_Asyst_Invalid_Tag_Serial_Number</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystDeniedIncorrectConstantFormat">
            <summary>CID_Asyst_Denied_incorrect_constant_format</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystDeniedResetNotAllowed">
            <summary>CID_Asyst_Denied_Reset_not_allowed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystInvalidDataTime">
            <summary>CID_Asyst_Invalid_Data_Time</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.CidAsystFileLargerThan32768Bytes">
            <summary>CID_Asyst_File_larger_than_32768_bytes</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.NozzleDeactTimeout">
            <summary>NozzleDeact Timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.NozzleActTimeout">
            <summary>NozzleAct Timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.N2GasPressureError">
            <summary>N2 gas pressure error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Nozzle1PositionError">
            <summary>Nozzle 1 position error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Nozzle2PositionError">
            <summary>Nozzle 2 position error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Nozzle3PositionError">
            <summary>Nozzle 3 position error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.Nozzle4PositionError">
            <summary>Nozzle 4 position error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.N2InterlockResetFailure">
            <summary>N2 interlock activated error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.N2SoftwareInterlockActivatedHardwareInterlockFailure">
            <summary>The hardware failed to turn off the valves - the software interlock is active</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.N2HardwareInterlockActivated">
            <summary>N2 Hardware Interlock Activated</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.IncompatibleN2Carrier">
            <summary>N2 Carrier Not Present error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.N2ValveActivationTimeout">
            <summary>N2 Valve activation timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.N2ValveDeativationTimeout">
            <summary>N2 Valve deactivation timeout</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadErrorCode.N2ValvePositionError">
            <summary>N2 Valve position error</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.GlobalCarrierPlacedCarrierRemoved">
            <summary>Global Carrier Placed/Carrier Removed (enables 0x2001 and 0x2002)</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierPlaced">
            <summary>Carrier Placed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierRemoved">
            <summary>Carrier Removed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierID">
            <summary>Carrier ID</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierType">
            <summary>Carrier Type</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.GlobalCarrierPresentCarrierNotPresent">
            <summary>Global Carrier Present/Carrier Not Present (enables 0x200d and 0x200e)</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierPresent">
            <summary>Carrier Present</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierNotPresent">
            <summary>Carrier Not Present</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.E84ChangeofState">
            <summary>E84 Change of State</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CID1SerialGatewayData">
            <summary>CID1 Serial Gateway Data</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CID2SerialGatewayData">
            <summary>CID2 Serial Gateway Data</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CID1AutomaticallyRead">
            <summary>CID1 Automatically Read</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CID2AutomaticallyRead">
            <summary>CID2 Automatically Read</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.Button1Pressed">
            <summary>Button 1 Pressed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.Button1Released">
            <summary>Button 1 Released</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.Button2Pressed">
            <summary>Button 2 Pressed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.Button2Released">
            <summary>Button 2 Released</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.WaferProtrusionSensorBeamBroken">
            <summary>Wafer Protrusion Sensor Beam Broken</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.WaferProtrusionSsensorBeamUnbroken">
            <summary>Wafer ProtrusionSsensor Beam Unbroken</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierDoorLatched">
            <summary>Carrier Door Latched</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierDoorNotLatched">
            <summary>Carrier Door Not Latched</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierDoorUnlatched">
            <summary>Carrier Door Unlatched</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierDoorNotUnlatched">
            <summary>Carrier Door Not Unlatched</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PDODoorUp">
            <summary>PDO Door Up</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PDODoorNotUp">
            <summary>PDO Door Not Up</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PDODoorDown">
            <summary>PDO Door Down</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PDODoorNotDown">
            <summary>PDO Door Not Down</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PDOPivotClosed">
            <summary>PDO Pivot Closed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PDOPivotNotClosed">
            <summary>PDO Pivot Not Closed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PDOPivotOpen">
            <summary>PDO Pivot Open</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PDOPivotNotOpen">
            <summary>PDO Pivot Not Open</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierUnclamped">
            <summary>Carrier Unclamped</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierNotUnclamped">
            <summary>Carrier Not Unclamped</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierClamped">
            <summary>Carrier Clamped</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierNotClamped">
            <summary>Carrier Not Clamped</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ShuttleUndocked">
            <summary>Shuttle Undocked</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ShuttleNotUndocked">
            <summary>Shuttle Not Undocked</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ShuttleDocked">
            <summary>Shuttle Docked</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ShuttleNotDocked">
            <summary>Shuttle Not Docked</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.VacuumChuckOn">
            <summary>Vacuum Chuck On</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.VacuumChuckOff">
            <summary>Vacuum Chuck Off</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierUnlocked">
            <summary>Carrier Unlocked</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierNotUnlocked">
            <summary>Carrier Not Unlocked</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierLocked">
            <summary>Carrier Locked</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierNotLocked">
            <summary>Carrier Not Locked</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CarrierUnknown">
            <summary>Carrier Unknown</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.E84DebugEvent">
            <summary>E84 Debug Event</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.N2GasPrimaryPressureOn">
            <summary>N2 Gas Primary Pressure On Event</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.N2GasPrimaryPressureOff">
            <summary>N2 Gas Primary Pressure Off Event</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MapperRetracted">
            <summary>Mapper Retracted</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MapperNotRetracted">
            <summary>Mapper Not Retracted</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MapperAtMapPos">
            <summary>Mapper At Map Pos</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MapperNotAtMapPos">
            <summary>Mapper Not At Map Pos</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MapperAtMidPos">
            <summary>Mapper At Mid Pos</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MapperNotAtMidPos">
            <summary>Mapper Not At Mid Pos</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DoorAtMapStart">
            <summary>Door At Map Start</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DoorNotAtMapStart">
            <summary>Door Not At Map Start</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DoorAtMapStop">
            <summary>Door At Map Stop</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DoorNotAtMapStop">
            <summary>Door Not At Map Stop</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.LightCurtainBreak">
            <summary>Light Curtain Break</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.LightCurtainCleared">
            <summary>Light Curtain Cleared</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.FanTachFailure">
            <summary>Fan failure</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.FanTachRunning">
            <summary>Fan running</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.E84InputChangeNotification">
            <summary>E84 Input Change Notification</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CONTSignalLowtoHigh">
            <summary>CONT Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CONTSignalHightoLow">
            <summary>CONT Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.COMPTSignalLowtoHigh">
            <summary>COMPT Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.COMPTSignalHightoLow">
            <summary>COMPT Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.BUSYSignalLowtoHigh">
            <summary>BUSY Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.BUSYSignalHightoLow">
            <summary>BUSY Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.TRREQSignalLowtoHigh">
            <summary>TR REQ Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.TRREQSignalHightoLow">
            <summary>TR REQ Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CS1SignalLowtoHigh">
            <summary>CS1 Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CS1SignalHightoLow">
            <summary>CS1 Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CS0SignalLowtoHigh">
            <summary>CS0 Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.CS0SignalHightoLow">
            <summary>CS0 Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.VALIDSignalLowtoHigh">
            <summary>VALID Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.VALIDSignalHightoLow">
            <summary>VALID Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.E84OutputChangeNotification">
            <summary>E84 Output Change Notification</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ESSignalLowtoHigh">
            <summary>ES Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ESSignalHightoLow">
            <summary>ES Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.HOAVBLSignalLowtoHigh">
            <summary>HO AVBL Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.HOAVBLSignalHightoLow">
            <summary>HO AVBL Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.READYSignalLowtoHigh">
            <summary>READY Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.READYSignalHightoLow">
            <summary>READY Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.UREQSignalLowtoHigh">
            <summary>U REQ Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.UREQSignalHightoLow">
            <summary>U REQ Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.LREQSignalLowtoHigh">
            <summary>L REQ Signal Low to High</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.LREQSignalHightoLow">
            <summary>L REQ Signal High to Low</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ClampRetry">
            <summary>Clamp Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.UnclampRetry">
            <summary>Unclamp Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.LockRetry">
            <summary>Lock Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.UnlockRetry">
            <summary>Unlock Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ShuttleExtendRetry">
            <summary>Shuttle Extend Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ShuttleRetractRetry">
            <summary>Shuttle Retract Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.LatchRetry">
            <summary>Latch Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.UnlatchRetry">
            <summary>Unlatch Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.VacuumOnRetry">
            <summary>Vacuum On Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.VacuumOffRetry">
            <summary>Vacuum Off Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PaddleExtendRetry">
            <summary>Paddle Extend Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PaddleRetractRetry">
            <summary>Paddle Retract Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DoorUpRetry">
            <summary>Door Up Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DoorDownRetry">
            <summary>Door Down Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DoortoMapperTopRetry">
            <summary>Door to Mapper Top Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DoortoMapperBottomRetry">
            <summary>Door to Mapper Bottom Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MapperOutRetry">
            <summary>Mapper Out Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MapperInRetry">
            <summary>Mapper In Retry</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.LineInletPressureChanged">
            <summary>Line Inlet Pressure Changed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MFC1InletPressureChanged">
            <summary>MFC1 Inlet Pressure Changed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MFC2InletPressureChanged">
            <summary>MCF2 Inlet Pressure Changed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DifferentialPressureChanged">
            <summary>Differential Pressure Changed</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.LineInletPressureCrossedThreshold">
            <summary>Line Inlet Pressure Crossed Threshold</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MFC1PressureCrossedThreshold">
            <summary>MFC1 Inlet Pressure Crossed Threshold</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.MFC2PressureCrossedThreshold">
            <summary>MCF2 Inlet Pressure Crossed Threshold</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.DifferentialPressureCrossedThreshold">
            <summary>Differential Pressure Crossed Threshold</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.N2InterlockStateChanged">
            <summary>N2Interlock event</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ServiceModeRequest">
            <summary>Service Mode Request (Generated when the operator touches the LCD)</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ServiceModeOn">
            <summary>Service Mode On</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ServiceModeOff">
            <summary>Service Mode Off</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.AutoMode">
            <summary>Auto Mode</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.ManualMode">
            <summary>Manual Mode</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.PowerUpEvent">
            <summary>Power Up Event</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.HeartBeatEvent">
            <summary>Heart Beat Event</summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadEventCode.EmergencyStopEvent">
            <summary>EMS Event</summary>
        </member>
        <member name="T:BAI.Systems.Communications.Fixload.FixloadMessageCodec">
            <summary>
            Encodes fixload command requests and decodes response/events.
            </summary>
            <remarks>
            This class is only designed to act as a client for fix load, not as a server (for an emulator).
            </remarks>
        </member>
        <member name="T:BAI.Systems.Communications.Fixload.IFixloadCommClient">
            <summary>
            Represents a connection to a fixload device.  Supports sending messages,
            receiving replies, and receiving events.
            </summary>
        </member>
        <member name="M:BAI.Systems.Communications.Fixload.IFixloadCommClient.SendMessageAndWaitForReply(BAI.Systems.Communications.Fixload.FixloadCommand,System.Collections.Generic.IList{System.String})">
            <summary>
            Sends a message with the given arguments and returns the reply.
            </summary>
            <param name="cmd"></param>
            <param name="arguments"></param>
            <returns></returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.FixloadException">Thrown when a command fails.</exception>
            <exception cref="T:BAI.Exceptions.ExecutionExceptions.OperationTimedoutException">Thrown when a response is not received in a timly manner.</exception>
        </member>
        <member name="M:BAI.Systems.Communications.Fixload.IFixloadCommClient.RegisterForEvent(BAI.Systems.Communications.Fixload.FixloadEventCode,System.Action{System.Collections.ObjectModel.ReadOnlyCollection{System.String}})">
            <summary>
            Registers a callback for <paramref name="evt"/>.
            </summary>
            <remarks>
            The callback will be called on the thread pool.
            </remarks>
            <param name="evt"></param>
            <param name="callback"></param>
        </member>
        <member name="M:BAI.Systems.Communications.Fixload.IFixloadCommClient.UnregisterForEvent(BAI.Systems.Communications.Fixload.FixloadEventCode,System.Action{System.Collections.ObjectModel.ReadOnlyCollection{System.String}})">
            <summary>
            Unregisters a callback for <paramref name="evt"/>.
            </summary>
            <param name="evt"></param>
            <param name="callback"></param>
        </member>
        <member name="P:BAI.Systems.Communications.Fixload.FixloadCommand.Address">
            <summary>
            This is the address of the command. Default Value: "io"
            </summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadCommand.CompletionEvent">
            <summary>
            The ID of the event that signals completion or
            null if the command does not use completion events.
            </summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadCommand.TimeoutMs">
            <summary>
            Timeout in milliseconds.
            </summary>
        </member>
        <member name="F:BAI.Systems.Communications.Fixload.FixloadCommand.IsPlaceholder">
            <summary>
            True if this command was generated by command parser to represent parsing failure.
            </summary>
        </member>
        <member name="P:BAI.Systems.Communications.Fixload.FixloadEventMessage.EventCode">
            <summary>
            Can be null if the event code is not known.
            </summary>
        </member>
        <member name="M:BAI.Systems.Communications.HostMessageMonitor.InsertHostMessageMonitoring``1(``0,System.Type)">
            <summary>
            Add host message logging and returns a new object implementing <paramref name="proxyInterface"/>.
            </summary>
            <remarks>
            The same instance may be returned if host logging is disabled or already implemented by the object passes in.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="objectToWrap">The object to be wrapped.</param>
            <param name="proxyInterface">Null means messages will not be recorded.</param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Communications.IHasHostMessageMonitoring">
            <summary>
            A marker interface to indicate the object has host logging support.
            </summary>
        </member>
        <member name="T:BAI.Systems.Communications.TDK.ITdkCommClient">
            <summary>
            Represents a connection to a fixload device.  Supports sending messages,
            receiving replies, and receiving events.
            </summary>
        </member>
        <member name="M:BAI.Systems.Communications.TDK.ITdkCommClient.SendMessageAndWaitForReply(BAI.Systems.Communications.TDK.TdkCommand,System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Sends a message with the given arguments and returns the reply.
            </summary>
            <param name="cmd"></param>
            <param name="arguments"></param>
            <param name="timeout"></param>
            <returns></returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.FixloadException">Thrown when a command fails.</exception>
            <exception cref="T:BAI.Exceptions.ExecutionExceptions.OperationTimedoutException">Thrown when a response is not received in a timly manner.</exception>
        </member>
        <member name="M:BAI.Systems.Communications.TDK.ITdkCommClient.RegisterForEvent(BAI.Systems.Communications.Fixload.FixloadEventCode,System.Action{System.Collections.ObjectModel.ReadOnlyCollection{System.String}})">
            <summary>
            Registers a callback for <paramref name="evt"/>.
            </summary>
            <remarks>
            The callback will be called on the thread pool.
            </remarks>
            <param name="evt"></param>
            <param name="callback"></param>
        </member>
        <member name="M:BAI.Systems.Communications.TDK.ITdkCommClient.UnregisterForEvent(BAI.Systems.Communications.Fixload.FixloadEventCode,System.Action{System.Collections.ObjectModel.ReadOnlyCollection{System.String}})">
            <summary>
            Unregisters a callback for <paramref name="evt"/>.
            </summary>
            <param name="evt"></param>
            <param name="callback"></param>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkCommClientBase.mMessageLog">
            <summary>
            Null unless logging is enabled.
            </summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkCommand.IsBackgroundCommand">
            <summary>
            True if this command is a background command.
            </summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkCommand.IsResendCommand">
            <summary>
            True if this command is a resend command.
            </summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkErrorCode.Zlimit">
            <summary>YLIMIT</summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkErrorCode.Ylimit">
            <summary>ZLIMIT</summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkErrorCode.Dlimit">
            <summary>DLIMIT</summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkErrorCode.Vaccs">
            <summary>VACCS</summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkErrorCode.Vacos">
            <summary>VACOS</summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkErrorCode.Prots">
            <summary>PROTS</summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkErrorCode.Safty">
            <summary>SAFTY</summary>
        </member>
        <member name="F:BAI.Systems.Communications.TDK.TdkErrorCode.Xxxx">
            <summary>XXXX</summary>
        </member>
        <member name="P:BAI.Systems.Communications.AutoTeach.AutoTeachReflectionRemoteImp.ConnectMessage">
            <inheritdoc />
        </member>
        <member name="P:BAI.Systems.Communications.AutoTeach.AutoTeachReflectionRemoteImp.AsyncConnectMessage">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Communications.AutoTeach.AutoTeachReflectionRemoteImp.Create``1(System.String,System.String,System.String)">
            <summary>
            Creates and connects a reflection-based remote imp.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="localName">The name of the component as defined in the local config files.  Used to look up the server address.</param>
            <param name="remoteName">The name of the component in the remote EC's Component Service.</param>
            <param name="clientName">The name of the client.  Usually the client passes in "CTC".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.AutoTeach.AutoTeachReflectionRemoteImp.Create``2(System.String,System.String,System.String)">
            <summary>
            Creates and connects a reflection-based remote imp.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TBase"></typeparam>
            <param name="localName">The name of the component as defined in the local config files.  Used to look up the server address.</param>
            <param name="remoteName">The name of the component in the remote EC's Component Service.</param>
            <param name="clientName">The name of the client.  Usually the client passes in "CTC".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.ReflectionRemoteImp.Create``1(System.String,System.String,System.String)">
            <summary>
            Creates and connects a reflection-based remote imp.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="localName">The name of the component as defined in the local config files.  Used to look up the server address.</param>
            <param name="remoteName">The name of the component in the remote EC's Component Service.</param>
            <param name="clientName">The name of the client.  Usually the client passes in "CTC".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.ReflectionRemoteImp.Create``2(System.String,System.String,System.String)">
            <summary>
            Creates and connects a reflection-based remote imp.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TBase"></typeparam>
            <param name="localName">The name of the component as defined in the local config files.  Used to look up the server address.</param>
            <param name="remoteName">The name of the component in the remote EC's Component Service.</param>
            <param name="clientName">The name of the client.  Usually the client passes in "CTC".</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Communications.ReflectionRemoteImp.EventRegistration.Invoke(System.Collections.Generic.List{BAI.Infras.SocketComm.MessageAttribute})">
             <summary>
            
             </summary>
             <param name="argStrings">Pairs of type name and serialized value.</param>
        </member>
        <member name="T:BAI.Systems.Communications.OverrideReflectionRemoteImpAttribute">
            <summary>
            Indicates this method should not be overriden by the proxy generated by ReflectionRemoteImp.
            </summary>
        </member>
        <member name="M:BAI.Systems.Communications.StdFacadeFeedBackBase.#ctor(BAI.Infras.SocketComm.SocketCommServerGen{BAI.Infras.SocketComm.StdMessage,BAI.Infras.SocketComm.StdMsgCodec},System.String)">
            <summary>
            For testing purposes only.
            </summary>
        </member>
        <member name="P:BAI.Systems.Communications.StdFacadeFeedBackBase.BrokerMsg">
            <summary>
            The message broker message to send.
            </summary>
        </member>
        <member name="P:BAI.Systems.Communications.StdFacadeFeedBackBase.RemoteObjectName">
            <summary>
            The ServerName parameter to send to the message broker.
            </summary>
        </member>
        <member name="T:BAI.Systems.Data.Motion.PVT_TransitionMode">
            <summary>
            Defines how are synchronised two or more moves that execute in the same time on distinct axes. 
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.CarrierHandoffPort.Custom.AutoHandoffSignalPassiveMonitorTsmc">
            <summary>
            Custom handling for sorters integrated into TSMC stockers.
            Problem:
            	The E84 standard specifies that during TP3 3 active signal transitions should be trigger by passive signal L_REQ/U_REQ off.
            	These 3 transitions are COMPT on, BUSY off and TR_REQ off. This is a critical hand shaking spec for the physcal handoff phase.
            	TSMC stocker robot (E84 active equipment) violates the above critical spec. Sometimes, it turns off TR_REQ before U_REQ is off.
            Workaround
            	Override the signal change event handling.
            	1. In state StPhysical, if any of COMPT on, BUSY off, TR_REQ off events arrives, 
            	   Base class fires error event.
            	   In this override, 
            	      Check carrier placement signal state
            	      For a load,    if carrier is not placed yet, post error event 
            	      For an unload, if carrier is still placed,   post error event
            	      Otherwise, do not post error (now that carrier placement matches intention, even though active signals did not follow SEMI standard)
            	2. In state StDetected, when L_REQ/U_REQ turns off, 
            	   Base class does not handle
            	   In this override
            		  Check if (COMPT==on) || (BUSY==off) || (TR_REQ==off). 
            		  If yes, post evComptOn to drive to StDeactivated.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.CarrierHandoffPort.Custom.ActiveSignalViolationsInPhysicalHandoff">
            <summary>
            Internal class to track the active signals' violations of E84 physical handoff spec 
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.CarrierHandoffPort.StUnavailable.EnteredViaCancel">
            <summary>
            True if StUnavailable was entered via a evCancel event.
            </summary>
            <remarks>
            This state can be entered via three different events:
                evError
                evEsOff
                evCancel
            For the first two, StError and StStopped raise the Vision handoff disabled event.
            To prevent raising this event a second time if the state chart receives
            an evCancel event afterwards, we record if we came to StUnavailable direcly via evCancel.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.StError.checkValidAndPresence">
            <summary>
            Checks if VALID is off and Carrier has changed hands. Posts evDisengage if true, evCancel if false.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.StError.AttemptAutoResetIfConfigured">
            <summary>
            Attempts to post a evReset event.
            </summary>
            <returns>true if the event was generated, false otherwise</returns>
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.StStopped.checkValidAndPresence">
            <summary>
            Checks if VALID is off and Carrier has changed hands. Posts evDisengage if true, evCancel if false.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.GetCarrierPresenceSignalState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.GetCarrierPlacementSignalState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.GetCarrierPresenceState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.GetCarrierClampState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.ClampCarrier">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.UnclampCarrier">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.GetCarrierPortLocation">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.MoveCarrierPort(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.CarrierPortSafetyShieldIsTripped(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.AcquireSpaceForOp(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.CarrierHandoffPort.CarrierHandoffCtrl.ReleaseSpaceForOp(System.String)">
            <inheritdoc />
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.FastPumpPressureForPump">
            <summary>
            Pressure to trigger second step of pumping - open fast pump valve
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.FastPumpHysteresisForPump">
            <summary>
            Percentage hysteresis above fast pump pressure set point for DI signal AT_FST_PMP_PRESS to turn false
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.PurgeOpenPressureForPump">
            <summary>
            Pressure to trigger fourth step of pumping - open Nitrogen for transfer
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.PurgeLevelForPump">
            <summary>
            Purge gas flow control percentage for vacuum tranfer (set point for MKS 640K)
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.TransferPressureForPump">
            <summary>
            Target pressure for pump
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.TransferHysteresisForPump">
            <summary>
            Percentage hysteresis above transfer pressure set point for DI signal AT_TRANS_PRESS to turn false
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.PumpToPressureForPump">
            <summary>
            Target pressure for pump
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.GasTypeForVent">
            <summary>
            Gas type used to vent: NITROGEN, AIR, ARGON, HYDROGEN, HELIUM, H2O
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.AtmPressureForVent">
            <summary>
            Pressure to trigger second step of venting - start gas cooling count down from rise edge at ATM pressure
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.AtmHysteresisForVent">
            <summary>
            Percentage hysteresis below ATM pressure set point for DI signal AT_ATM_PRESS to turn false
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.VentTimeAfterAtmForVent">
            <summary>
            Time delay from reaching ATM pressure to close vent valve (to compensate for gas cooling)
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.UseEqualizeValveForVent">
            <summary>
            Option whether to use the pressure equlization valve in venting if it's installed
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.EqualizeOpenDelayForVent">
            <summary>
            Time delay to open pressure equalization valve for vent from reaching ATM pressure
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.VentToPressureForVent">
            <summary>
            Target pressure for venting - slightly above 760 torr, normally
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Chamber.ChamberOpSetupData.PurgeLevelForStandby">
            <summary>
            Purge gas flow control percentage for standby (in vacuum)
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.Chamber.ChamberOpSetupData.ResetChamberOpParams">
            <summary>
            Reset all chamber operation setup parameters by loading them from cofiguration file for the module
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.FFU.FfuCtrlMode">
            <summary>
            FFU can be controlled either closing loop on differential pressure or open loop on fan power.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.FFU.FfuCtrlMode.Pressure">
            <summary>
            Closed-Loop control on differential pressure.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.FFU.FfuCtrlMode.Pwm">
            <summary>
            Open-Loop control on fan PWM. When this mode is used the alarms are disabled.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.FFU.IFfuSetup">
            <summary>
            Interface for Fan Filter Unit (FFU) control data
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.FFU.IFfuSetup.FfuType">
            <summary>
            Returns the Make.Model.Rev
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="P:BAI.Systems.Devices.FFU.IFfuSetup.NumberOfFans">
            <summary>
            Number of fans installed.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="P:BAI.Systems.Devices.FFU.IFfuSetup.FanNames">
            <summary>
            An array of fan names, such as "Fan1", . . . "Fan4"
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.GetPressureAlarmLimits(BAI.Systems.Common.AlarmLevel)">
            <summary>
            Get the threshold for differential pressure over which alarm events are fired.
            </summary>
            <param name="level">Alarm level: warning or fatal - machine stops when fatal</param>
            <returns>Lower and upper limits with unit</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.SetPressureAlarmLimits(BAI.Systems.Common.AlarmLevel,BAI.Utils.Collections.Range)">
            <summary>
            Set the threshold for differential pressure over which alarm events are fired.
            </summary>
            <param name="level">Alarm level: warning or fatal - machine stops when fatal</param>
            <param name="limits">Lower and upper limits with unit</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.GetPwmOperatingRange">
            <summary>
            Get the limit for FFU output to control fan power, normally [0, 100] %
            </summary>
            <returns>Lower, upper limits with unit</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.SetPwmOperatingRange(BAI.Utils.Collections.Range)">
            <summary>
            Set the limit for FFU output to control fan power. Sometimes, needed to clip upper limit to 60% for example.
            </summary>
            <param name="range">Lower, upper limits with unit</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.GetControlMode">
            <summary>
            Get current control mode.
            </summary>
            <returns>Control mode: differential pressure or fan PWM</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.GetControlSetpoint">
            <summary>
            Returns current control setpoint.
            </summary>
            <returns>Setpoint, such as 0.012 WG (inches of water in pressure mode) or 75% (in PWM mode)</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.ChangeControl(BAI.Systems.Devices.FFU.FfuCtrlMode,BAI.General.NumberWithUnit)">
            <summary>
            Change control mode and/or setpoints.
            </summary>
            <param name="mode">Control mode such as differential pressure or fan PWM</param>
            <param name="setpoint">Control setpoint such as 0.012 WG (inches of water in pressure mode) or 75% (in PWM mode)</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.SaveSetupData">
            <summary>
            Persist current setup data to embedded controller persistent storage.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.LoadSetupData">
            <summary>
            Load setup data from embedded controller persistent storage to embedded application.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="P:BAI.Systems.Devices.FFU.IFfuSetup.EnableAlarms">
            <summary>
            Controls whether or not alarms are generated by the FFU.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuSetup.InitializeFfuControl">
            <summary>
            Change the FFU control mode from the power-on preset to the taught operational values.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.FFU.IFfuCtrlEc">
            <summary>
            Interface for Fan Filter Unit control only implemented by EC
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuCtrlEc.ChangeControlToDefaultPwmDutyCycle">
            <summary>
            The method changes the FFU into PWM mode with the setpoint taken from EFEM.Locations.Calib.xml file (Location = "PowerOnPreset", Parameter = "PwmUpperLimit")
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.FFU.IFfuCtrl">
            <summary>
            Interface for Fan Filter Unit (FFU) control.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuCtrl.GetPressure">
            <summary>
            Get latest differential pressure sensor reading. Note value may be cached - accurate down to 1-3%, 5-10 seconds
            If GetPressure() gets called at a faster rate than 1Hz will return NaN
            </summary>
            <returns>Differential pressure</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuCtrl.GetPwm">
            <summary>
            Get latest fan PWM (pulse width modulation)
            </summary>
            <returns>Fan PWM. Note value may be cached - accurate down to 1-3%, 5-10 seconds</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuCtrl.AreAllFansOk">
            <summary>
            Get overall status of all fans. If false, can call IsFanOperating to query each fan.
            </summary>
            <returns>True if all are normal, False if at least one failed.</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuCtrl.IsFanOk(System.String)">
            <summary>
            Get status of a specific fan
            </summary>
            <param name="fan">Name of the fan such as Fan1</param>
            <returns>True if fan is normal, False if failed.</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.IFfuCtrl.GetFanRPM(System.Int32)">
            <summary>
            Get RPM of a specific fan
            </summary>
            <param name="fan">Name of the fan such as Fan1</param>
            <returns>RPM value.</returns>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="T:BAI.Systems.Devices.FFU.FfuSensorChangeHandler">
            <summary>
            Event handler for FFU measureable changes.
            </summary>
            <param name="source">EFEM.FFU1 or EFEM.FFU2</param>
            <param name="sensor">Pressure, or PWM</param>
            <param name="after">Sensor value after the change</param>
        </member>
        <member name="T:BAI.Systems.Devices.FFU.IFfuEvents">
            <summary>
            Interface for collection of events fired by FFU device.
            </summary>
            <remarks>
                <para>
                    If differential pressure goes outside of (warning, fatal) limits, alarm events will be fired.
                    If fan failed, alarm events will be fired.
                </para>
                <para>
                    The values are sampled every 5 - 10 seconds.
                    The events will only be raised if the sampled value is roughly 1% - 3% different from the last
                    value sent.
                </para>
            </remarks>
        </member>
        <member name="E:BAI.Systems.Devices.FFU.IFfuEvents.FfuPressureChanged">
            <summary>
            Differential pressure change event.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.FFU.IFfuEvents.FfuPwmChanged">
            <summary>
            Fan PWM change event.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.FFU.IFfu">
            <summary>
            Interface to represent Fan Filter Unit device's entire Op API
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.#ctor(System.String,System.String)">
            <summary>
            FFU proxy constructor
            </summary>
            <param name="ffuName">Name of FFU device such as "FFU1"</param>
            <param name="clientName">Name of client, such as "EFEM"</param>
        </member>
        <member name="P:BAI.Systems.Devices.FFU.FfuRemoteProxy.FfuType">
            <inheritdoc />
        </member>
        <member name="P:BAI.Systems.Devices.FFU.FfuRemoteProxy.NumberOfFans">
            <inheritdoc />
        </member>
        <member name="P:BAI.Systems.Devices.FFU.FfuRemoteProxy.FanNames">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.GetPressureAlarmLimits(BAI.Systems.Common.AlarmLevel)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.SetPressureAlarmLimits(BAI.Systems.Common.AlarmLevel,BAI.Utils.Collections.Range)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.GetPwmOperatingRange">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.SetPwmOperatingRange(BAI.Utils.Collections.Range)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.GetControlMode">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.GetControlSetpoint">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.ChangeControl(BAI.Systems.Devices.FFU.FfuCtrlMode,BAI.General.NumberWithUnit)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.SaveSetupData">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.LoadSetupData">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.GetPressure">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.GetPwm">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.AreAllFansOk">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.FFU.FfuRemoteProxy.IsFanOk(System.String)">
            <inheritdoc />
        </member>
        <member name="E:BAI.Systems.Devices.FFU.FfuRemoteProxy.FfuPressureChanged">
            <inheritdoc />
        </member>
        <member name="E:BAI.Systems.Devices.FFU.FfuRemoteProxy.FfuPwmChanged">
            <inheritdoc />
        </member>
        <member name="E:BAI.Systems.Devices.FFU.FfuRemoteProxy.AlarmGenerated">
            <inheritdoc />
        </member>
        <member name="T:BAI.Systems.Devices.Ionizer.IIonizerOp">
            <summary>
            Methods for controling the inonizer.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.Ionizer.IIonizerOp.SetState(System.Boolean)">
            <summary>
            Turn on/off the ionizer.
            </summary>
            <param name="bOn">Turn on or off</param>
        </member>
        <member name="M:BAI.Systems.Devices.Ionizer.IIonizerOp.IsOn">
            <summary>
            Indicates whether the ionizer is on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.Ionizer.IIonizerOp.IsInFaultState">
            <summary>
            Indicates whether the ionizer is in a faulted state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.Ionizer.IIonizerOp.NeedsMaintenance">
            <summary>
            Indicates whether the inionize requires maintenance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.Ionizer.IIonizerOp.SelfTest">
            <summary>
            Run self test. The inionizer will raise an alarm if there is a problem.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.Ionizer.IIonizerCtrl">
            <summary>
            Interface to control ionizer.
            </summary>
            <remarks>
            <see cref="M:BAI.Systems.Devices.IDevice.Initialize"/> should be called when the tool starts up.
            Fatal alarms are raised when the ionizer is in a fault state.
            Warning alarms are raised when the ionizer requires maintenance.
            </remarks>
        </member>
        <member name="T:BAI.Systems.Devices.LightTower.LightTowerComponent">
            <summary>
            Represents the indicators on a light tower.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LightTower.LightTowerSignalState">
            <summary>
            Represents the state of one indicator on the light tower device.
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.LightTower.LightTowerSignalState.Signal">
            <summary>
            Which indicator.
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.LightTower.LightTowerSignalState.State">
            <summary>
            The state of the dinicator.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LightTower.ILightTowerCtrl">
            <summary>
            Control the light tower on the tool.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LightTower.ILightTowerCtrl.SetLightTowerComponentState(BAI.Systems.Devices.LightTower.LightTowerComponent,BAI.Systems.Common.UiIndicatorState)">
            <summary>
            Set the state of one indicator on the light tower.
            </summary>
            <param name="signal">Which signal to change.</param>
            <param name="state">The new state for the signal.</param>
        </member>
        <member name="M:BAI.Systems.Devices.LightTower.ILightTowerCtrl.SetLightTowerState(BAI.Systems.Devices.LightTower.LightTowerSignalState[])">
            <summary>
            Set the state of multiple indicators on the light tower.
            </summary>
            <param name="state">Multiple light tower components to update.</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ILoadPortMotionEvents">
            <summary>
            Event interface for load port axis updates, including clamp, shuttle, key, vertical and mapper axes.
            When an axis is commanded to execute a move, the start, end events are defined, and a few in between.
            These events are needed by other parts of the API, including CarrierPortPurge operations.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.PurgeRecipeType">
            <summary>
            Purge recipe types available for execution.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.PurgeRecipeType.NozzlePurge">
            <summary>
            Short, clean up purge.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.PurgeRecipeType.PreProcessingPurge">
            <summary>
            Limited, pre processing purge.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.PurgeRecipeType.PreProcessingMaintenancePurge">
            <summary>
            Unlimited, pre processing purge.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.PurgeRecipeType.ProcessingPurge">
            <summary>
            Unlimited, processing purge.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.PurgeRecipeType.PostProcessingPurge">
            <summary>
            Limited, post processing purge.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.PurgeRecipeType.PostProcessingMaintenancePurge">
            <summary>
            Unlimited, post processing purge.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.NozzlePurgeMode">
            <summary>
            Determines how the NozzlePurge will be executed.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.NozzlePurgeMode.Auto">
            <summary>
            Automatically execute nozzle purge during the next E84 handoff.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.NozzlePurgeMode.Immediate">
            <summary>
            Execute nozzle purge immediately, such as before a PGV handoff.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.PurgeRecipeStatusChangedHandler">
            <param name="device">The name of the device, such as "LoadPortA".</param>
            <param name="recipe">The purge recipe which has a new status.</param>
            <param name="status">One of the following: Started, Completed, Error.</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.PurgeRecipeChangeHandler">
            <param name="loadport">The name of the LoadPort, such as "LoadPortA".</param>
            <param name="recipeEnded">The purge recipe that has ended.</param>
            <param name="recipeStarted">The purge recipe that has started.</param>
            <param name="frontFlow">The flow rate on the front MFC.</param>
            <param name="rearFlow">The flow rate on the rear MFC.</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeEvents">
            <summary>
            Events for purge recipes.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeEvents.PurgeRecipeStatusChanged">
            <summary>
            Call back for events with update about the status of the Purge Recipe that is being executed
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeEvents.PurgeRecipeChanged">
            <summary>
            Call back for events to update about the transition between Purge Recipes and the flow rate values when the transition occurs
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeEvents.PurgeRecipeFailed">
            <summary>
            Call back for events with update if a purge recipe has failed
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeOp">
            <summary>
            High level control of purge recipe automation.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeOp.NozzlePurge(BAI.Systems.Devices.LoadPort.NozzlePurgeMode)">
            <summary>
            Signal that a port is ready to receive a purge carrier and do nozzle purge during handoff.
            This must be called before EnablePurgeRecipeSequence.
            </summary>
            <param name="nozzlePurgeMode">Either Auto, for nozzle purge during E84 handoff, or Immediate, for nozzle purge before a PGV handoff.</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeOp.EnablePurgeRecipeSequence(System.Boolean,System.Boolean)">
            <summary>
            Enable purge to execute during the standard API carrier operations. Must be called after ClampCarrier and before the carrier door is opened.
            </summary>
            <param name="doPreProcesPurge">Option to enable pre-process purge.</param>
            <param name="doMaintenancePurge">Option to enable pre-process maintenance purge after pre-process purge is complete.</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeOp.EnablePurgeRecipeSequence(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable purge to execute during the standard API carrier operations. Must be called after ClampCarrier and before the carrier door is opened.
            </summary>
            <param name="doPreProcesPurge">Option to enable pre-process purge.</param>
            <param name="doMaintenancePurge">Option to enable pre-process maintenance purge after pre-process purge is complete.</param>
            <param name="doPostProcessPurge">Option to enable post-process purge.</param>
            <param name="doPostProcessMaintPurge">Option to enable post-process maintenance purge after post-process purge is complete.</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeOp.EnablePurgeRecipeSequence(System.String[],System.Boolean,System.Boolean)">
            <summary>
            Enable purge to execute during the standard API carrier operations. Must be called after ClampCarrier and before the carrier door is opened.
            </summary>
            <param name="controllerName">Option to tell the RecipeManager what nozzles to command.</param>
            <param name="doPreProcesPurge">Option to enable pre-process purge.</param>
            <param name="doMaintenancePurge">Option to enable pre-process maintenance purge after pre-process purge is complete.</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeOp.EnablePurgeRecipeSequence(System.String[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enable purge to execute during the standard API carrier operations. Must be called after ClampCarrier and before the carrier door is opened.
            </summary>
            <param name="controllerName">Option to tell the RecipeManager what nozzles to command.</param>
            <param name="doPreProcesPurge">Option to enable pre-process purge.</param>
            <param name="doMaintenancePurge">Option to enable pre-process maintenance purge after pre-process purge is complete.</param>
            <param name="doPostProcessPurge">Option to enable post-process purge.</param>
            <param name="doPostProcessMaintPurge">Option to enable post-process maintenance purge after post-process purge is complete.</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeOp.CancelPurgeRecipeSequence">
            <summary>
            Abort a purge in progress. 
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeCtrl">
            <summary>
            High level control of individual purge recipe activation.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeRecipeCtrl.ExecuteSinglePurgeRecipe(BAI.Systems.Devices.LoadPort.PurgeRecipeType)">
            <summary>
            Immediately run a specified purge recipe on a specified loadport. This will be rejected if a recipe sequence was previously begun with EnablePurgeRecipeSequence on the port.
            </summary>
            <param name="purgeRecipeType">Which recipe to execute.</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.FixloadLoadPortRemoteImp.getStatSum(BAI.Systems.Devices.LoadPort.Internal.Fixload.StatFxl@,BAI.Systems.Devices.LoadPort.Internal.Fixload.StatPdo@,BAI.Systems.Devices.LoadPort.Internal.Fixload.StatLp@,BAI.Systems.Devices.LoadPort.Internal.Fixload.StatCip@)">
            <summary>
            Only the 3 LSBs of <paramref name="lp"/> are filled in.
            </summary>
            <param name="fxl"></param>
            <param name="pdo"></param>
            <param name="lp"></param>
            <param name="cip"></param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.FixloadLoadPortRemoteImp.cipBitToHighLow(BAI.Systems.Devices.LoadPort.Internal.Fixload.StatCip,BAI.Systems.Devices.LoadPort.Internal.Fixload.StatCip)">
            <summary>
            Tests if <paramref name="testValue"/> is set in <paramref name="bitfield"/>.
            </summary>
            <param name="bitfield"></param>
            <param name="testValue"></param>
            <returns>Returns High if the bit is set, Low otherwise.</returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.IReticleLoadPortCtrl.GetSubCarrierDoorClosedSignals">
            <summary>
            Get the box door closed signal states of all of the the box door closed sensors.
            </summary>
            <returns>
            Array containing the box door closed signal states of the box door closed sensors.
            </returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.IReticleLoadPortCtrl.GetSubCarrierPlacementSignals">
            <summary>
            Get the box placement signal states of all of the the box placement sensors.
            </summary>
            <returns>
            Array containing the box placed signal states of the box placed sensors.
            </returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.IReticleLoadPortCtrl.GetSubstratePresenceSignals">
            <summary>
            Get the reticle presence signal states of all of the the reticle presence sensors.
            </summary>
            <returns>
            Array containing the reticle presence signal states of the reticle prresence sensors.
            </returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.IReticleLoadPortCtrl.GetAccessDoorLockedSignal">
            <summary>
            Get the output signal state for the operator access door lock.
            </summary>
            <returns>
            State of the output signal that controls the operator access door lock.
            </returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.IReticleLoadPortCtrl.GetAccessDoorClosedSignal">
            <summary>
            Get the door closed signal state for the operator acess door.
            </summary>
            <returns>State of the door closed signal of the operator access door.</returns>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.IReticleLoadPortSignalEvents.SubCarrierPlacementSignalChanged">
            <summary>
            This event is raised when a box placement signal has changed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.IReticleLoadPortSignalEvents.SubCarrierDoorClosedSignalChanged">
            <summary>
            This event is raised when a box door closed signal has changed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.IReticleLoadPortSignalEvents.SubstratePresenceSignalChanged">
            <summary>
            This event is raised when a reticle present signal has changed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.IReticleLoadPortSignalEvents.AccessDoorLockedSignalChanged">
            <summary>
            This event is raised when the operator access door locked output signal has changed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.IReticleLoadPortSignalEvents.AccessDoorClosedSignalChanged">
            <summary>
            This event is raised when the operator access door closed signal has changed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ISpinLoadPortEvents.SpinOrientationChanged">
            <summary>
            Event which is fired whenever the Spin Orientation changes.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ISpinLoadPortCtrl.ReadyToDock">
            <summary>
            Checks if the Load Port is ready to Dock.
            </summary>
            <returns>
            Returns true if the Load Port can be docked and false otherwise.
            </returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ISpinLoadPortCtrl.ReadyToRemove">
            <summary>
            Checks if the Load Port can be removed.
            </summary>
            <returns>
            Returns true if the Load Port can be removed and false otherwise.
            </returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ISpinLoadPortCtrl.ReadyToSpin">
            <summary>
            Checks if the Load Port can be spun.
            </summary>
            <returns>
            Returns true if the Load Port can be spun and false otherwise.
            </returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ISpinLoadPortCtrl.GetSpinOrientation">
            <summary>
            Gets the current spin orientation of the Theta Axis.
            </summary>
            <returns>
            State of the current spin orientation of the Theta Axis
            </returns>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierHandlingMode.Fixed">
            <summary>
            The loadport will automatically determine carrier properties.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierHandlingMode.SetProperties">
            <summary>
            The carrier properties must be set every time a carrier arrives.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ICarrierHandlingCtrl">
            <summary>
            Methods for querying info pads and changing how carriers are handled.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierHandlingCtrl.GetCarrierInfoPadsData">
            <summary>
            Gets the current state of the infopad buttons.
            </summary>
            <returns />
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierHandlingCtrl.GetCarrierHandlingMode">
            <summary>
            Gets how the load port determines carrier properties.
            </summary>
            <returns />
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierHandlingCtrl.SetCarrierHandlingMode(BAI.Systems.Devices.LoadPort.CarrierHandlingMode)">
            <summary>
            Sets how the load port determines carrier properties.
            </summary>
            <param name="mode" />
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierHandlingCtrl.GetCarrierProperties">
            <summary>
            Returns the properties of the current carrier.
            </summary>
            <returns />
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierHandlingCtrl.SetCarrierProperties(BAI.Systems.Common.Carriers.CarrierProperties)">
            <summary>
            If the carrier handleing mode is <see cref="F:BAI.Systems.Devices.LoadPort.CarrierHandlingMode.Fixed" />,
            use this method after each carrier arrives to set its properties.
            </summary>
            <param name="carrier" />
            <exception cref="T:System.Exception">Thrown if </exception>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.TurnOnPurgeValve(System.String[])">
            <summary>
            Turns on Purge valve for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Checks if nozzle is up and then turns on the purge valve:
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            
            string[] mfcList = {"Rear"};
            if (l.GetPurgeNozzleState("Rear") == NozzleState.Raised))
            	l.TurnOnPurgeValve (mfcList);
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.TurnOffPurgeValve(System.String[])">
            <summary>
            Turns off Purge valve for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Turns off the purge valve:
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            
            string[] mfcList = {"Rear"};
            l.TurnOffPurgeValve (mfcList);
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.RaisePurgeNozzle(System.String[])">
            <summary>
            Raises the nozzle for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <remarks>
            This method can be called only when the LoadPort is docked and door is closed
            </remarks>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Raises the nozzle:
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            
            l.ClampCarrier()
            l.DockCarrier()
            
            string[] mfcList = {"Rear"};
            l.RaisePurgeNozzle (mfcList);
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.LowerPurgeNozzle(System.String[])">
            <summary>
            Lowers the nozzle for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Lowers the nozzle:
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            
            string[] mfcList = {"Rear"};
            l.LowerPurgeNozzle (mfcList);
            
            l.UndockCarrier()
            l.UnclampCarrier()
            
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.IsPurgeOn(System.String)">
            <summary>
            Checks if Purge valve is on or not for <paramref name="controllerName"/>
            </summary>
            <remarks>
            This method retruns cached state of the valve.
            </remarks>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Checks if valve is on or not and returns true for on and false for off.
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            string[] mfcList = {"Rear"};
            
            if (l.IsPurgeOn("Rear") == false)
            	l.TurnOnPurgeValve (mfcList);
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.GetPurgeNozzleState(System.String)">
            <summary>
            Retruns nozzle state for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <remarks>
            This method returns cached state of the nozzle. It may be: Error, Unknown , Lowered, Raised
            </remarks>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Checks if nozzle is raised or not and return the NozzleState state.
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            string[] mfcList = {"Rear"};
            
            if (l.GetPurgeNozzleState("Rear") != NozzleState.Raised)
            	l.RaisePurgeNozzle (mfcList);
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.ReadCurrentFlowRate(System.String)">
            <summary>
            Reads the flow rate from MFC and returns it for <paramref name="controllerName"/>
            </summary>
            <remarks>
            This method returns actual value from MFC
            </remarks>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Get current flow rate for rear MFC on LoadPortA
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            l.ReadCurrentFlowRate ("Rear");
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.ClearAlarmMassFlowController(System.String[])">
            <summary>
            Resets the error state of MFC for <paramref name="controllerName"/>
            </summary>
            <remarks>
            </remarks>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Reset rear MFC on LoadPortA
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            string[] mfcList = {"Rear"};
            
            l.ClearAlarmMassFlowController (mfcList);
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.InitializeMassFlowController(System.String[])">
            <summary>
            Initializes MFC for <paramref name="controllerName"/>
            </summary>
            <remarks>
            </remarks>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Initializes rear MFC on LoadPortA
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            string[] mfcList = {"Rear"};
            
            l.InitializeMassFlowController (mfcList);
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.ResetMassFlowController(System.String[])">
            <summary>
            Restarts MFC for <paramref name="controllerName"/>
            </summary>
            <remarks>
            </remarks>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Restart rear MFC on LoadPortA
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            string[] mfcList = {"Rear"};
            
            l.ResetMassFlowController (mfcList);
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeCtrl.GetMassFlowControllerState(System.String)">
            <summary>
            Retruns state for <paramref name="controllerName"/>
            </summary>
            <remarks>
            The state is dependent on MFC type. It may be: Uninitialized, Idle, Operating, Error
            </remarks>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <example>
            Returns rear MFC state on LoadPortA
            <code language="cs">
            IEfem o;
            ILoadPortCtrl l = o.GetLoadPortCtrl("PortA");
            l.GetMassFlowControllerState ("Rear");
            </code>
            </example>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.SetFlowRate(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Sets flow rate for the named MFC controller to a value in <paramref name="flowRateSLM"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <param name="flowRateSLM">0 - 180 SLM in NumberWithUnits </param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.GetFlowRate(System.String)">
            <summary>
            Returns flow rate value for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.SetRampUpTime(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Sets up Purge ramp up time for the named MFC controller to a value in <paramref name="rampUpTimeSecs"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <param name="rampUpTimeSecs">ramp up time in NumberWithUnits </param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.GetRampUpTime(System.String)">
            <summary>
            Returns ramp up time in seconds for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.SetRampDownTime(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Sets up Purge ramp down time for the named MFC controller to a value in <paramref name="rampDownTimeSecs"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <param name="rampDownTimeSecs">ramp down time in NumberWithUnits </param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.GetRampDownTime(System.String)">
            <summary>
            Returns ramp down time in seconds for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.SetPurgeDuration(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Sets up Purge duration for the named MFC controller to a value in <paramref name="purgeDurationSecs"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <param name="purgeDurationSecs">Purge duration in NumberWithUnits </param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.GetPurgeDuration(System.String)">
            <summary>
            Returns Purge duration time in seconds for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.SetPurgeTolerance(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Sets up the tolerance in percentage of flow rate set value. At Limit state is reached when inside the tolerance
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <param name="tolerancePercent">Tolerance in NumberWithUnits </param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.GetPurgeTolerance(System.String)">
            <summary>
            Returns tolerance in percentage in SLM unit for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.SetNozzleOption(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Sets up the nozzle option, 0: Lower nozzle before starting purge, 1: Raise nozzle before starting purge 
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
            <param name="nozzleOption">NozzleOption in NumberWithUnits </param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierPurgeSetup.GetNozzleOption(System.String)">
            <summary>
            Returns nozzle option for the named mfc controller in <paramref name="controllerName"/>
            </summary>
            <param name="controllerName">MFC controller name e.g. Rear or Front</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.PurgeMfcStateHandler">
            <summary>
            Call back for events to update MFC controller state
            </summary>
            <param name="controllerName">MFC controller name e.g. Front or Rear</param>
            <param name="controllerState">Controller state (Uninitialized, Idle, Operating or Error)</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.PurgeNozzlesStateHandler">
            <summary>
            Call back for events to update nozzles position
            </summary>
            <param name="controllerName">MFC controller name e.g. Front or Rear</param>
            <param name="nozzleState">Nozzle state (Lowered, Raised, Unknown or Error)</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.PurgeValveStateHandler">
            <summary>
            Call back for events to update MFC valve state
            </summary>
            <param name="controllerName">MFC controller name e.g. Front or Rear</param>
            <param name="valveName">MFC valve name</param>
            <param name="valveState">Valve state (Opened or Closed)</param>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ICarrierPurgeEvents.PurgeMfcStateChanged">
            <summary>
            Call back for events to update MFC controller state
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ICarrierPurgeEvents.PurgeNozzlesStateChanged">
            <summary>
            Call back for events to update nozzles position
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ICarrierPurgeEvents.PurgeValveStateChanged">
            <summary>
            Call back for events to update MFC valve state
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierInfoPad.E">
            <summary>
            Only available on 450mm loadports.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierInfoPad.F">
            <summary>
            Only available on 450mm loadports.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierInfoPadsData.#ctor(BAI.Systems.Common.HighLowState,BAI.Systems.Common.HighLowState,BAI.Systems.Common.HighLowState,BAI.Systems.Common.HighLowState)">
            <summary>
            Creates a CarrierInfoPadsData for 300m load ports.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierInfoPadsData.#ctor(BAI.Systems.Common.HighLowState,BAI.Systems.Common.HighLowState,BAI.Systems.Common.HighLowState,BAI.Systems.Common.HighLowState,BAI.Systems.Common.HighLowState,BAI.Systems.Common.HighLowState)">
            <summary>
            Creates a CarrierInfoPadsData for 450mm load ports.
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.LoadPort.CarrierInfoPadsData.ButtonBitField">
            <summary>
            The state of the buttons, where the least significant bit is button A.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.CarrierManualHandoff">
            <summary>
            To be filled in if there is any
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierManualHandoff.GetManualHandoffLedState(BAI.Systems.Devices.LoadPort.ManualHandoffLed)">
            <summary>
            Issue GET_LED to get the LED's state
            </summary>
            <returns>UiIndicatorState</returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierManualHandoff.SetManualHandoffLedState(BAI.Systems.Devices.LoadPort.ManualHandoffLed,BAI.Systems.Common.UiIndicatorState)">
            <summary>
            Issue SET_LED to set LED state
            </summary>
            <param name="led"></param>
            <param name="state"></param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierManualHandoff.ManualHandoffButtonIsEnabled(BAI.Systems.Devices.LoadPort.ManualHandoffButton)">
            <summary>
            Check if manual left button or manual right button is enabled or not
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierManualHandoff.EnableManualHandoffButton(BAI.Systems.Devices.LoadPort.ManualHandoffButton)">
            <summary>
            Ensable either manual left button or manual right button to report events when pressed
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierManualHandoff.DisableManualHandoffButton(BAI.Systems.Devices.LoadPort.ManualHandoffButton)">
            <summary>
            Disable either manual left button or manual right button to send events when pressed
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierManualHandoff.GetCarrierPresenceSignalState">
            <summary>
            These methods are implemented by CarrierTransfer class. The following are just dummies.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ManualHandoffLed">
            <summary>
            Manual load/unload prompt light indicators on carrier advance plate.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffCtrl">
            <summary>
            Functions for interfacing with operators manually loading carriers on load ports.
            </summary>
            <remarks>
            Vision LEAP only has a single button. The single button is connected to both logical buttons.
            This means if you use <see cref="M:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffCtrl.EnableManualHandoffButton(BAI.Systems.Devices.LoadPort.ManualHandoffButton)"/>
            to enable the left button, you will get one <see cref="E:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffEvents.ManualHandoffButtonPushed"/>
            event when the physical button is pressed. If you enable both left and right, you will get two
            <see cref="E:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffEvents.ManualHandoffButtonPushed"/> events when the button is pushed, one for
            each logical button.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffCtrl.GetManualHandoffLedState(BAI.Systems.Devices.LoadPort.ManualHandoffLed)">
            <summary>
            Query the current status of the manual load LED.
            </summary>
            <param name="led">Which LED to query.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffCtrl.SetManualHandoffLedState(BAI.Systems.Devices.LoadPort.ManualHandoffLed,BAI.Systems.Common.UiIndicatorState)">
            <summary>
            Set the manual load LED to communicate with the operator.
            </summary>
            <param name="led">Which LED to change.</param>
            <param name="state">The new state of the LED.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffCtrl.ManualHandoffButtonIsEnabled(BAI.Systems.Devices.LoadPort.ManualHandoffButton)">
            <summary>
            Query if event raising is enabled for the button.
            </summary>
            <param name="button">Which button to query.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffCtrl.EnableManualHandoffButton(BAI.Systems.Devices.LoadPort.ManualHandoffButton)">
            <summary>
            Enable event raising for the manual handoff button.
            </summary>
            <param name="button">Which button to enable.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffCtrl.DisableManualHandoffButton(BAI.Systems.Devices.LoadPort.ManualHandoffButton)">
            <summary>
            Disable event raising for the manual handoff button.
            </summary>
            <param name="button">Which button to disable.</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ManualHandoffButtonPushedEventHandler">
            <param name="loadport">The name of the loadport, such as "PortA".</param>
            <param name="button">Which button was pushed.</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ManualHandoffButtonReleasedEventHandler">
            <param name="loadport">The name of the loadport, such as "PortA".</param>
            <param name="button">Which button was released.</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffEvents">
            <summary>
            Events for monitoring the manual handoff button on loadports.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffEvents.ManualHandoffButtonPushed">
            <summary>
            Raised when the manual handoff button is pushed.
            </summary>
            <remarks>
            This event will not be raised unless it is enabled with
            <see cref="M:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffCtrl.EnableManualHandoffButton(BAI.Systems.Devices.LoadPort.ManualHandoffButton)"/>.
            </remarks>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffEvents.ManualHandoffButtonReleased">
            <summary>
            Raised when the manual handoff button is released.
            </summary>
            <remarks>
            This event will not be raised unless it is enabled with
            <see cref="M:BAI.Systems.Devices.LoadPort.ICarrierManualHandoffCtrl.EnableManualHandoffButton(BAI.Systems.Devices.LoadPort.ManualHandoffButton)"/>.
            </remarks>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierTransfer.PODPOS_INDX">
            <summary>
            Define the positions of PODPOS (dock/undock) within FSD0 for fsr fc=0 and APHD (clamp/unclamp) within FSD8
            for fsr fc=8
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierTransfer.GetCarrierClampState">
            <summary>
            Issue GETSTATUS with FC=8 to get the carrier lock/unlock status
            </summary>
            <returns>LockState</returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierTransfer.GetCarrierDockState">
            <summary>
            Issue GETSTATUS with FC=0 to get the carrier dock/undock status
            </summary>
            <returns>CarrierDockState</returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierTransfer.ClampCarrier">
            <summary>
            Issue CLAMP to clamp a carrier
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierTransfer.UnclampCarrier">
            <summary>
            Issue UNCLAMP to unclamp a carrier
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierTransfer.DockCarrier">
            <summary>
            Issue DOCK to dock a carrier
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.CarrierTransfer.UndockCarrier">
            <summary>
            Issue UNDOCK to undock a carrier
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.CarrierDockState">
            <summary>
            The position of a the FOUP advance plate of the load port.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierDockState.Error">
            <summary>
            The sensors report contradictory information.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierDockState.Unknown">
            <summary>
            The state of the foup advance is not known.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierDockState.Undocked">
            <summary>
            The FOUP advance is not docked. Carriers can be removed or placed in this state.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierDockState.Between">
            <summary>
            The FOUP advance is moving between the docked and undocked positions.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierDockState.Docked">
            <summary>
            The FOUP advanced is docked. Carriers can be opened and mapped in this position.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierDockState.Rotate">
            <summary>
            In a SpinLoad loadport, the foup advance is at the position where it can spin.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.CarrierDockState.Handoff">
            <summary>
            In a SpinLoad loadport, the foup advance is at the position where the operator can remove the door.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.CarrierDoorChangeHandler">
            <param name="device">The name of the device, such as "PortA".</param>
            <param name="before">one of the following: Open, Closed, Opening, or Closing</param>
            <param name="after">one of the following: Open, Closed, Opening, or Closing</param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ILoadPortCtrl">
            <summary>
            Methods for control a loadport.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ILoadPortCtrl.GetLoadPortStatus">
            <summary>
            Queries several different states of the loadport at once.
            </summary>
            <returns>A collection of different states of the loadport.</returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ILoadPortCtrl.HomeLoadPort">
            <summary>
            Homes the load port. May fail if the robot has not been homed.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ILoadPortEvents">
            <summary>
            Events for monitoring the state of the loadport.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.LoadPort.ILoadPortEvents.CarrierDoorStateChanged">
            <summary>
            The before and after arguments will be one of the following: Open, Closed, Opening, or Closing.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.GetCarrierPresenceSignalState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.GetCarrierPlacementSignalState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.GetCarrierPresenceState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.GetCarrierClampState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.ClampCarrier">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.UnclampCarrier">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.GetCarrierPortLocation">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.MoveCarrierPort(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.CarrierPortSafetyShieldIsTripped(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.AcquireSpaceForOp(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.ReleaseSpaceForOp(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.GetCarrierInfoPadsData">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.GetCarrierHandlingMode">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.SetCarrierHandlingMode(BAI.Systems.Devices.LoadPort.CarrierHandlingMode)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.GetCarrierProperties">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortRemoteProxy.SetCarrierProperties(BAI.Systems.Common.Carriers.CarrierProperties)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortUiCtrl.GetLoadPortStdLedState(BAI.Systems.Devices.LoadPort.LoadPortStdLed)">
            <summary>
            Issue GET_LED to get the LED's state
            </summary>
            <returns>UiIndicatorState</returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortUiCtrl.GetLoadPortCustomLedState(BAI.Systems.Devices.LoadPort.LoadPortCustomLed)">
            <summary>
            Issue GET_LED to get the LED's state
            </summary>
            <returns>UiIndicatorState</returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.LoadPortUiCtrl.SetLoadPortCustomLedState(BAI.Systems.Devices.LoadPort.LoadPortCustomLed,BAI.Systems.Common.UiIndicatorState)">
            <summary>
            Issue SET_LED to set LED state
            </summary>
            <param name="led"></param>
            <param name="state"></param>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.LoadPortCustomLed">
            <summary>
            The user-programmable indicators on a loadport.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.LoadPortCustomLed.LED9_BTN1">
            <summary>
            Manual load indicator.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.LoadPort.LoadPortCustomLed.LED10_BTN2">
            <summary>
            Manual load indicator.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.LoadPortStdLed">
            <summary>
            The standard indicators that are not user controllable.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.LoadPort.ILoadPortUiCtrl">
            <summary>
            Control the indicators on the loadport.
            On Spartan these indicators are LEDs, on Vision LEAP the indicators represented on the LCD screen.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ILoadPortUiCtrl.GetLoadPortStdLedState(BAI.Systems.Devices.LoadPort.LoadPortStdLed)">
            <summary>
            Query the current state of a standard indicator.
            </summary>
            <param name="led">Which LED to query.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ILoadPortUiCtrl.GetLoadPortCustomLedState(BAI.Systems.Devices.LoadPort.LoadPortCustomLed)">
            <summary>
            Query the current state of a custom indicator.
            </summary>
            <param name="led">Which LED to query.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.LoadPort.ILoadPortUiCtrl.SetLoadPortCustomLedState(BAI.Systems.Devices.LoadPort.LoadPortCustomLed,BAI.Systems.Common.UiIndicatorState)">
            <summary>
            Set a custom indicator.
            </summary>
            <remarks>
            For Vision LEAP, the indicator must be configured as "External" to be controlled by this method.
            </remarks>
            <param name="led">Which LED to change.</param>
            <param name="state">The new state for the LED.</param>
        </member>
        <member name="M:BAI.Systems.Devices.TeachSafetyController.IModuleSafetyControlModeOp.GetModuleSafetyControlMode">
            <summary>
            Gets the current status of the safety control mode (Auto, Service, Stop, Unknown)
            </summary>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Devices.TeachSafetyController.ModuleSafetyControlModeHandler">
            <param name="before">The previous state of the safety control mode.</param>
            <param name="after">The new state of the safey control mode.</param>
        </member>
        <member name="E:BAI.Systems.Devices.TeachSafetyController.IModuleSafetyControlModeEvents.ModuleSafetyControlModeChanged">
            <summary>
            Raised when the safety control mode changes
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.TeachSafetyController.ResetButton.ResetButtonDelegate">
            <param name="source">The name of the module that generated the alarm.</param>
            <param name="message">A message describing the event cause.</param>
        </member>
        <member name="T:BAI.Systems.Devices.TeachSafetyController.ResetButton.IResetButtonEvents">
            <summary>
            Contains events for subscribing to ResetButton alarms.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.TeachSafetyController.ResetButton.IResetButtonEvents.ResetButtonPressed">
            <summary>
            Raised when ResetButton was pressed.
            </summary>
        </member>
        <member name="E:BAI.Systems.Devices.TeachSafetyController.ResetButton.IResetButtonEvents.ResetButtonNeedsToBePressed">
            <summary>
            Raised when the ResetButton needs to be pressed.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignmentExceededRMAXException.#ctor(System.String,System.UInt32,System.String,System.Exception)">
            <summary>
            Full constructor - all other constructors call the full constructor
            </summary>
            <param name="source">source of exception - normally use the convention module.device.object. Required for execution exceptions.</param>
            <param name="errorcode">Error type unique identifier.</param>
            <param name="message">error message</param>
            <param name="innerException">optional inner exception if not null</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteProxy.AlignWafer(BAI.Systems.Common.WaferAlignFeature,System.Double,System.String)">
            <summary>
            Align wafer on specified wafer aligner with to specified robot (end effecter)
            </summary>
            <param name="feature"></param>
            <param name="angleDegree"></param>
            <param name="endEffecter">Robot end effecter name such as "EFEM.WaferEngine.EE1", "AT.WaferEngine.EE2"</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteProxy.MapWaferPresenceOnHost(System.String)">
            <summary>
            Detect wafer presence on a given host
            </summary>
            <param name="host">String specific enough to uniquely identiy a host</param>
            <returns>Presence or absence from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteProxy.MapWaferPresence(System.String)">
            <summary>
            Detect wafer presence on a group of hosts
            </summary>
            <param name="hostSearchString">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from hardware detection</returns>
        </member>
        <member name="P:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteProxy.TimeoutForAlignWafer">
            <inheritdoc />
        </member>
        <member name="P:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteProxy.EnableMultipleNotchSearch">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteProxy.ResetWaferAlignOpParams">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteImp.AlignWafer(BAI.Systems.Common.WaferAlignFeature,System.Double)">
            <summary>
            Align wafer for wafer aligners without any buffering capability
            </summary>
            <param name="feature"></param>
            <param name="angleDegree"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteImp.AlignWafer(BAI.Systems.Common.WaferSize,BAI.Systems.Common.WaferAlignFeature,System.Double)">
            <summary>
            Align wafer for wafer aligners without any buffering capability
            </summary>
            <param name="size"></param>
            <param name="feature"></param>
            <param name="angleDegree"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteImp.AlignWafer(BAI.Systems.Common.WaferAlignFeature,System.Double,System.String)">
            <summary>
            Align wafer on specified wafer aligner with to specified robot (end effecter)
            </summary>
            <param name="feature"></param>
            <param name="angleDegree"></param>
            <param name="endEffecter">Robot end effecter name such as "EFEM.WaferEngine.EE1", "AT.WaferEngine.EE2"</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteImp.MapWaferPresenceOnHost(System.String)">
            <summary>
            Detect wafer presence on a given host
            </summary>
            <param name="host">String specific enough to uniquely identiy a host</param>
            <returns>Presence or absence from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteImp.MapWaferPresence(System.String)">
            <summary>
            Detect wafer presence on a group of hosts
            </summary>
            <param name="hostSearchString">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteImp.GetAlignmentResult">
            <summary>
            Returns wafer misalignment data for last wafer aligned
            </summary>
            <returns></returns>
        </member>
        <member name="P:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteImp.TimeoutForAlignWafer">
            <inheritdoc />
        </member>
        <member name="P:BAI.Systems.Devices.WaferAligner.WaferAlignerRemoteImp.EnableMultipleNotchSearch">
            <inheritdoc />
        </member>
        <member name="T:BAI.Systems.Devices.WaferAligner.IWaferAlignBufferCtrl">
             <summary>
             For wafer aligners with buffering slots. The EG300X model for example has two buffer slots.
             Transfer wafer between wafer aligner chuck and wafer aligner buffers.
             </summary>
             <remarks>
             Only applicable to wafer aligners with buffers such as the EG-300.
            
             A buffered wafer aligner has three wafer hosts
                 EFEM.WaferAligner.Slot1 - Lower buffer slot, EFEM robot places wafer on   this slot for   alignment
                 EFEM.WaferAligner.Slot2 - Upper buffer slot, EFEM robot picks  wafer from this slot after alignment
                 EFEM.WaferAligner.Chuck - Picks wafer from Slot1, aligns it, places wafer to Slot2  after alignment
             </remarks>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignBufferCtrl.GetWaferFromAlignmentBuffer(System.String)">
            <summary>
            Tranfer wafer on alignment buffer to aligner chuck
            </summary>
            <param name="bufferHost">Source buffer - "EFEM.WaferAligner.Slot1" for example</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignBufferCtrl.PutWaferToAlignmentBuffer(System.String)">
            <summary>
            Tranfer wafer from aligner chuck to alignment buffer
            </summary>
            <param name="bufferHost">Destination buffer - "EFEM.WaferAligner.Slot2" for example</param>
        </member>
        <member name="T:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl">
            <summary>
            Methods for controling the wafer aligner.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.HomeWaferAligner">
            <summary>
            Home the wafer aligner.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.AlignWafer(BAI.Systems.Common.WaferAlignFeature,System.Double,System.String)">
            <summary>
            Align wafer on specified wafer aligner with to specified robot (end effecter)
            </summary>
            <param name="feature"></param>
            <param name="angleDegree"></param>
            <param name="endEffecter">Robot end effecter name such as "EFEM.WaferEngine.EE1", "AT.WaferEngine.EE2"</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.GetAlignmentResult">
            <summary>
            Returns wafer misalignment data for last wafer aligned
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.MoveRelative(System.Double,System.String)">
            <summary>
            Rotate the wafer aligner chuck by a specific angular distance.
            </summary>
            <param name="angleDegree">The angular distance to rotate by, in degrees.</param>
            <param name="speed">The motion profile to move with. Consult wafer aligner hardware documentation for supported profiles.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.MoveAbsolute(System.Double,System.String)">
            <summary>
            Rotate the wafer aligner chuck to a specific angular position.
            </summary>
            <param name="angleDegree">The angular position to rotate to, in degrees.</param>
            <param name="speed">The motion profile to move with. Consult wafer aligner hardware documentation for supported profiles.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.SetVelocity(BAI.Systems.Data.Motion.MotionAxisEnum,BAI.General.NumberWithUnit,System.String)">
            <summary>
            Set the velocity for the specified motion profile of an axis. Some profiles may not be modified. 
            </summary>
            <param name="axis">The axis whose motion profile will be changed.</param>
            <param name="velocity">The desired velocity value. See BAI.General.Units.Kinematics for supported units.</param>
            <param name="profile">The motion profile whose velocity will be changed. Some profiles may not be modified.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.GetVelocity(BAI.Systems.Data.Motion.MotionAxisEnum,System.String)">
            <summary>
            Get the velocity for the specified motion profile of the specified axis.
            </summary>
            <param name="axis">The axis whose motion profile will be read.</param>
            <param name="profile">The motion profile whose velocity will be read.</param>
            <returns>Value representing the velocity, in degrees per second.</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.SetAcceleration(BAI.Systems.Data.Motion.MotionAxisEnum,BAI.General.NumberWithUnit,System.String)">
            <summary>
            Set the acceleration for the specified motion profile of the specified axis. Some profiles may not be modified. 
            </summary>
            <param name="axis">The axis whose motion profile will be changed.</param>
            <param name="acceleration">The desired acceleration value. See BAI.General.Units.Kinematics for supported units.</param>
            <param name="profile">The motion profile whose acceleration will be changed. Some profiles may not be modified.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.GetAcceleration(BAI.Systems.Data.Motion.MotionAxisEnum,System.String)">
            <summary>
            Get the acceleration for the specified motion profile of the specified axis.
            </summary>
            <param name="axis">The axis to get the motion profile of.</param>
            <param name="profile">The motion profile whose acceleration will be read.</param>
            <returns>Value representing the acceleration, in degrees per second squared.</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.SetWaferMass(BAI.Systems.Common.WaferMass)">
            <summary>
            Configure the wafer aligner to use wafers of different mass. Some wafer aligners will use different motion parameters for wafers of different masses.
            </summary>
            <param name="mass">Enum representing the wafer mass.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.GetWaferMass">
            <summary>
            Get the wafer aligner wafer mass configuration. Some wafer aligners will use different motion parameters for wafers of different masses.
            </summary>
            <returns>Enum representing the wafer mass.</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.MoveRelative(BAI.Systems.Data.Motion.MotionAxisEnum,BAI.General.NumberWithUnit,System.String)">
            <summary>
            Move a wafer aligner axis by a specific distance.
            </summary>
            <param name="axis">The axis of the wafer aligner to move.</param>
            <param name="distance">The desired distance to move by. See BAI.General.Units.Angle or .Distance for supported units.</param>
            <param name="speed">The motion profile to move with. Consult documentation for wafer aligner hardware for supported profiles.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.MoveAbsolute(BAI.Systems.Data.Motion.MotionAxisEnum,BAI.General.NumberWithUnit,System.String)">
            <summary>
            Move a wafer aligner axis to a specific position.
            </summary>
            <param name="axis">The axis of the wafer aligner to move.</param>
            <param name="distance">The desired position to move to. See BAI.General.Units.Angle or .Distance for supported units.</param>
            <param name="speed">The motion profile to move with. Consult documentation for wafer aligner hardware for supported profiles.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.StopMotion">
            <summary>
            Abort a currently running MoveRelative or MoveAbsolute command on all axes and bring the aligner to a stop.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.StopMotion(BAI.Systems.Data.Motion.MotionAxisEnum)">
            <summary>
            Abort a currently running MoveRelative or MoveAbsolute command on a specified axis and bring the axis to a stop.
            </summary>
            <param name="axis">The axis to abort a movement of.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.ReAlignWafer(System.String)">
            <summary>
      Quickly realigns a wafer to the given <paramref name="endEffector" />.  The wafer must already have been aligned.
    </summary><remarks>
      <para>
        Adjusts the wafer to face the given <paramref name="endEffector" /> and returns new pick offsets
        to be used with the <paramref name="endEffector" />.
      </para>
      <para>
        The wafer must not be moved between the last align and calling this method.
        The align must not be reset between the last align and calling this method.
        Otherwise the results returned may be incorrect.
      </para>
    </remarks><param name="endEffector">End effector for result - likely to use to pick wafer</param><exception cref="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.NoWaferOnChuckToAlignException">
      There is no wafer on the aligner.
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.WaferNotAlignedException">
      Wafer on aligner is no aligned yet.
    </exception><returns>Alignment result for the desired end effecter to pick the wafer with.</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.ReAlignWafer(System.String,System.Double)">
            <summary>
            Quickly re-align the wafer by relative move. The wafer must have been successfully aligned before.
            </summary>
            <param name="endEffector">EE1 or EE2</param>
            <param name="angleDegree">The final angle the wafer will be oriented relative to the end effector</param>
            <returns>Alignment result with the re-aligned angle</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferAligner.IWaferAlignerCtrl.RelativeReAlignWafer(System.String,System.Double)">
            <summary>
            Quickly re-align the wafer by relative move. The wafer must have been successfully aligned before.
            </summary>
            <param name="endEffector">EE1 or EE2</param>
            <param name="angleDegree">The new angle the wafer will be oriented to relative to the current aligned angle</param>
            <returns>Alignment result with the re-aligned angle</returns>
        </member>
        <member name="M:BAI.Systems.Devices.SmartTag.ISmartTagFileSystem.ReadAvailableFileMemory">
            <summary>
            Reads the number of bytes.
            </summary>
            <returns>bytes</returns>
        </member>
        <member name="M:BAI.Systems.Devices.SmartTag.ISmartTagLcdScreen.SetDefaultLcdFont(BAI.Systems.Devices.SmartTag.SmartTagFontCode)">
            <summary>
            If a file is written with a font, it overrides this.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.SubstrateIdReader.ISubstrateIdReaderCtrl.ConnectSubstrateIdReader">
            <summary>
            Connect Substrate Id Reader
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.SubstrateIdReader.ISubstrateIdReaderCtrl.DisconnectSubstrateIdReader">
            <summary>
            Disconnect Substrate Id Reader
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.SubstrateIdReader.ISubstrateIdReaderCtrl.ReadSubstrateId">
            <summary>
            Read substrate ID if there's multiple wafer ID readers (front and back sides for example).
            </summary>
            <returns>Substrate ID read back</returns>
        </member>
        <member name="M:BAI.Systems.Devices.SubstrateIdReader.ISubstrateIdReaderSetup.GetIdReaderConfigParamNames">
            <summary>
            Get Bcr high level configurations
            </summary>
            <returns>Configuation parameter names and values</returns>
        </member>
        <member name="M:BAI.Systems.Devices.SubstrateIdReader.ISubstrateIdReaderSetup.GetIdReaderConfigParam(System.String)">
            <summary>
            Get BCR high level configuration parameter. Currently the supported parameters are
                    Parameter Name               Expected Value
                    ===============================================================
                    "TRIGGER.DELAY-TYPE",        0= Disabled. 1=Enable
                    "TRIGGER.DELAY-TIME",        integer, unit is milliseconds
                    "DECODER.TIMEOUT"            integer, unit is milliseconds
            </summary>
            <param name="param">Reader parameter name </param>
            <returns>Configuation parameter value</returns>
        </member>
        <member name="M:BAI.Systems.Devices.SubstrateIdReader.ISubstrateIdReaderSetup.SetIdReaderConfigParam(System.String,System.String)">
            <summary>
            Set BCR high level configuration parameter. Currently the supported parameters are
                    Parameter Name               Expected Value
                    ===============================================================
                    "TRIGGER.DELAY-TYPE",        0= Disabled. 1=Enable
                    "TRIGGER.DELAY-TIME",        integer, unit is milliseconds
                    "DECODER.TIMEOUT"            integer, unit is milliseconds
            </summary>
            <param name="param">Reader parameter name </param>
            <param name="value">value assign to the param  </param>
        </member>
        <member name="T:BAI.Systems.Devices.WaferEngine.PathFinding.AxisAlignedBoundingBox">
            <summary>
            Defines a box as center point with extents defining how far away the edge of the
            box is on each axis.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.AxisAlignedBoundingBox.#ctor(BAI.Systems.Devices.WaferEngine.PathFinding.AxisAlignedBoundingBox,BAI.Systems.Devices.WaferEngine.PathFinding.AxisAlignedBoundingBox)">
            <summary>
            Creates an AxisAlignedBoundingBox whose volume is that of the two given boxes
            and all the area in between.
            </summary>
            <param name="corner1"></param>
            <param name="corner2"></param>
        </member>
        <member name="T:BAI.Systems.Devices.WaferEngine.PathFinding.FunctionBlock">
            <summary>
            Represents a MoveLinearAbsolute PLCOpen function block.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.FunctionBlock.ToLine(BAI.Systems.Devices.WaferEngine.PathFinding.WaferEngineGeometry)">
            <summary>
            Two points representing a line.  The line represents the wafer engine arm location.
            </summary>
            <remarks>This method is for the benefit of the GUI.</remarks>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.FunctionBlock.ToDictionary">
            <summary>
            Creates a dictionary of axis positions for use with IPLC_GroupAxis.
            EE1 and EE2 are moved to 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.FunctionBlock.ConvertFromScreenToRobotSpace(BAI.Systems.Devices.WaferEngine.PathFinding.WaferEngineGeometry)">
            <summary>
            Converts this function block from an easily-visulizable from to a form that the
            robot expects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.IObstructionManager.GetMoveToSafety(System.Double,System.Double,System.Double)">
            <summary>
            Moves theta to 0, following a straight line along the Y axis
            if there is an obstruction in the way.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.ObstructionManager.CLOSE_ENOUGH">
            <summary>
            How many degrees off of 90 the start and end positions can be.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.ObstructionManager.CenterYPlane">
            <summary>
            The plane that splits the green zone in half, the wafer runs along this when fully in the center.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.ObstructionManager.CreateMovementTriangle(BAI.Systems.Devices.WaferEngine.PathFinding.Vector3,System.Boolean,System.Double)">
            <returns>The corner of the movement triangle that is one the center Y plane.</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.ObstructionManager.TryMatchFaceDirections(System.Double,System.Boolean@,System.Double,System.Boolean@)">
            <summary>
            Trys to make start and end face turn to facing the same way on the track
            to prevent turn-arounds.
            </summary>
            <remarks>
            If one of the positions is at 90 or 270, and the path to the other position does
            not intersect the theta dead zone, change the 90/270 face direction to match the other.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.ObstructionManager.makeWePos(BAI.Systems.Devices.WaferEngine.PathFinding.Vector3,System.Double)">
            <summary>
            This should only be called by other makeWePos() functions.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.ObstructionManager.makeWePos(BAI.Systems.Devices.WaferEngine.PathFinding.Vector3,System.Boolean)">
            <summary>
            This should only be called by other makeWePos() functions.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.ObstructionManager.checkAngle(System.String,System.Double)">
            <summary>
            Makes sure that theta is in front of the wafer engine or to the side.
            </summary>
            <param name="arg"></param>
            <param name="theta"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.ObstructionManager.GetMoveToSafety(System.Double,System.Double,System.Double)">
            <summary>
            Moves theta to 0, following a straight line along the Y axis
            if there is an obstruction in the way.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.PathPoint.Center">
            <summary>
            Vector from center of rotation to center of wafer.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.PathPoint.Theta">
            <summary>
            The location of the theta axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.PathResult.ScreenSpaceMovementCommands">
            <summary>
            For use by visualation tool, don't move the robot with this.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.PathResult.RobotSpaceMovementCommands">
            <summary>
            One array of function blocks for each entry in <see cref="F:BAI.Systems.Devices.WaferEngine.PathFinding.PathResult.Path"/>.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.WaferEngine.PathFinding.Vector2">
            <summary>
            A two dimensional immutable vector.
            </summary>
        </member>
        <member name="T:BAI.Systems.Devices.WaferEngine.PathFinding.Vector3">
            <summary>
            A three dimensional immutable vector.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.WaferEngineGeometry.#ctor(System.Xml.XmlNode,BAI.Systems.Utils.Location.ILocationManager)">
            <summary>
            Loads the geometry from a file.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.PathFinding.WaferEngineGeometry.Validate">
            <summary>
            Determines if the this WeferEngineGeometry is valid.
            </summary>
            <returns>The problems found.  Zero-length indicates no problems.</returns>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.WaferEngineGeometry.WaferRadius">
            <summary>
            Treated as an extent in X and Z for the wafer bounding box.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.WaferEngineGeometry.WaferThickness">
            <summary>
            Treated as an extent in the Z direction for the wafer bounding box.
            However the top of the wafer bounding box will be at the given Z.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.WaferEngineGeometry.ArmLength">
            <summary>
            The distance from the center of rotation to the center of wafer along the X axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.Devices.WaferEngine.PathFinding.WaferEngineGeometry.WaferLateralOffset">
            <summary>
            The distance of the wafer from the center of slide body.
            </summary>
            <remarks>
            This can be measured by drawing a line from the center of rotation
            parallel to the slide body.  This is this distance from the
            center of wafer to the line.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineECRemoteImp.GetPutWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineECRemoteImp.PutGetWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineECRemoteImp.GetTwoWafers(System.String)">
            <summary>
            Simultaneously get 2 wafers with both end effecters from two transfer locations
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineECRemoteImp.PutTwoWafers(System.String)">
            <summary>
            Simultaneously put 2 wafers with both end effecters to two transfer locations
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="T:BAI.Systems.Devices.WaferEngine.IWaferEngineCtrl">
            <summary>
            Methods for controlling the wafer engine.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.IWaferEngineCtrl.MoveToSafeLocation">
            <summary>
            Move the wafer engine to a location where it will not physically interface with
            other devices in the system.
            </summary>
            <remarks>
            In some systems, the Wafer Engine can move to a position that blocks
            other devices from moving. For example, in Spartan, if Wafer Engine
            is facing a load port, the door cannot be opened or closed.
            While the EFEM module will automatically move if it intercepts
            </remarks>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.GetPutWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.PutGetWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.GetTwoWafers(System.String)">
            <summary>
            Simultaneously get 2 wafers with both end effecters from two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.PutTwoWafers(System.String)">
            <summary>
            Simultaneously put 2 wafers with both end effecters to two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.GetTwoSubstrates(System.String)">
            <summary>
            Simultaneously get 2 substrates with both end effecters from two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.PutTwoSubstrates(System.String)">
            <summary>
            Simultaneously put 2 substrates with both end effecters from two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.GetPutSubstrates(System.String,System.String,System.String,System.String)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.PutGetSubstrates(System.String,System.String,System.String,System.String)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.GetPutSubstrates(System.String,System.String,System.String,System.String,BAI.Systems.Common.Substrates.SwapTransferOptions)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="options"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineRemoteProxy.PutGetSubstrates(System.String,System.String,System.String,System.String,BAI.Systems.Common.Substrates.SwapTransferOptions)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="options"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.MoveToReadyGet(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.MoveToReadyPut(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.GetWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.PutWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.GetWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.PutWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.GetPutWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.PutGetWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.GetTwoWafers(System.String)">
            <summary>
            Simultaneously get 2 wafers with both end effecters from two transfer locations
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.PutTwoWafers(System.String)">
            <summary>
            Simultaneously put 2 wafers with both end effecters to two transfer locations
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.GetTwoSubstrates(System.String)">
            <summary>
            Simultaneously get 2 substrates with both end effecters from two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.PutTwoSubstrates(System.String)">
            <summary>
            Simultaneously put 2 substrates with both end effecters from two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.GetPutSubstrates(System.String,System.String,System.String,System.String)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.PutGetSubstrates(System.String,System.String,System.String,System.String)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.GetPutSubstrates(System.String,System.String,System.String,System.String,BAI.Systems.Common.Substrates.SwapTransferOptions)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="options"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.PutGetSubstrates(System.String,System.String,System.String,System.String,BAI.Systems.Common.Substrates.SwapTransferOptions)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="options"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.MapWaferPresenceOnHost(System.String)">
            <summary>
            Detect wafer presence on a given host
            </summary>
            <param name="host">String specific enough to uniquely identiy a host</param>
            <returns>Presence or absence from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.MapWaferPresence(System.String)">
            <summary>
            Detect wafer presence on a group of hosts
            </summary>
            <param name="hostSearchString">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer)">
            <summary>
            Extend an end effecter to a named position
            Note - parent module must ensure that port is open already and states open
            </summary>
            <param name="endEffecter"></param>
            <param name="location"></param>
            <param name="verticalOffset"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer,System.Single,System.Single)">
            <summary>
            Extend an end effecter to a named position with radial (mm) and theta (deg) offsets
            Note - parent module must ensure that port is open already and states open
            </summary>
            <param name="endEffecter"></param>
            <param name="location"></param>
            <param name="verticalOffset"></param>
            <param name="radialOffsetMM"></param>
            <param name="thetaOffsetDeg"></param>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.MotionServoIsOnForAxis(System.String)">
            <summary>
            return servo state - currently retun only cached state
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.Ems">
            <summary>
            Should do stop motion with servo off and amplifiers disabled.
            For now, use stop motion.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferEngine.WaferEngineSpartanRemoteImp.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="T:BAI.Systems.Devices.WaferFlipper.IWaferFlipperCtrl">
            <summary>
            Methods for controling the wafer flipper.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.WaferFlipper.IWaferFlipperCtrl.HomeWaferFlipper(System.String)">
            <summary>
            Homes the wafer flipper.
            </summary>
            <param name="host">Which wafer flipper to home.</param>
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteImp.StopMotion(System.String)">
            <summary>
            Stop motion on an axis (soft or hard stop) - motion stops, but servo is till on.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteImp.StopMotion">
            <summary>
            Stop motion on all axes (soft or hard stop) - motion stops, but servo is till on.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteImp.Ems">
            <summary>
            Emergency Motor Stop (EMS) - stops motion, servo for all-axes turned off, alarm tripped.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteImp.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.StopMotion(System.String)">
            <summary>
            Stop motion on an axis (soft or hard stop) - motion stops, but servo is till on.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.StopMotion">
            <summary>
            Stop motion on all axes (soft or hard stop) - motion stops, but servo is till on.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.Ems">
            <summary>
            Emergency Motor Stop (EMS) - stops motion, servo for all-axes turned off, alarm tripped.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.GetCarrierPresenceSignalState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.GetCarrierPlacementSignalState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.AcquireSpaceForOp(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.ReleaseSpaceForOp(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.ClampCarrier">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.GetCarrierClampState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.GetCarrierPortLocation">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.GetCarrierPresenceState">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.MoveCarrierPort(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.ActivePortRemoteProxy.UnclampCarrier">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.ActivePort.SpaceShareClientActivePort.#ctor(System.String,System.String,System.String,BAI.Systems.Devices.ActivePort.IActivePort)">
            <summary>
            Constructor
            </summary>
            <param name="deviceName">CB1.ActivePort2</param>
            <param name="deviceType">CB.ActivePort</param>
            <param name="subId">Static port name, such as ActivePort1</param>
            <param name="activePort">Parent active port object</param>
        </member>
        <member name="P:BAI.Systems.Devices.DeviceBase.DeviceName">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.DeviceBase.Initialize">
            <inheritdoc />
        </member>
        <member name="T:BAI.Systems.Devices.IDevice">
            <summary>
            Base interface for all devices.
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.IDevice.DeviceName">
            <summary>
            The full device name, in the form Module.Device.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.IDevice.Initialize">
            <summary>
            Initializes a device to a defined state.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.RemoteModuleException">An error occured on the remote controller.</exception>
        </member>
        <member name="M:BAI.Systems.Devices.DeviceRemoteProxy.instantiateImp(System.String,System.String)">
            <summary>
            This method is called in proxy constructor to instantiate implementation.
            </summary>
            <param name="name"></param>
            <param name="clientName"></param>
        </member>
        <member name="P:BAI.Systems.Devices.DeviceRemoteProxy.DeviceName">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.DeviceRemoteProxy.Initialize">
            <inheritdoc />
        </member>
        <member name="T:BAI.Systems.Devices.Oht.SpaceShareClientOht">
            <summary>
            Class for OHT to manage space sharing in conflict zones.
            The OHT device should create one instance for each EFEM load-port
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.Oht.SpaceShareClientOht.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="deviceName">AMHS.OHT</param>
            <param name="deviceType">AMHS.OHT</param>
            <param name="subId">Load port name, such as LoadPortB</param>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.MoveToReadyGet(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.MoveToReadyPut(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.GetWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.PutWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.GetWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.PutWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer)">
            <summary>
            Extend an end effecter to a named position
            Note - parent module must ensure that port is open already and states open
            </summary>
            <param name="endEffecter"></param>
            <param name="location"></param>
            <param name="verticalOffset"></param>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer,System.Single,System.Single)">
            <summary>
            Extend an end effecter to a named position with radial (mm) and theta (deg) offsets
            Note - parent module must ensure that port is open already and states open
            </summary>
            <param name="endEffecter"></param>
            <param name="location"></param>
            <param name="verticalOffset"></param>
            <param name="radialOffsetMM"></param>
            <param name="thetaOffsetDeg"></param>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.MotionServoIsOnForAxis(System.String)">
            <summary>
            return servo state - currently retun only cached state
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.Ems">
            <summary>
            Stop motion with servo off and motor amplifiers disabled
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.MapWaferPresenceOnHost(System.String)">
            <summary>
            Detect wafer presence on a given host
            </summary>
            <param name="host">String specific enough to uniquely identiy a host</param>
            <returns>Presence or absence from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteImp.MapWaferPresence(System.String)">
            <summary>
            Detect wafer presence on a group of hosts
            </summary>
            <param name="hostSearchString">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MoveToReadyGet(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MoveToReadyPut(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.GetWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.PutWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.GetWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.PutWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.RetractEndEffecter(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MoveUpToWaferPlane(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MoveDownToWaferPlane(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MoveUpToGetWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MoveDownToPutWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MapWaferPresenceOnHost(System.String)">
            <summary>
            Detect wafer presence on a given host
            </summary>
            <param name="host">String specific enough to uniquely identiy a host</param>
            <returns>Presence or absence from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.MapWaferPresence(System.String)">
            <summary>
            Detect wafer presence on a group of hosts
            </summary>
            <param name="hostSearchString">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.StopMotion(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.StopMotion">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.Ems">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.GetActiveRobotMotionProfile">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.SetActiveRobotMotionProfile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.GetRobotMotionProfiles">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Devices.Robot.RobotBaseRemoteProxy.GetRobotPosition">
            <inheritdoc />
        </member>
        <member name="T:BAI.Systems.Devices.Robot.TransferOpConfigData">
            <summary>
            Class that defines timeout for various transfer operations
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Robot.TransferOpConfigData.TimeoutForMoveToReady">
            <summary>
            Timeout used for long moves
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Robot.TransferOpConfigData.TimeoutForTransfer">
            <summary>
            Timeout used for short moves
            </summary>
        </member>
        <member name="P:BAI.Systems.Devices.Robot.TransferOpConfigData.TimeoutForAbort">
            <summary>
            Timeout used for aborting transfer
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.TransferOpConfigData.msTimeoutForMoveToReady">
            <summary>
            Returns the timeout for long moves in miliseconds.
            Default value is 15000 milliseconds
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.TransferOpConfigData.msTimeoutForTransfer">
            <summary>
            Returns the timeout for short moves in miliseconds
            Default value is 15000 miliseconds
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.Robot.TransferOpConfigData.msTimeoutForAbort">
            <summary>
            Returns the timeout for aborting moves or longer queries in miliseconds
            Default value is 10000 miliseconds
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Devices.ShuttleLift.ShuttleLiftRemoteImp.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="M:BAI.Systems.Devices.ShuttleLift.ShuttleLiftRemoteImp.executeMoveOverX(System.String,System.String)">
            <summary>
            Move over without acquiring the current position
            </summary>
            <param name="activeHost"></param>
            <param name="station"></param>
        </member>
        <member name="M:BAI.Systems.Devices.ShuttleLift.ShuttleLiftRemoteProxy.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="T:BAI.Systems.Devices.ShuttleLift.SpaceShareClientShuttleLift">
            <summary>
            Class to take care of resource allocation in conflict zones for Shuttle Lift Z moves
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.ShuttleLift.SpaceShareClientShuttleLift.#ctor(System.String,System.String,System.String,BAI.Systems.Devices.ShuttleLift.IShuttleLift)">
            <summary>
            Constructor
            </summary>
            <param name="deviceName">CB1.ActivePort2</param>
            <param name="deviceType">CB.ActivePort</param>
            <param name="subId">Static port name, such as ActivePort1</param>
            <param name="shuttleLift">Parent shuttle lift object</param>
        </member>
        <member name="T:BAI.Systems.Devices.ShuttleLift.SpaceShareClientShuttleLiftX">
            <summary>
            Class to take care of resource allocation in conflict zones for Shuttle Lift Z moves
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.ShuttleLift.SpaceShareClientShuttleLiftX.#ctor(System.String,System.String,System.String,BAI.Systems.Devices.ShuttleLift.IShuttleLift)">
            <summary>
            Constructor
            </summary>
            <param name="deviceName">CB1.ActivePort2</param>
            <param name="deviceType">CB.ActivePort</param>
            <param name="subId">Static port name, such as ActivePort1</param>
            <param name="shuttleLift">Parent shuttle lift object</param>
        </member>
        <member name="T:BAI.Systems.Devices.ShuttleLift.SpaceShareClientShuttleLiftZ">
            <summary>
            Class to take care of resource allocation in conflict zones for Shuttle Lift Z moves
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.ShuttleLift.SpaceShareClientShuttleLiftZ.#ctor(System.String,System.String,System.String,BAI.Systems.Devices.ShuttleLift.IShuttleLift)">
            <summary>
            Constructor
            </summary>
            <param name="deviceName">CB1.ActivePort2</param>
            <param name="deviceType">CB.ActivePort</param>
            <param name="subId">Static port name, such as ActivePort1</param>
            <param name="shuttleLift">Parent shuttle lift object</param>
        </member>
        <member name="M:BAI.Systems.Devices.StaticPort.SpaceShareClientStaticPort.#ctor(System.String,System.String,System.String,BAI.Systems.Devices.StaticPort.IStaticPort)">
            <summary>
            Constructor
            </summary>
            <param name="deviceName">CB1.StaticPort2</param>
            <param name="deviceType">CB.StaticPort</param>
            <param name="subId">Static port name, such as StaticPort1</param>
            <param name="staticPort">Parent static port object</param>
        </member>
        <member name="M:BAI.Systems.Devices.StorageCarousel.StorageCarouselRemoteImp.StopMotion(System.String)">
            <summary>
            Stop motion on an axis (soft or hard stop) - motion stops, but servo is till on.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.StorageCarousel.StorageCarouselRemoteImp.StopMotion">
            <summary>
            Stop motion on all axes (soft or hard stop) - motion stops, but servo is till on.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.StorageCarousel.StorageCarouselRemoteImp.Ems">
            <summary>
            Emergency Motor Stop (EMS) - stops motion, servo for all-axes turned off, alarm tripped.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.StorageCarousel.StorageCarouselRemoteImp.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="M:BAI.Systems.Devices.StorageCarousel.StorageCarouselRemoteProxy.StopMotion(System.String)">
            <summary>
            Stop motion on an axis (soft or hard stop) - motion stops, but servo is till on.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.StorageCarousel.StorageCarouselRemoteProxy.StopMotion">
            <summary>
            Stop motion on all axes (soft or hard stop) - motion stops, but servo is till on.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.StorageCarousel.StorageCarouselRemoteProxy.Ems">
            <summary>
            Emergency Motor Stop (EMS) - stops motion, servo for all-axes turned off, alarm tripped.
            </summary>
        </member>
        <member name="M:BAI.Systems.Devices.StorageCarousel.StorageCarouselRemoteProxy.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="M:BAI.Systems.Devices.SwiftStation.SwiftStationRemoteImp.MapWaferPresenceOnHost(System.String)">
            <summary>
            Detect wafer presence on a given host
            </summary>
            <param name="host">String specific enough to uniquely identiy a host</param>
            <returns>Presence or absence from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.SwiftStation.SwiftStationRemoteImp.MapWaferPresence(System.String)">
            <summary>
            Detect wafer presence on a group of hosts
            </summary>
            <param name="hostSearchString">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.SwiftStation.SwiftStationProxy.MapWaferPresenceOnHost(System.String)">
            <summary>
            Detect wafer presence on a given host
            </summary>
            <param name="host">String specific enough to uniquely identiy a host</param>
            <returns>Presence or absence from hardware detection</returns>
        </member>
        <member name="M:BAI.Systems.Devices.SwiftStation.SwiftStationProxy.MapWaferPresence(System.String)">
            <summary>
            Detect wafer presence on a group of hosts
            </summary>
            <param name="hostSearchString">String to identify the group of hosts. Empty string for all hosts in module.</param>
            <returns>Presence or absence for group of hosts from hardware detection</returns>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetRepoVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetLogSourceName">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetMemoryUsage">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.PrintRunningTasks">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.PrintStackTrace">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ExitWindowsVersion">
            <summary>
            On the version that is complied for windows, exits the app.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ListXmsgPassthrough">
            <summary>
            Implemented by the EC, lists available remote SOCs.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ConnectXmsgPassthrough">
            <summary>
            For use by Minerva connecting through the EC.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.RebootOs">
            <summary>
            Reboots the Operating System
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetCpuInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAppParam">
            <summary>
            Set misc application params
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAppParam">
            <summary>
            Set misc application params
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetLastResetInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetLastCrashDump">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetMotionProfileIdParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetMotionProfileIdParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetEmsProfileIdParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetEmsProfileIdParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisTrajectorysequencerBufferMove">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisTrajectorysequencerBufferAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisPositionAtSyncPulse">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisPositionReached">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisPositionCaptured">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TraceUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.PositionUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ActivityStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.EventStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetType">
            <summary>
            Returns the type of the axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetCurrentPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetTargetPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisEnable">
            <summary>
            Enables and disables the axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIsEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisResetEventStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetEventStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetActivityStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetPwmParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetPwmParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetMotionCommandedParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetSignalStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisEnableMotor">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIsMotorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisStartMotion">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisStopMotion">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisAbortMotion">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisCount">
            <summary>
            Returns the maximum of axis in the system. Not all may be in use.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetName">
            <summary>
            Returns the name of the axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisConfigure">
            <summary>
            Configures the axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetPositionLimits">
            <summary>
            Sets the servo position limits.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetBrakeConfig">
            <summary>
            Sets the brake configuration.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisBufferMotionProfile">
            <summary>
            Sets the motion profile parameters.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetMonitorIdlePositionErrorParams">
            <summary>
            Sets monitor idle position error parameters.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisInitialize">
            <summary>
            Initializes an axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisStartCapture">
            <summary>
            Configures the capture input.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisFinishCapture">
            <summary>
            Finish capture monitoring.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisAbortCapture">
            <summary>
            Abort capture monitoring.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetBreakpointOnSensor">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetBreakpointOnPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisClearBreakpoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIsBreakpointSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisResetEncoderToZero">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetEmsMotionProfile">
            <summary>
            Sets the motion profile parameters for EMS.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetMotionControllerParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetCurrentSenseBitConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetMotionCurrentMaxPeak">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisStartParallelMotion">
            <summary>
            Starts motion on all configured axes.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetBreakpointOnMultipleSensors">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisConfigureHallSensors">
            <summary>
            Configures the hall sensors.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisBufferPvtPoints">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetMotionControllerParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetActualPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisConfigurePhaseCurrentSensors">
            <summary>
            Configures the phase current sensors.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisConfigurePhaseVoltagePwm">
            <summary>
            Configures the phase voltage outputs.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetMotionErrorFlag">
            <summary>
            Sets the motion error flag(used for tracing triggers)
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetMotionErrorFlag">
            <summary>
            Gets the motion error flag(used for tracing triggers)
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetPositionControlType">
            <summary>
            Sets the motion control type(PID, DirectTrajectory)
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetPositionControlType">
            <summary>
            Gets the motion control type
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetBrushlessFocParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetBrushlessFocParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetBrushlessMotorParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetBrushlessMotorParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetBrushlessAlignmentParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetBrushlessAlignmentParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetBrushlessControllerParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetBrushlessControllerParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisConfigureFocStepResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisConfigureInjectionSignal">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIndexMonitorConfigure">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIndexMonitorEnable">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIndexMonitorGetCapturedData">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIndexMonitorGetCurrentData">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIndexMonitorGetDataSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIndexMonitorGetAccumulatedDrift">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisIndexMonitorForceError">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetLastMotionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSyncConfigure">
            <summary>
            Axis sync component
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSyncEnable">
            <summary>
            Enable or disable sync component
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetEncoderParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetEncoderParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisConfigureDynamicBrake">
            <summary>
            Configures the dynamic brake.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisDynamicBrakeEnable">
            <summary>
            Enable or disable dynamic brake component
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisBufferPositionIoTrigger">
            <summary>
            Set an IO to trigger at a specified position
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisBufferSyncpulseIoTrigger">
            <summary>
            Set an IO to trigger at a specified sync pulse count
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisClearBufferedIoTriggers">
            <summary>
            Clear outstanding triggers
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisConfigureI2t">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetI2tSumIntegratedCurrents">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisEnableI2t">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisBufferPositionEventTrigger">
            <summary>
            Set the position reached event to trigger at a specified position
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisTestEnable">
            <summary>
            Test method used for quick functionality tests
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetCurrentOutOfSpecOffset">
            <summary>
            Sets the offset applied to DiagnosticInfoEnum.Current or DiagnosticInfoEnum.TotalCharge value.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetCurrentOutOfSpecOffset">
            <summary>
            Gets the offset applied to DiagnosticInfoEnum.Current or DiagnosticInfoEnum.TotalCharge value.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetMotorCurrentOutOfSpecOffset">
            <summary>
            Sets the offset applied to MotorCurrent value.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetMotorCurrentOutOfSpecOffset">
            <summary>
            Gets the offset applied to MotorCurrent value.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisConfigureMotorPowerMonitor">
            <summary>
            Configure the switched motor power ADC input
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisBufferPositionEventBasedOnSyncPulseTrigger">
            <summary>
            Set the position event to trigger at a specified sync pulse
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetIdlePositionDeltaMonitorParams">
            <summary>
            Sets idle position delta monitor parameters.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetOnClientDisconnectBehavior">
            <summary>
            Sets the axis behavior when the Client disconnects (e.g. EC).
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetCurrentSurgeConfig">
            <summary>
            Configure Current Surge protection
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAxisSensorLimits">
            <summary>
            Sets the axis minimum and maximum limits for a specific sensor.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAxisSensorLimits">
            <summary>
            Gets the axis minimum and maximum limits for a specific sensor.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSyncStartCounting">
            <summary>
            Start sync counting
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetServoPositionParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetServoPositionParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetPositionServoFilterParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetPositionServoFilterParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetPositionServoFilterEnable">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetPositionServoFilterEnable">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetServoParams">
            <summary>
            Sets the servo parameters.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetControllerOutputParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetControllerOutputParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetControllerOutputType">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetControllerOutputType">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetEncoderOutOfSpecOffset">
            <summary>
            Sets the offset applied to Pressure value.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetEncoderOutOfSpecOffset">
            <summary>
            Gets the offset applied to Pressure value.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisEnableMotorAndDisengageBrake">
            <summary>
            Special enable motor for axis supporting brake
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetStepperMotorParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetStepperMotorParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetStepperCompensation">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetStepperCompensation">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetStepperAxisParams">
            <summary>
            Sets the stepper parameters.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisGetStepperMotionPeriodsParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetStepperMotionPeriodsParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetDcParams">
            <summary>
            Sets the DC motor parameters.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AxisSetDcMotorOn">
            <summary>
            Sets the DC motor parameters.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.IoDurationMonitorStateChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AdcSignalPeriodicUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AdcSignalChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AdcValueCrossedRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.DioSignalChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetDioBitConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetDioBitConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetChannel">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetDioBitState">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetDioBitState">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetChannel">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetPulse">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetConfiguredChannels">
            <summary>
            Returns a comma-separated list of configured channels
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetConfiguredBitsByChannel">
            <summary>
            Returns a new line comma-separated list of configured bits, signal name, IOMode and value
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAdcLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAdcLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAdcLineThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAdcBitConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAdcBitConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.StartSignalMonitor">
            <summary>
            Message for configuring and starting/stopping IO frequency monitoring.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.StartAdcDriver">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAdcIndicatorParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ReadSignalDebounceTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.WriteSignalDebounceTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetDacIndicatorParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetDacLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetConfiguredDios">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetConfiguredAdcs">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetDioSignalFrequency">
            <summary>
            Retrieve the Fan TACH value for the specified channel
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ConfigureIoOperation">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ClearAllIoOperations">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.I2CConfigure">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetDacBitConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetDacChannelState">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.I2CWriteRegister">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.I2CAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ConfigureAdcMultiplexer">
            <summary>
            Configures the adc multiplexer ios.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAdcChannelDualMode">
            <summary>
            Set adc channel dual mode ADC1/2
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.StartAdcChannelConversion">
            <summary>
            Start adc channel conversion
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAdcPeriodicUpdateFrq">
            <summary>
            Set adc periodic update frequency
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ConfigureDurationMonitor">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ClearAllDurationMonitors">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetDioFrequencyOffset">
            <summary>
            Set ofset for dio frequency type IO
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetDioFrequencyOffset">
            <summary>
            Set ofset for dio frequency type IO
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetCpuTemperatureOffset">
            <summary>
            Set CPU temperature offset for out of spec
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetCpuTemperatureOffset">
            <summary>
            Get CPU temperature offset for out of spec
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAdcOffset">
            <summary>
            Set adc offset for out of spec. Offset is applied only on AdcSignalPeriodicUpdate event.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAdcOffset">
            <summary>
            Get adc offset for out of spec. Offset is applied only on AdcSignalPeriodicUpdate event.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.DioScanI2cBus">
            <summary>
            Scans the i2c bus for active devices
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.DoChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.DiChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAdcScaleFactor">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAdcScaleFactor">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAnalogFilterb0">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAnalogFilterb0">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAnalogFilterb1">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAnalogFilterb1">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAnalogFilterb2">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAnalogFilterb2">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAnalogFiltera0">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAnalogFiltera0">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAnalogFiltera1">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAnalogFiltera1">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetAnalogFilterk">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetAnalogFilterk">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.EnableAnalogFilter">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.IsAnalogFilterEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ReadAdc">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.Rs232Open">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.Rs232Close">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerConfigure">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerIsInitialized">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetCcd">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerStartAlign">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerEndAlign">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerAlignWafer">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetAlignResult">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetScandata">
            <summary>
            Gets scan data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetScandataSize">
            <summary>
            Gets scan data size
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerSetArmParam">
            <summary>
            Sets the value of ArmR or ArmT for a given end effecter.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetArmParam">
            <summary>
            Gets the value of ArmR or ArmT for a given end effecter.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetInt32Param">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetFloatParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetByteParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerSetInt32Param">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerSetFloatParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerSetByteParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerSetAlignerFeature">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetAlignerFeature">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerDumpDebugdata">
            <summary>
            Gets debug data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerSetBoolParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetBoolParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetCcdAndEncoder">
            <summary>
            Gets ccd and encoder pair
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerRealignWafer">
            <summary>
            Aligns the wafer relative to the new robot arm and wafer angle
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetNotchInfo">
            <summary>
            Gets ccd and encoder pair
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerSetArmAndWaferParam">
            <summary>
            Sets the value of ArmR or ArmT for a given end effecter and wafer size.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAlignerGetArmAndWaferParam">
            <summary>
            Gets the value of ArmR or ArmT for a given end effecter and wafer size.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AwcResultUpdate">
            <summary>
            Event sent when AWC results are available
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcConfigure">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcStart">
            <summary>
            Starts data collection
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcFinish">
            <summary>
            Finishes data collection and processes the data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcGetCcd">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcGetScandata">
            <summary>
            Gets scan data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcGetScandataSize">
            <summary>
            Gets scan data size
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcIsInitialized">
            <summary>
            N/A
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcInitialize">
            <summary>
            Allocate buffers and get CCD reading ready
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcSetintparam">
            <summary>
            Set int param
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcGetintparam">
            <summary>
            Get int param
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcSetio">
            <summary>
            Set IO configs
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcSetboolparam">
            <summary>
            Set bool param
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcGetboolparam">
            <summary>
            Get bool param
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcSetfloatparam">
            <summary>
            Set float param
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcGetfloatparam">
            <summary>
            Get float param
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcSetalgoparam">
            <summary>
            Set float param
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcGetalgoparam">
            <summary>
            Get float param
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MarathonAwcSetlenscorrections">
            <summary>
            Set calibrated lens corrects for the ccd reading
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerHomeAligner">
            <summary>
            Homes all axes of the OFA aligner. To home a single axis, use ALIGNER_HOME_SINGLE_AXIS instead.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerHomeSingleAxis">
            <summary>
            Homes a single axis of the OFA aligner
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerAlignWafer">
            <summary>
            Align Wafer
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerRealignWafer">
            <summary>
            Re-Align Wafer: recalculates offsets to correspond to the specified robot unit and station (EE) number
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetAligndata">
            <summary>
            Get Alignment Data: returns the offsets calculated for the most recent successful alignment
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerResetAligner">
            <summary>
            Reset Aligner: sets current chuck axis encoder position to zero, clears errors, and enables the chuck and Z-axis motors
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetVersion">
            <summary>
            Get Version: returns current OFA firmware version information.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetStatusbits">
            <summary>
            Request Aligner Status: returns a 32-bit status word representing the current status of the OFA.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSetSolenoid">
            <summary>
            Set Solenoid: turns the chuck vacuum solenoid ON or OFF.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerAddNotes">
            <summary>
            Add Note to Non-Volatile Memory buffer
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerDumpScandata">
            <summary>
            Dump scan data--not currently implemented
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerMoveAbsolute">
            <summary>
            Absolute Move: moves a specified axis to a specified absolute position.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetPosition">
            <summary>
            GetPosition: Gets the position of axis in real units for axis
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerDisplayNotes">
            <summary>
            Display NVM Note buffer
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerMoveRelative">
            <summary>
            Relative Move: moves a specified axis a specified distance relative to its current position.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerRestoreNvm">
            <summary>
            Restore data values from NVM--not currently implemented
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerScanEdges">
            <summary>
            Obtain CCD coverage values also used for LED calibration--not currently implemented
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerStopMotion">
            <summary>
            Stop Motion using ACC parameter, without disabling the motor
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerWritetoNvm">
            <summary>
            Write to NVM for persistance--not currently implemented
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetWafer">
            <summary>
            Get wafer from end effecter
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerPutWafer">
            <summary>
            Put wafer to end effecter
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerRetractChuck">
            <summary>
            Move chuck to the down position if there is no wafer on it
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetInt32Param">
            <summary>
            Gets the value of a single OFA parameter of type: int32
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetFloatParam">
            <summary>
            Gets the value of a single OFA parameter of type: float
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetByteParam">
            <summary>
            Gets the value of a single OFA parameter of type: char
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSetInt32Param">
            <summary>
            Sets the value of a single OFA parameter of type: int32
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSetFloatParam">
            <summary>
            Sets the value of a single OFA parameter of type: float
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSetByteParam">
            <summary>
            Sets the value of a single OFA parameter of type: char
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSetArmParam">
            <summary>
            Sets the value of ArmR or ArmT for a given end effecter.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetArmParam">
            <summary>
            Gets the value of ArmR or ArmT for a given end effecter.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSaveAppConfig">
            <summary>
            Saves the OFA ArmR and ArmT parameters in the configuration file.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerLoadAppConfig">
            <summary>
            Loads the OFA ArmR and ArmT parameters from the configuration file.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSetAllAxesEnable">
            <summary>
            Enable or disables theta and z axes.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSetSingleAxisEnable">
            <summary>
            Enable or disables theta or z axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerMoveAbsoluteSync">
            <summary>
            Synchronous absolute Move: moves a specified axis to a specified absolute position and waits to complete before returning.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerMoveRelativeSync">
            <summary>
            Synchronous relative Move: moves a specified axis a specified distance relative to its current position and waits to complete before returning.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerRadialOffsetAlignWafer">
            <summary>
            Align wafer and end with the raw offset vector aligned to the robot radial axis
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerMapWafer">
            <summary>
            Map wafer presence on chuck
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.StartWaferCenterDetect">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.FinishWaferCenterDetect">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetVacuumLimit">
            <summary>
            Gets the value of the OFA vacuum limit
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSetVacuumLimit">
            <summary>
            Sets the value of the OFA vacuum limit
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerReadVacuum">
            <summary>
            Gets the current value of the OFA vacuum (Differential/House)
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerLoadVacuumLimitsFromFile">
            <summary>
            Loads the OFA vacuum limits from the configuration file
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerSaveVacuumLimitsInFile">
            <summary>
            Saves the OFA vacuum limits in the configuration file
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetWaferPresenceSensorState">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetOpticSensorReceivedIntensity">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerMoveZToAtwafer">
            <summary>
            Use vacuum sensor to figure out at wafer position for OFA chuck. Wafer presence of OFA and EEs must be validated by EC first.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetScandata">
            <summary>
            Gets scan data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetEncoderStep">
            <summary>
            Gets encoder step
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerGetScandataSize">
            <summary>
            Gets scan data size
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AlignerDisableLineSensor">
            <summary>
            Turns off using line sensor for wafer presence checks
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecStackPortInterlockStateChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecStackPortStatusChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecWaferPresenceChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecStackLevelChange">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecAlarmGenerated">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecCaptureOffset">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecReadCurrentOffset">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecInitialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetCoverState">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetJedecportType">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecIsManualLoading">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecIsManualUnloading">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecPanelCoverState">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetManualLoad">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetManualUnload">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetStackCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetStackLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetStackMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetStackMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetStackPortStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecPush">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecPop">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecVerifyStackReady">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetMediaPresentVacuumLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetMediaThickness">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetMediaUnloadCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetPressureAlarmLimits">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetPressureAlarmLimits">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetStackHighCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetStackLowCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetOperationMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecPrepareToPush">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecPrepareToPop">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecAlarmIsTripped">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetAlarmCause">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecMapWaferPresenceOnHost">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetMediaThickness">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetMediaUnloadCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetStackHighCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetStackLowCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetMediaPresentVacuumLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecIsLidPresentOnTray">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetReadTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetReadTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetIdReadParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetIdReadParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetIdReadParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecReadId">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecClearAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecEms">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecReadVacuum">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecTurnVacuum">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecMovePlunger">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecGetPosition">
            <summary>
            GetPosition: Gets the position of z axis in real units for axis
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSetSingleAxisEnable">
            <summary>
            Enable or disables z axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecMoveAbsoluteSync">
            <summary>
            Synchronous absolute Move: moves z axis to a specified absolute position and waits to complete before returning.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecMoveRelativeSync">
            <summary>
            Synchronous relative Move: moves z axis a specified distance relative to its current position and waits to complete before returning.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecHomeSingleAxis">
            <summary>
            Homes JEDEC z axis
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecSaveOpParamInFile">
            <summary>
            Saves the Operator Parameters in the configuration file.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecLoadOpParamFromFile">
            <summary>
            Loads the Operator Parameters in the configuration file
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecRecalcStackCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecCalibrateDistBetweenSensors">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.JedecIsLidPresentOnPlunger">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachGetFloatParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachGetIntParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachGetBoolParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachSetFloatParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachSetIntParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachSetBoolParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachLoadFromFlash">
            <summary>
            Load teach params from flash memory
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachSaveToFlash">
            <summary>
            Save current teach params to flash memory
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachGetLocationsCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachGetLocationsList">
            <summary>
            Returns a newline-separated list of locations
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TeachGetLocationPositionsList">
            <summary>
            Returns a newline-separated list of comma-separated parameter names, types, values, and units
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetLightTowerComponentState">
            <summary>
            Returns the state of a given light tower indicator.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetLightTowerComponentState">
            <summary>
            Sets the state of a given light tower indicator.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ReadArmsocUniqueId">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.ActivateSoftware">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.DeactivateSoftware">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.IsSoftwareActivated">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerAcquireSignalTracer">
            <summary>
            Reserve a signal tracer for this client to use
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerReleaseSignalTracer">
            <summary>
            Releases a signal tracer that this client was using
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerAddTriggerOnAxisSignal">
            <summary>
            Adds a trigger that will check an axis signal to start the signal tracing.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerRemoveTriggerOnAxisSignal">
            <summary>
            Removes a trigger that will check an axis signal to start the signal tracing.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerAddTriggerOnIoSignal">
            <summary>
            Adds a trigger that will check an IO signal.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerRemoveTriggerOnIoSignal">
            <summary>
            Removes a trigger that will check an IO signal.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerAddTraceAxisSignal">
            <summary>
            Adds this signal to the list of signals that will be traced.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerRemoveTraceAxisSignal">
            <summary>
            Removes a signal from the list of signals that will be traced.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerAddTraceIoSignal">
            <summary>
            Adds this IO signal to the list of signals that will be traced.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerRemoveTraceIoSignal">
            <summary>
            Removes this IO signal from the list of signals that will be traced.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerClearTriggers">
            <summary>
            Clears the list of triggers that will start the recording
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerClearTraces">
            <summary>
            Clears the list of signals that will be recorded
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerConfigureSignalTracer">
            <summary>
            Clears the list of signals that will be recorded
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerStopService">
            <summary>
            Stop the signal tracing service
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerStartService">
            <summary>
            Start the signal tracing service
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.TracerGetAvailableSignals">
            <summary>
            Returns an array of signals that can be traced
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.RecordedTracerData">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorSignalPeriodicPeakData">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.AcousticDataEvt">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorBoardSignalPassedThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorAxisSignalPassedThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorGetBoardDiagnosticInfo">
            <summary>
            Get Board Diagnostic info
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorGetAxisDiagnosticInfo">
            <summary>
            Get Axis Diagnostic info
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorConfigureBoardSignalAlertThreshold">
            <summary>
            Add signal alert threshold
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorConfigureAxisSignalAlertThreshold">
            <summary>
            Add signal alert threshold
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorEnableDiagnosticPeripheral">
            <summary>
            Enable a diagnostic peripheral
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorRecordAudio">
            <summary>
            Start Recording Audio
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorSetAcousticRecordingThreshold">
            <summary>
            Record Acoustic If Threshold Passed
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorSetDiagnosticPeripheralOffset">
            <summary>
            Sets the offset applied to a diagnostic info defined for a diagnostic peripheral.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorGetDiagnosticPeripheralOffset">
            <summary>
            Gets the offset applied to a diagnostic info defined for a diagnostic peripheral.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorConfigureAxisSignalPeriodicPeak">
            <summary>
            Add periodic signal peak computation
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.MonitorConfigureBoardSignalPeriodicPeak">
            <summary>
            Add periodic signal peak computation
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SyncConfigureSyncGenerator">
            <summary>
            Configure sync signal generator
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SyncGenerateSyncSignal">
            <summary>
            Generate sync signal for specified time
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SyncConfigureMotionSyncCollector">
            <summary>
            Configure motion sync signal collector independent of axis
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SyncMotionSyncStartCounting">
            <summary>
            Start the independent sync collector counting
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SyncMotionSyncStopCounting">
            <summary>
            Stop the independent sync collector counting
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.IAmAlive">
            <summary>
            Event stating that the board is alive
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.SetIAmAliveEvent">
            <summary>
            Configure I_AM_ALIVE event
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.GetIAmAliveEventDuration">
            <summary>
            Returns I_AM_ALIVE event period
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgCommand.IsIAmAliveEventEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.XMsgDriver.#ctor">
            <summary>
            For use by the EC passthrough.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.XMsgDriver.#ctor(System.String,BAI.General.ComponentToken)">
            <summary>
            For use by the XMsgForwardingDriver.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.XMsgDriver.#ctor(System.String)">
            <summary>
            For used in the CTC.
            </summary>
            <param name="instanceName"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.XMsgDriver.#ctor(System.String,System.String)">
            <summary>
            For use in the CTC.
            </summary>
            <param name="instanceName"></param>
            <param name="clientName"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.XMsgDriver.#ctor(System.String,BAI.General.ComponentToken,System.String)">
            <summary>
            For use in the EC.
            </summary>
            <param name="instanceName"></param>
            <param name="token"></param>
            <param name="XMsgConnectionName"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.XMsgDriver.#ctor(BAI.Systems.HwComm.XMsg.IXMsgComm)">
            <summary>
            For use in the CTC.
            </summary>
            <param name="xMsgComm"></param>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.OK">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.NOT_AVAILABLE">
            <summary>
            Capability or feature not available
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.NOT_ALLOWED">
            <summary>
            Operation not allowed
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.NOT_IMPLEMENTED">
            <summary>
            Feature not implemented (yet)
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ILLEGAL_PROPERTY">
            <summary>
            Illegal property ID 
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ILLEGAL_CMD">
            <summary>
            Illegal command
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ILLEGAL_STATE">
            <summary>
            System/component is in Illegal state
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.TG_CALCULATION">
            <summary>
            Error while calculating trajectory
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ILLEGAL_PARAM">
            <summary>
            bad parameter passed to function
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ILLEGAL_AXIS">
            <summary>
            unsupported axis number
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.DEVICE_DRIVER">
            <summary>
            Device driver initialization error
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ILLEGAL_DEV_NAME">
            <summary>
            Illegal Device Name
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.FILE_OPEN">
            <summary>
            Error while opening File/Device
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.FILE_NOT_OPEN">
            <summary>
            Trying to access a non-opened file
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.FILE_CLOSE">
            <summary>
            Error while Closing File/Device
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.FILE_READ">
            <summary>
            Error while reading File/Device
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.FILE_WRITE">
            <summary>
            Error while Writing File/Device
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.FILE_IOCTL">
            <summary>
            File/Device operation error
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MSG_SEND_FAILURE">
            <summary>
            Socket(or CAN) failed to send msg
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.COMM_NOT_CONNECTED">
            <summary>
            network connection not made (lost)
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.BAD_INPUT_PARAM">
            <summary>
            general error that indicates the input was not correct.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.UNCONNECTED_AXIS">
            <summary>
            axis has not been connected
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ILLEGAL_FILTER">
            <summary>
            unsupported filter number
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.INVALID_CHANNEL">
            <summary>
            Invalid IO channel
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.DMA_BUS">
            <summary>
            DMA error. DMA must work on global/static memory. Heap and stack memory does not work.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.TIMEOUT">
            <summary>
            Timeout error
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.OVERFLOW">
            <summary>
            Buffer overflow
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MEMORY_ALLOC">
            <summary>
            Memory allocation error
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.NETSTRING_PARSE">
            <summary>
            Netstring parse error
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.CPLD_TIMEOUT">
            <summary>
            A CPLD device did not respond in a timely manner.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.CPLD_OVERRUN">
            <summary>
            The CPLD driver could not keep up with writes or was closed before being flushed.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MQUEUE_CREATE">
            <summary>
            Failed to create a named message queue, the name has been already been used.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MQUEUE_OPEN">
            <summary>
            Error while opening a named message queue.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MQUEUE_CLOSE">
            <summary>
            Error while closing a named message queue.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MQUEUE_SEND">
            <summary>
            Message queue may be full.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MQUEUE_RECEIVE">
            <summary>
            Error message queue read.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.STMACH_DUPLICATE_ID">
            <summary>
            Attempt to create two states with the same ID.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.STMACH_BAD_STRUCTURE">
            <summary>
            State machine has structural defect.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.STMACH_TOO_MANY_GUARDS">
            <summary>
            Adding more state machine guards than allocated.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.NOT_CLEAR_OF_EE">
            <summary>
            LPJ is not clear of end effectrs.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.NO_TRAY_ON_RAIL">
            <summary>
            No tray located on the rail when stacking.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.PROTRUSION_SENSOR_BLOCKED">
            <summary>
            Protrusion sensor is blocked.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.STACK_IS_FULL">
            <summary>
            Stack is full.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.TRAY_PRESENCE_ON_RAIL">
            <summary>
            Tray present on rail when unstacking.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.STACK_IS_EMPTY">
            <summary>
            Stack is empty.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.LID_IS_ON_TRAY">
            <summary>
            lid located on tray.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MANUAL_LOAD_IN_PROGRESS">
            <summary>
            Manual loading operation is in progress.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.STACK_IN_PROGRESS">
            <summary>
            Stacking operation is in progress.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.UNSTACK_IN_PROGRESS">
            <summary>
            Unstacking operation is in progress.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.COVER_NOT_CLOSED">
            <summary>
            Cover is not closed.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MANUAL_UNLOAD_IN_PROGRESS">
            <summary>
            Manual unloading operation is in progress.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.CDA_BELOW_THRESHOLD">
            <summary>
            CDA level is below threshold.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.PRESENCE_SENSOR_UNKNOWN">
            <summary>
            Presence sensor is in unknown state.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.CAPACITY_SENSOR_BLOCKED">
            <summary>
            Capacity sensor is blocked.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.TRAY_INIT_FAILED">
            <summary>
            Tray initialization failed.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.RAILS_NOT_RETRACTED">
            <summary>
            Rails are not retracted.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.RAILS_NOT_EXTENDED">
            <summary>
            Rails are not extended.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.SINGULATION_TABS_NOT_RETRACTED">
            <summary>
            Singulation tabs are not retracted.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.SINGULATION_TABS_NOT_EXTENDED">
            <summary>
            Singulation tabs are not extended.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.STACK_IS_OVERLOADED">
            <summary>
            Stack is overloaded.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.LID_INIT_FAILED">
            <summary>
            Lid initialization failed.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.LID_COVER_UNKNOWN">
            <summary>
            Lid cover unknown.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.LID_STACK_FAILED">
            <summary>
            Lid stack failed.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.PLUNGER_NOT_EXTENDED">
            <summary>
            Lid plunger not extended.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.PLUNGER_NOT_RETRACTED">
            <summary>
            Lid plunger not retracted.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.NO_LID_ON_TRAY">
            <summary>
            No lid on tray during ready to unstack.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.LID_READY_UNSTACK_FAILED">
            <summary>
            Lid unstack failed.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_ALARM_STATE">
            <summary>
            JLP is in alarm state.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_BUSY_STATE">
            <summary>
            JLP is in busy state.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_UNINITIALIZED_STATE">
            <summary>
            JLP is in uninitialized state.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_NOT_IN_OPERATOR_MODE">
            <summary>
            JLP is not in Operator mode.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_NOT_IN_CLIENT_MODE">
            <summary>
            JLP is not in Client mode.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.PANEL_COVER_STATE_OPENED">
            <summary>
            JLP panel cover is open.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.INVALID_STATE">
            <summary>
            Invalid state machine state
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.HOME_FAILED">
            <summary>
            JLP homing failed
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.VERIFYING_RAILS_TABS_FAILED">
            <summary>
            Failed verifying rails and tabs
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.READY_TO_STACK_FAILED">
            <summary>
            MoveToReadyToStack failed
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXES_ENABLED_FAILED">
            <summary>
            Axes enabled failed
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALREADY_IN_CLIENT_MODE">
            <summary>
            Already in client mode.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALREADY_IN_OPERATOR_MODE">
            <summary>
            Already in operator mode.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.OFA_MATH_ERROR">
            <summary>
            OFA Error: Math error during OFA offset calculation.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.OFA_RMAX_ERROR">
            <summary>
            OFA Error: Wafer offset exceeds RMAX.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.OFA_NO_FIDUCIAL">
            <summary>
            OFA Error: Failed to find the fiducial
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.OFA_EXCESS_NOISE">
            <summary>
            OFA Error: Excess noise detected when filtering ADC data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.OFA_SPEED_ERROR">
            <summary>
            OFA Error: Speed error while collecting ADC data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AWC_NOTCH_PRESENT">
            <summary>
            AWC Error: Notch present around peak encoder position
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AWC_INVALID_SCAN">
            <summary>
            AWC Error: AWC Scanning error
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AWC_NO_DATA">
            <summary>
            AWC Error: AWC No data collected error
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AWC_CCD_FULLY_BLOCKED">
            <summary>
            AWC Error: CCD was fully blocked during the scan. We can no longer detect wafer edge. Invalid scan
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AWC_BUFFER_OVERFLOW">
            <summary>
            AWC Error: CCD Buffer overflow. Maximum data points collected
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MOTION_FE">
            <summary>
            Following error
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MOTION_SERVO_DISABLED">
            <summary>
            Servo is disabled
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MOTION_LIMIT">
            <summary>
            Target is beyond softare limit
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_NOT_IN_MANUAL_LOADING">
            <summary>
            JLP is not in Manual Load state.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_NOT_IN_MANUAL_UNLOADING">
            <summary>
            JLP is not in Manual Unload state.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_MANUAL_RECOVERY_NEEDED">
            <summary>
            Manual recovery needed, media might be damaged otherwise
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_LID_ON_PLUNGER">
            <summary>
            Lid present on plunger
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_LID_NOT_ON_PLUNGER">
            <summary>
            Lid NOT present on plunger
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_NOT_READY_TO_CHANGE_OPERATION_MODE">
            <summary>
            The JLP is not in the correct state for changing operation mode.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.CMD_FAILED">
            <summary>
            Command failed
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MOTION_ZERO_MV">
            <summary>
            Motion completed no change in position
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.WAFER_ABSENT">
            <summary>
            Wafer presence state is absent
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.WAFER_UNKNOWN">
            <summary>
            Wafer presence state is unknown
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.SERVO_DISABLED">
            <summary>
            Servo is disabled
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MOTOR_DISABLED">
            <summary>
            Motor is disabled
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ID_READ_FAILED">
            <summary>
            failed to read substrate ID
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.JLP_WRONG_LP_TYPE">
            <summary>
            Not valid on this type
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MANUAL_OPERATION_ABORTED">
            <summary>
            Manual operation was aborted by user
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.WAFER_NOT_ABSENT">
            <summary>
            Wafer presence state is not absent
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.WAFER_NOT_PRESENT">
            <summary>
            Wafer presence state is not present
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXIS_ALREADY_CONFIGURED">
            <summary>
            The axis is already configured.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXIS_NOT_CONFIGURED">
            <summary>
            The axis is not configured yet.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.FAILED_TO_CREATE_AXIS">
            <summary>
            Failed to create the axis.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.NOT_ALLOWED_WHILE_MOVING">
            <summary>
            The function cannot be called while the axis is moving.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.BREAK_POINT_ALREADY_SET">
            <summary>
            The breakpoint is already set.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.SOFTWARE_NOT_ACTIVE">
            <summary>
            The software was not activated.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.SIGNAL_ALREADY_REGISTERED">
            <summary>
            The signal tracer signal has already been registered
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.SIGNAL_NOT_REGISTERED">
            <summary>
            The requested signal has not been registered in the signal tracer
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.SIGNAL_ALREADY_TRACED">
            <summary>
            The signal tracer signal is already being traced
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.TRIGGER_EXISTS">
            <summary>
            The signal tracer trigger already exists
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.IO_SIGNAL_REQUIRED">
            <summary>
            An axis signal was used in place of an IO signal
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.TRACER_BAD_CONFIGURATION">
            <summary>
            The signal tracer's configuration is bad
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.NO_TRACES">
            <summary>
            Cannot start signal tracer if no traces are being recorded
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.HIGH_FREQUENCY_TRACE_NOT_AVAILABLE">
            <summary>
            Signal tracer currently cannot trace in high frequency mode. increase trace interval.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.CONFIGURE_MORE_BUCKETS">
            <summary>
            Signal tracer requires more buffer buckets to function
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.INDEX_PULSE_ENCODER_DRIFT">
            <summary>
            Encoder drift detected by index pulse monitor
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALIGNER_MATH_ERROR">
            <summary>
            Math error during offset calculation.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALIGNER_RMAX_ERROR">
            <summary>
            Wafer offset exceeds RMAX.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALIGNER_NO_FIDUCIAL">
            <summary>
            Failed to find the fiducial
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALIGNER_EXCESS_NOISE">
            <summary>
            Excess noise detected when filtering CCD data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALIGNER_SPEED_ERROR">
            <summary>
            Speed error while collecting Encoder and CCD data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALIGNER_CCD_BUFFER_FULL">
            <summary>
            CCD buffer is full of data
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.IO_OPERATION_FAILED_TO_DETERMINE_OP_STATE">
            <summary>
            An error appeared while determining the operation state.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.IO_OPERATION_INPUT_SIGNAL_IS_NOT_VALID">
            <summary>
            An input signal was set as an result signal as well. We don't want to chase our own tail.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.IO_OPERATION_RESULT_SIGNAL_IS_NOT_VALID">
            <summary>
            An result signal was either not configured at all, configured as an input or is already controlled by another operation.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.I2T_PROTECTION_ACTIVE">
            <summary>
            I2T thermal protection active. No motion can be allowed while the protection is active.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.PRETRACE_NOT_SUPPORTED">
            <summary>
            Pretrace not supported with this tracing strategy
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.SW_DEACTIVATION_FAILED">
            <summary>
            The software was not deactivated.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALIGNER_TINES_NOT_DETECTED">
            <summary>
            Returned only if the number of tines detected is too low
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALIGNER_TINES_DETECTED_WRONG_ORDER">
            <summary>
            Returned if the tines are detected at unexpected positions
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.MOTOR_CURRENT_SURGE">
            <summary>
            The motor was overloaded by current.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXIS_MIN_ENCODER_LIMIT_EXCEEDED">
            <summary>
            The axis position is lower than the minimum limit configured for the encoder.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXIS_MAX_ENCODER_LIMIT_EXCEEDED">
            <summary>
            The axis position is bigger than the maximum limit configured for the encoder.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXIS_MIN_VELOCITY_LIMIT_EXCEEDED">
            <summary>
            Commanded axis velocity is lower than the minimum limit.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXIS_MAX_VELOCITY_LIMIT_EXCEEDED">
            <summary>
            Commanded axis velocity is bigger than the minimum limit.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXIS_MIN_ACCELERATION_LIMIT_EXCEEDED">
            <summary>
            Commanded axis acceleration is lower than the minimum limit.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXIS_MAX_ACCELERATION_LIMIT_EXCEEDED">
            <summary>
            Commanded axis acceleration is bigger than the minimum limit.
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AXIS_HALL_SENSOR_FAULT">
            <summary>
            Hall sensor failure
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.AWC_EXCESSIVE_NOISE">
            <summary>
            Excessive AWC noise detected
            </summary>
        </member>
        <member name="F:BAI.Systems.HwComm.XMsg.XMsgError.ALIGNER_TINE_DETECTION_EXCEEDED_MAX_DEVIATION">
            <summary>
            Returned if the maximum tine deviation was exceeded.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.GetVersion">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.GetRepoVersion">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.SetLogSourceName(System.String)">
            <summary>
            
            </summary>
            <param name="hostName"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.GetTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.SetTime(BAI.Systems.HwComm.XMsg.TimeSpec)">
            <summary>
            
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.GetMemoryUsage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.PrintRunningTasks">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.PrintStackTrace(System.Int32)">
            <summary>
            
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.ExitWindowsVersion">
            <summary>
            On the version that is complied for windows, exits the app.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.ListXmsgPassthrough">
            <summary>
            Implemented by the EC, lists available remote SOCs.
            </summary>
            <returns>A comma seperated list of names.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.ConnectXmsgPassthrough(System.String)">
            <summary>
            For use by Minerva connecting through the EC.
            </summary>
            <param name="name">Name of the remote XMsg device to connect to.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.RebootOs">
            <summary>
            Reboots the Operating System
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.GetCpuInfo">
            <summary>
            
            </summary>
            <returns>Rev and Dev ids taken from DBGMCU register</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.SetAppParam(BAI.Systems.HwComm.XMsg.UtilityAppParam,System.Single)">
            <summary>
            Set misc application params
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.GetAppParam(BAI.Systems.HwComm.XMsg.UtilityAppParam)">
            <summary>
            Set misc application params
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.GetLastResetInfo(System.Boolean)">
            <summary>
            
            </summary>
            <param name="ClearFlags">Clear reset flags after read?</param>
            <returns>Value in the RCC reset register</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IUtilityXMsgDriver.GetLastCrashDump(System.Boolean)">
            <summary>
            
            </summary>
            <param name="ClearBkram">Clear bkram after read?</param>
            <returns>Stack dump from last crash. Resets on full power cycle</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ITrajectoryGenerationXMsgDriver.SetMotionProfileIdParam(System.Byte,BAI.Systems.HwComm.XMsg.MotionProfileID,System.Single)">
            <summary>
            
            </summary>
            <param name="Axis"></param>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ITrajectoryGenerationXMsgDriver.GetMotionProfileIdParam(System.Byte,BAI.Systems.HwComm.XMsg.MotionProfileID)">
            <summary>
            
            </summary>
            <param name="Axis"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ITrajectoryGenerationXMsgDriver.SetEmsProfileIdParam(System.Byte,BAI.Systems.HwComm.XMsg.MotionProfileID,System.Single)">
            <summary>
            
            </summary>
            <param name="Axis"></param>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ITrajectoryGenerationXMsgDriver.GetEmsProfileIdParam(System.Byte,BAI.Systems.HwComm.XMsg.MotionProfileID)">
            <summary>
            
            </summary>
            <param name="Axis"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ITrajectoryGenerationXMsgDriver.AxisTrajectorysequencerBufferMove(System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Axis"></param>
            <param name="_targetPos">NA</param>
            <param name="_acceleration">NA</param>
            <param name="_velocity">NA</param>
            <param name="_jerk">NA</param>
            <param name="_followingErrorLimit">NA</param>
            <param name="_settleTime">NA</param>
            <param name="_settleWindow">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ITrajectoryGenerationXMsgDriver.AxisTrajectorysequencerBufferAction(System.Byte,BAI.Systems.HwComm.XMsg.TrajectorySequencerActionType,System.Single)">
            <summary>
            
            </summary>
            <param name="Axis"></param>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.EventStatus">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.ActivityStatus">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.PositionUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.TraceUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisPositionCaptured">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisPositionReached">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisPositionAtSyncPulse">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetType(System.Byte)">
            <summary>
            Returns the type of the axis.
            </summary>
            <param name="Axis">NA</param>
            <returns>None if the argument is out of range or the axis is not configured.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetCurrentPosition(System.Byte)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <returns>32 bit float units encoders</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetTargetPosition(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="encoderPosition">encoders</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisEnable(System.Byte,System.Boolean)">
            <summary>
            Enables and disables the axis.
            </summary>
            <param name="Axis">NA</param>
            <param name="Enable">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIsEnabled(System.Byte)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <returns>type bool (char) 0 = false / non zero = true</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisResetEventStatus(System.Byte,BAI.Systems.HwComm.XMsg.EventStatusMask)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="resetBits">Bits that are set to 1 get reset.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetEventStatus(System.Byte)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetActivityStatus(System.Byte)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetPwmParam(System.Byte,BAI.Systems.HwComm.XMsg.PWMParamsID,System.Single)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetPwmParam(System.Byte,BAI.Systems.HwComm.XMsg.PWMParamsID)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetMotionCommandedParam(System.Byte,BAI.Systems.HwComm.XMsg.MotionCommandedParamsID)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetSignalStatus(System.Byte)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisEnableMotor(System.Byte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Enable">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIsMotorEnabled(System.Byte)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <returns>type bool (char) 0 = false / non zero = true</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisStartMotion(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisStopMotion(System.Byte,System.Single)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="StopAccel"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisAbortMotion(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisCount">
            <summary>
            Returns the maximum of axis in the system. Not all may be in use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetName(System.Byte)">
            <summary>
            Returns the name of the axis.
            </summary>
            <param name="Axis">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisConfigure(System.Byte,BAI.Systems.HwComm.XMsg.AxisType,System.Byte,System.Byte,BAI.Systems.HwComm.XMsg.EncoderAssignment,System.Byte,System.Byte,System.Boolean,System.Byte,System.Byte,System.Boolean,BAI.Systems.HwComm.XMsg.TrajectoryType)">
            <summary>
            Configures the axis.
            </summary>
            <param name="axisId">NA</param>
            <param name="axisType">NA</param>
            <param name="pwmChannel">NA</param>
            <param name="pwmTimer">NA</param>
            <param name="encoderAssignment">NA</param>
            <param name="enableChannel">NA</param>
            <param name="enableBit">NA</param>
            <param name="enablePolarity">low:activeLow, high:activeHigh</param>
            <param name="directionChannel">NA</param>
            <param name="directionBit">NA</param>
            <param name="directionPolarity">low:activeLow, high:activeHigh</param>
            <param name="trajectoryType">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetPositionLimits(System.Byte,System.Int32,System.Byte,System.Int32,System.Byte)">
            <summary>
            Sets the servo position limits.
            </summary>
            <param name="axisId">NA</param>
            <param name="positiveChannel">NA</param>
            <param name="positiveBit">NA</param>
            <param name="negativeChannel">NA</param>
            <param name="negativeBit">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetBrakeConfig(System.Byte,System.Int32,System.Byte,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sets the brake configuration.
            </summary>
            <param name="axisId">NA</param>
            <param name="brakeChannel">NA</param>
            <param name="brakeBit">NA</param>
            <param name="polarity">NA</param>
            <param name="timeout">NA</param>
            <param name="delay">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisBufferMotionProfile(System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the motion profile parameters.
            </summary>
            <param name="axisId">NA</param>
            <param name="acceleration">NA</param>
            <param name="velocity">NA</param>
            <param name="jerk">NA</param>
            <param name="followingErrorLimit">NA</param>
            <param name="settleTime">NA</param>
            <param name="settleWindow">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetMonitorIdlePositionErrorParams(System.Byte,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Sets monitor idle position error parameters.
            </summary>
            <param name="axisId">NA</param>
            <param name="enable">NA</param>
            <param name="disableAxisOnError">NA</param>
            <param name="idleFollowingErrorEncCount">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisInitialize(System.Byte)">
            <summary>
            Initializes an axis.
            </summary>
            <param name="axisId">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisStartCapture(System.Byte,System.Byte,System.Byte,BAI.Systems.HwComm.XMsg.CaptureEdge,System.Byte)">
            <summary>
            Configures the capture input.
            </summary>
            <param name="axisId">NA</param>
            <param name="pinNo">NA</param>
            <param name="chNo">NA</param>
            <param name="captureEdge">NA</param>
            <param name="filter">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisFinishCapture(System.Byte,System.Byte,System.Byte)">
            <summary>
            Finish capture monitoring.
            </summary>
            <param name="axisId">NA</param>
            <param name="pinNo">NA</param>
            <param name="chNo">NA</param>
            <returns>Array containing captured data points</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisAbortCapture(System.Byte)">
            <summary>
            Abort capture monitoring.
            </summary>
            <param name="axisId">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetBreakpointOnSensor(System.Byte,BAI.Systems.HwComm.XMsg.BreakPointEnum,BAI.Systems.HwComm.XMsg.BreakPointActions,System.Int32,System.Byte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="breakPoint"></param>
            <param name="breakPointAction"></param>
            <param name="triggerSignalChannel">NA</param>
            <param name="triggerSignalBit"></param>
            <param name="signalHigh">Indicates the trigger edge.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetBreakpointOnMultipleSensors(System.Byte,BAI.Systems.HwComm.XMsg.BreakPointEnum,BAI.Systems.HwComm.XMsg.BreakPointActions,BAI.Systems.HwComm.XMsg.BreakPointSensor[],BAI.Systems.HwComm.XMsg.BreakPointSensorLogic)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="breakPoint"></param>
            <param name="breakPointAction"></param>
            <param name="triggerSensors"></param>
            <param name="sensorLogic"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetBreakpointOnPosition(System.Byte,BAI.Systems.HwComm.XMsg.BreakPointEnum,BAI.Systems.HwComm.XMsg.BreakPointActions,BAI.Systems.HwComm.XMsg.BreakPointConditions,System.Int32)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="breakPoint"></param>
            <param name="breakPointAction"></param>
            <param name="triggerSignalChannel">NA</param>
            <param name="position"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisClearBreakpoint(System.Byte,BAI.Systems.HwComm.XMsg.BreakPointEnum)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="breakPoint"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIsBreakpointSet(System.Byte,BAI.Systems.HwComm.XMsg.BreakPointEnum)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="breakPoint"></param>
            <returns>Indicates whether the breakpoint is set or not.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisResetEncoderToZero(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetEmsMotionProfile(System.Byte,System.Int32,System.Int32)">
            <summary>
            Sets the motion profile parameters for EMS.
            </summary>
            <param name="axisId">NA</param>
            <param name="deceleration">NA</param>
            <param name="followingErrorLimit">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetMotionControllerParam(System.Byte,BAI.Systems.HwComm.XMsg.MotionControllerParamsID)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetCurrentSenseBitConfig(System.Byte,System.Int32,System.Byte,System.Single,System.Single,BAI.Systems.HwComm.XMsg.AdcBitConfiguration)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Channel">NA</param>
            <param name="Bit"></param>
            <param name="currentConversionRate"></param>
            <param name="voltageForZeroAmps"></param>
            <param name="config"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetMotionCurrentMaxPeak(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisStartParallelMotion">
            <summary>
            Starts motion on all configured axes.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisConfigureHallSensors(System.Byte,System.Byte,System.Byte,System.Boolean,System.Byte,System.Byte,System.Boolean,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Configures the hall sensors.
            </summary>
            <param name="axisId">NA</param>
            <param name="sensor1_ch">HallA</param>
            <param name="sensor1_bit">HallA</param>
            <param name="sensor1_pol">HallA</param>
            <param name="sensor2_ch">HallB</param>
            <param name="sensor2_bit">HallB</param>
            <param name="sensor2_pol">HallB</param>
            <param name="sensor3_ch">HallC</param>
            <param name="sensor3_bit">HallC</param>
            <param name="sensor3_pol">HallC</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisBufferPvtPoints(System.Byte,BAI.Systems.HwComm.XMsg.PvtPoint[])">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="pvtPoints"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetMotionControllerParam(System.Byte,BAI.Systems.HwComm.XMsg.MotionControllerParamsID,System.Single)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param"></param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetActualPosition(System.Byte,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Value">New encoder value</param>
            <param name="Reference">Reference for the new encoder value</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisConfigurePhaseCurrentSensors(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Configures the phase current sensors.
            </summary>
            <param name="axisId">NA</param>
            <param name="PhaseCurrentA_ch">PhaseCurrentA</param>
            <param name="PhaseCurrentA_bit">PhaseCurrentA</param>
            <param name="PhaseCurrentB_ch">PhaseCurrentB</param>
            <param name="PhaseCurrentB_bit">PhaseCurrentB</param>
            <param name="PhaseCurrentC_ch">PhaseCurrentC</param>
            <param name="PhaseCurrentC_bit">PhaseCurrentC</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisConfigurePhaseVoltagePwm(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Configures the phase voltage outputs.
            </summary>
            <param name="axisId">NA</param>
            <param name="PhaseVoltageA_ch">Phase voltage A PWM output</param>
            <param name="PhaseVoltageB_ch">Phase voltage B PWM output</param>
            <param name="PhaseVoltageC_ch">Phase voltage C PWM output</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetMotionErrorFlag(System.Byte,System.Boolean)">
            <summary>
            Sets the motion error flag(used for tracing triggers)
            </summary>
            <param name="axisId">NA</param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetMotionErrorFlag(System.Byte)">
            <summary>
            Gets the motion error flag(used for tracing triggers)
            </summary>
            <param name="axisId">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetPositionControlType(System.Byte,BAI.Systems.HwComm.XMsg.PositionControlTypeID)">
            <summary>
            Sets the motion control type(PID, DirectTrajectory)
            </summary>
            <param name="axisId">NA</param>
            <param name="Type"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetPositionControlType(System.Byte)">
            <summary>
            Gets the motion control type
            </summary>
            <param name="axisId">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.SetBrushlessFocParam(System.Byte,BAI.Systems.HwComm.XMsg.BrushlessFocParamsID,System.Single)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param">NA</param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.GetBrushlessFocParam(System.Byte,BAI.Systems.HwComm.XMsg.BrushlessFocParamsID)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.SetBrushlessMotorParam(System.Byte,BAI.Systems.HwComm.XMsg.BrushlessMotorParamsID,System.Single)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param">NA</param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.GetBrushlessMotorParam(System.Byte,BAI.Systems.HwComm.XMsg.BrushlessMotorParamsID)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.SetBrushlessAlignmentParam(System.Byte,BAI.Systems.HwComm.XMsg.BrushlessAlignmentParamsID,System.Int32)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param">NA</param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.GetBrushlessAlignmentParam(System.Byte,BAI.Systems.HwComm.XMsg.BrushlessAlignmentParamsID)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.SetBrushlessControllerParam(System.Byte,BAI.Systems.HwComm.XMsg.BrushlessControllerParamsID,System.Single)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param">NA</param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.GetBrushlessControllerParam(System.Byte,BAI.Systems.HwComm.XMsg.BrushlessControllerParamsID)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Param">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisConfigureFocStepResponse(System.Byte,System.Single,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="HighValueInAmps">NA</param>
            <param name="LowValueInAmps">NA</param>
            <param name="PhaseEnergizeCycles">NA</param>
            <param name="SelectedPhaseToEnergize">NA</param>
            <param name="NoOfCyclesToBeExecuted">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisConfigureInjectionSignal(System.Byte,BAI.Systems.HwComm.XMsg.InjectionMeasurementType,BAI.Systems.HwComm.XMsg.InjectionSignalType,BAI.Systems.HwComm.XMsg.InjectionSignalPoint,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="MeasurementType">NA</param>
            <param name="SignalType">NA</param>
            <param name="InjectionPoint">NA</param>
            <param name="SignalMagnitude">NA</param>
            <param name="SignalStartFrequency">NA</param>
            <param name="SignalStopFrequency">NA</param>
            <param name="SignalTimeDurationInSec">NA</param>
            <param name="PercentageIncrease">Percentage increase from cycle to cycle</param>
            <param name="SineWaveCycles">Number of complete sine cycles for one frequency</param>
            <param name="InjectionDelayInSec">NA</param>
            <param name="LinearFrequencyIncrease">Increase the frequency linear or logarithmic</param>
            <param name="OpenLoopMode">controller mode</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIndexMonitorConfigure(System.Byte,System.Byte,System.Byte,BAI.Systems.HwComm.XMsg.CaptureEdge,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="CaptureChannel">NA</param>
            <param name="CapturePin">NA</param>
            <param name="CapturePolarity">NA</param>
            <param name="EncoderCntPerRev">NA</param>
            <param name="EncoderDriftLimit">NA</param>
            <param name="StopOnDriftError">NA</param>
            <param name="MonitorAtServoLevel">Monitor index at servo level or start/stop motion</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIndexMonitorEnable(System.Byte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Value">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIndexMonitorGetCapturedData(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="Index">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIndexMonitorGetCurrentData(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIndexMonitorGetDataSize(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIndexMonitorGetAccumulatedDrift(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisIndexMonitorForceError(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetLastMotionInfo(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <returns>N/A</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSyncConfigure(System.Byte,BAI.Systems.HwComm.XMsg.SyncGeneratorClockRate,System.Byte)">
            <summary>
            Axis sync component
            </summary>
            <param name="axisId">NA</param>
            <param name="ClockRate">NA</param>
            <param name="EStopDebounce">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSyncEnable(System.Byte,System.Boolean)">
            <summary>
            Enable or disable sync component
            </summary>
            <param name="axisId">NA</param>
            <param name="Value">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetEncoderParam(System.Byte,BAI.Systems.HwComm.XMsg.EncoderParamsID,System.Int32)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetEncoderParam(System.Byte,BAI.Systems.HwComm.XMsg.EncoderParamsID)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisConfigureDynamicBrake(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Single,System.Int32)">
            <summary>
            Configures the dynamic brake.
            </summary>
            <param name="axisId">NA</param>
            <param name="En_ch">half-bridge enable channel</param>
            <param name="En_bit">half-bridge enable bit</param>
            <param name="In_phA_ch">Phase A gate input channel</param>
            <param name="In_phA_bit">Phase A gate input bit</param>
            <param name="In_phB_ch">Phase B gate input channel</param>
            <param name="In_phB_bit">Phase B gate input bit</param>
            <param name="In_phC_ch">Phase C gate input channel</param>
            <param name="In_phC_bit">Phase C gate input bit</param>
            <param name="CurrentLimit">Maximum allowed current during braking [A]</param>
            <param name="DurationLimit">Maximum time for dynamic brake engagement[mS]</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisDynamicBrakeEnable(System.Byte,System.Boolean)">
            <summary>
            Enable or disable dynamic brake component
            </summary>
            <param name="axisId">NA</param>
            <param name="Value">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisBufferPositionIoTrigger(System.Byte,System.Byte,System.Int32)">
            <summary>
            Set an IO to trigger at a specified position
            </summary>
            <param name="axisId"></param>
            <param name="durationMonitorId"></param>
            <param name="encoderPositionTrigger"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisBufferSyncpulseIoTrigger(System.Byte,System.Byte,System.Int32)">
            <summary>
            Set an IO to trigger at a specified sync pulse count
            </summary>
            <param name="axisId"></param>
            <param name="durationMonitorId"></param>
            <param name="syncPulseCountTrigger"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisClearBufferedIoTriggers(System.Byte)">
            <summary>
            Clear outstanding triggers
            </summary>
            <param name="axisId"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisConfigureI2t(System.Byte,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <param name="ContinuousCurrentLimit">Nominal current for the motor [A]</param>
            <param name="PeakCurrent">I2T over-current protection limit [A]</param>
            <param name="TimePeak">Max allowed time for PeakCurrent [seconds]</param>
            <param name="CurrentPercentageFoldback">Percentage out of Continuous current for foldback [%]</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.GetI2tSumIntegratedCurrents(System.Byte)">
            <summary>
            
            </summary>
            <param name="axisId">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisEnableI2t(System.Byte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Enable">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisBufferPositionEventTrigger(System.Byte,System.Int32)">
            <summary>
            Set the position reached event to trigger at a specified position
            </summary>
            <param name="axisId"></param>
            <param name="encoderPositionTrigger"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisTestEnable(System.Byte,System.Boolean)">
            <summary>
            Test method used for quick functionality tests
            </summary>
            <param name="Axis">NA</param>
            <param name="Enable">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetCurrentOutOfSpecOffset(System.Byte,BAI.Systems.HwComm.XMsg.DiagnosticInfoEnum,System.Single)">
            <summary>
            Sets the offset applied to DiagnosticInfoEnum.Current or DiagnosticInfoEnum.TotalCharge value.
            </summary>
            <param name="Axis">NA</param>
            <param name="Signal">Diagnostic signal</param>
            <param name="Offset"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetCurrentOutOfSpecOffset(System.Byte,BAI.Systems.HwComm.XMsg.DiagnosticInfoEnum)">
            <summary>
            Gets the offset applied to DiagnosticInfoEnum.Current or DiagnosticInfoEnum.TotalCharge value.
            </summary>
            <param name="Axis">NA</param>
            <param name="Signal">Diagnostic signal</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetMotorCurrentOutOfSpecOffset(System.Byte,System.Single)">
            <summary>
            Sets the offset applied to MotorCurrent value.
            </summary>
            <param name="Axis">NA</param>
            <param name="Offset"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisGetMotorCurrentOutOfSpecOffset(System.Byte)">
            <summary>
            Gets the offset applied to MotorCurrent value.
            </summary>
            <param name="Axis">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisConfigureMotorPowerMonitor(System.Byte,System.Int32,System.Byte,System.Single,System.Single)">
            <summary>
            Configure the switched motor power ADC input
            </summary>
            <param name="axisId">NA</param>
            <param name="PowerInputChannel"></param>
            <param name="PowerInputBit"></param>
            <param name="AdcConversionFactor">Conversion factor from ADC to 48V</param>
            <param name="PowerTripPoint">Fatal limit for power [V]</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisBufferPositionEventBasedOnSyncPulseTrigger(System.Byte,System.Int32)">
            <summary>
            Set the position event to trigger at a specified sync pulse
            </summary>
            <param name="axisId"></param>
            <param name="syncPulseCountTrigger"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetIdlePositionDeltaMonitorParams(System.Byte,System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
            Sets idle position delta monitor parameters.
            </summary>
            <param name="axisId">NA</param>
            <param name="enable">NA</param>
            <param name="disableAxisOnError">NA</param>
            <param name="idlePositionDeltaEncCountMax">NA</param>
            <param name="idlePositionDeltaEncCountDecay">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetOnClientDisconnectBehavior(System.Byte,BAI.Systems.HwComm.XMsg.OnClientDisconnectBehavior)">
            <summary>
            Sets the axis behavior when the Client disconnects (e.g. EC).
            </summary>
            <param name="axisId">NA</param>
            <param name="Action">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSetCurrentSurgeConfig(System.Byte,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Configure Current Surge protection
            </summary>
            <param name="axisId">NA</param>
            <param name="enable">NA</param>
            <param name="thresh_1">NA</param>
            <param name="tsec_1">NA</param>
            <param name="thresh_2">NA</param>
            <param name="tsec_2">NA</param>
            <param name="thresh_3">NA</param>
            <param name="tsec_3">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.SetAxisSensorLimits(System.Byte,BAI.Systems.HwComm.XMsg.AxisSensorEnum,System.Single,System.Single)">
            <summary>
            Sets the axis minimum and maximum limits for a specific sensor.
            </summary>
            <param name="axisId">NA</param>
            <param name="sensor">NA</param>
            <param name="minLimit">NA</param>
            <param name="maxLimit">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.GetAxisSensorLimits(System.Byte,BAI.Systems.HwComm.XMsg.AxisSensorEnum)">
            <summary>
            Gets the axis minimum and maximum limits for a specific sensor.
            </summary>
            <param name="axisId">NA</param>
            <param name="sensor">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ICommonMotionControlXMsgDriver.AxisSyncStartCounting(System.Byte)">
            <summary>
            Start sync counting
            </summary>
            <param name="axisId">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.SetServoPositionParam(System.Byte,BAI.Systems.HwComm.XMsg.PositionServoParamsID,System.Single)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param">NA</param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.GetServoPositionParam(System.Byte,BAI.Systems.HwComm.XMsg.PositionServoParamsID)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.SetPositionServoFilterParam(System.Byte,BAI.Systems.HwComm.XMsg.PositionServoFilterParamsID,System.Single)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.GetPositionServoFilterParam(System.Byte,BAI.Systems.HwComm.XMsg.PositionServoFilterParamsID)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.SetPositionServoFilterEnable(System.Byte,BAI.Systems.HwComm.XMsg.PositionServoFilterEnableID,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Filter"></param>
            <param name="Value">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.GetPositionServoFilterEnable(System.Byte,BAI.Systems.HwComm.XMsg.PositionServoFilterEnableID)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Filter"></param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.AxisSetServoParams(System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Sets the servo parameters.
            </summary>
            <param name="axisId">NA</param>
            <param name="integrationLimit">NA</param>
            <param name="kaff">NA</param>
            <param name="kd">NA</param>
            <param name="ki">NA</param>
            <param name="kp">NA</param>
            <param name="kvff">NA</param>
            <param name="koutPer">NA</param>
            <param name="derivativeTime">NA</param>
            <param name="motorBiasPer">NA</param>
            <param name="motorLimitPer">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.AxisSetControllerOutputParam(System.Byte,BAI.Systems.HwComm.XMsg.ControllerOutputParamsID,System.Int32)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.AxisGetControllerOutputParam(System.Byte,BAI.Systems.HwComm.XMsg.ControllerOutputParamsID)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.AxisSetControllerOutputType(System.Byte,BAI.Systems.HwComm.XMsg.ControllerOutputTypeID)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.AxisGetControllerOutputType(System.Byte)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.AxisSetEncoderOutOfSpecOffset(System.Byte,System.Int32)">
            <summary>
            Sets the offset applied to Pressure value.
            </summary>
            <param name="Axis">NA</param>
            <param name="Offset"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.AxisGetEncoderOutOfSpecOffset(System.Byte)">
            <summary>
            Gets the offset applied to Pressure value.
            </summary>
            <param name="Axis">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IServoLoopXMsgDriver.AxisEnableMotorAndDisengageBrake(System.Byte,System.Boolean)">
            <summary>
            Special enable motor for axis supporting brake
            </summary>
            <param name="Axis">NA</param>
            <param name="Enable">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IStepperMotorXMsgDriver.SetStepperMotorParam(System.Byte,BAI.Systems.HwComm.XMsg.StepperMotorParamsID,System.Single)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IStepperMotorXMsgDriver.GetStepperMotorParam(System.Byte,BAI.Systems.HwComm.XMsg.StepperMotorParamsID)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IStepperMotorXMsgDriver.SetStepperCompensation(System.Byte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Value">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IStepperMotorXMsgDriver.GetStepperCompensation(System.Byte)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IStepperMotorXMsgDriver.AxisSetStepperAxisParams(System.Byte,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the stepper parameters.
            </summary>
            <param name="axisId">NA</param>
            <param name="pwmMaxPeriod">NA</param>
            <param name="pwmFrequency">NA</param>
            <param name="stepsCountPerEncoder">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IStepperMotorXMsgDriver.AxisGetStepperMotionPeriodsParam(System.Byte,BAI.Systems.HwComm.XMsg.MotionPeriods)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IStepperMotorXMsgDriver.AxisSetStepperMotionPeriodsParam(System.Byte,BAI.Systems.HwComm.XMsg.MotionPeriods,System.Single)">
            <summary>
            
            </summary>
            <param name="Axis">NA</param>
            <param name="Param"></param>
            <param name="Value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDcMotorXMsgDriver.AxisSetDcParams(System.Byte,System.Int32,System.Byte,System.Boolean,System.Int32,System.Byte,System.Boolean,System.Byte,System.Byte,System.Int32)">
            <summary>
            Sets the DC motor parameters.
            </summary>
            <param name="axisId">NA</param>
            <param name="homeChannel">NA</param>
            <param name="homeBit">NA</param>
            <param name="homeActiveHigh">NA</param>
            <param name="awayChannel">NA</param>
            <param name="awayBit">NA</param>
            <param name="awayActiveHigh">NA</param>
            <param name="homeDutyCyclePercentage">NA</param>
            <param name="awayDutyCyclePercentage">NA</param>
            <param name="motionTimeout">Milliseconds</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDcMotorXMsgDriver.AxisSetDcMotorOn(System.Byte,BAI.Systems.HwComm.XMsg.DcMotorPositions)">
            <summary>
            Sets the DC motor parameters.
            </summary>
            <param name="axisId">NA</param>
            <param name="position">NA</param>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.DioSignalChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.AdcValueCrossedRange">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.AdcSignalChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.AdcSignalPeriodicUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.IoDurationMonitorStateChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetDioBitConfig(System.Int32,System.Byte,BAI.Systems.HwComm.XMsg.DioBitConfiguration)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="Bit"></param>
            <param name="config"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetDioBitConfig(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetChannel(System.Int32)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetDioBitState(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetDioBitState(System.Int32,System.Byte,BAI.Systems.HwComm.XMsg.UiIndicatorState,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <param name="state">The state to which to set the indicator.</param>
            <param name="Period">Microseconds</param>
            <param name="Dutycycle">0-100%</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetDioBitState(System.Int32,System.Byte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <param name="value">0: Inactive 1: Active</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetChannel(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="values">0 bits: Inactive 1 bits: Active</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetPulse(System.Int32,System.Byte,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <param name="Period">Microseconds</param>
            <param name="Dutycycle">0-100%</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetConfiguredChannels">
            <summary>
            Returns a comma-separated list of configured channels
            </summary>
            <returns>List of configured channels</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetConfiguredBitsByChannel(System.Int32)">
            <summary>
            Returns a new line comma-separated list of configured bits, signal name, IOMode and value
            </summary>
            <param name="Channel">NA</param>
            <returns>String of new line comma-separated list of configured bits, signal name, IOMode and value</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetAdcLine(System.Byte,System.Byte,System.UInt16)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetAdcLine(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetAdcLineThreshold(System.Byte,System.Byte,System.Boolean,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <param name="enable"></param>
            <param name="lowWarningThreshold"></param>
            <param name="highWarningThreshold"></param>
            <param name="lowFatal"></param>
            <param name="highFatal"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetAdcLineThreshold(System.Byte,System.Byte,System.Boolean,System.UInt16,System.UInt16)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <param name="enable"></param>
            <param name="lowThreshold"></param>
            <param name="highThreshold"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetAdcBitConfig(System.Int32,System.Byte,BAI.Systems.HwComm.XMsg.AdcBitConfiguration)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="Bit"></param>
            <param name="config"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetAdcBitConfig(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.StartSignalMonitor(System.UInt16,System.Byte,System.Boolean,BAI.Systems.HwComm.XMsg.MonitorSignalType,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Message for configuring and starting/stopping IO frequency monitoring.
            </summary>
            <param name="Channel">The channel to which the monitored IO belongs.</param>
            <param name="Bit">Monitored IO bit.</param>
            <param name="Enable">If true: configures and starts IO frequency monitoring on the specified channel/bit; If false: disables IO frequency monitoring on the specified channel/bit.</param>
            <param name="SignalType">The type of signal to be monitored. Can be ADC (Not implemented), Current (Not implemented) or IoFrequency.</param>
            <param name="LowFatal">The low fatal value of the monitored IO frequency.</param>
            <param name="HighFatal">The high fatal value of the monitored IO frequency.</param>
            <param name="LowWarningThreshold">The low warning threshold of the monitored IO frequency.</param>
            <param name="HighWarningThreshold">The high warning threshold of the monitored IO frequency.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.StartSignalMonitor(System.UInt16,System.Byte,System.Boolean,BAI.Systems.HwComm.XMsg.MonitorSignalType,System.UInt16,System.UInt16)">
            <summary>
            Message for configuring and starting/stopping IO frequency monitoring.
            </summary>
            <param name="Channel">The channel to which the monitored IO belongs.</param>
            <param name="Bit">Monitored IO bit.</param>
            <param name="Enable">If true: configures and starts IO frequency monitoring on the specified channel/bit; If false: disables IO frequency monitoring on the specified channel/bit.</param>
            <param name="SignalType">The type of signal to be monitored. Can be ADC (Not implemented), Current (Not implemented) or IoFrequency.</param>
            <param name="LowThreshold">The low threshold of the monitored IO frequency.</param>
            <param name="HighThreshold">The high threshold of the monitored IO frequency.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.StartAdcDriver(System.UInt16)">
            <summary>
            
            </summary>
            <param name="samplingPeriod">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetAdcIndicatorParams(System.Int32,System.Byte,System.Int32,System.Int32,System.Byte,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="LedChannel">NA</param>
            <param name="LedBit"></param>
            <param name="LedPolarity">NA</param>
            <param name="AdcChannel">NA</param>
            <param name="AdcBit"></param>
            <param name="SetPoint">NA</param>
            <param name="Delta">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.ReadSignalDebounceTime(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <returns>Returns the debounce time for the signal</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.WriteSignalDebounceTime(System.Int32,System.Byte,System.UInt32)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="bit"></param>
            <param name="value">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetDacIndicatorParams(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="AdcChannel">NA</param>
            <param name="AdcBit"></param>
            <param name="MinAdcValue"></param>
            <param name="MaxAdcValue"></param>
            <param name="DacChannel">NA</param>
            <param name="MultiplyTerm">NA</param>
            <param name="AddTerm">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetDacLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetConfiguredDios">
            <summary>
            
            </summary>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetConfiguredAdcs">
            <summary>
            
            </summary>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetDioSignalFrequency(System.UInt16,System.Byte)">
            <summary>
            Retrieve the Fan TACH value for the specified channel
            </summary>
            <param name="Channel">The channel to which the monitored IO belongs.</param>
            <param name="Bit">Monitored IO bit.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.ConfigureIoOperation(BAI.Systems.HwComm.XMsg.IoOperationConfig[],BAI.Systems.HwComm.XMsg.IoOperationResult[])">
            <summary>
            
            </summary>
            <param name="ioConfigs"></param>
            <param name="ioResults"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.ClearAllIoOperations">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.I2CConfigure(BAI.Systems.HwComm.XMsg.I2cPeripheralEnum,BAI.Systems.HwComm.XMsg.I2cSclPinEnum,BAI.Systems.HwComm.XMsg.I2cSdaPinEnum)">
            <summary>
            
            </summary>
            <param name="pInterface">NA</param>
            <param name="sclBit"></param>
            <param name="sdaBit"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetDacBitConfig(System.Int32)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetDacChannelState(System.Int32,System.UInt16)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="value">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.I2CWriteRegister(System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="deviceAddress">NA</param>
            <param name="registerAddress"></param>
            <param name="data"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.I2CAvailable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.ConfigureAdcMultiplexer(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Configures the adc multiplexer ios.
            </summary>
            <param name="a_ch"></param>
            <param name="a_bit"></param>
            <param name="b_ch"></param>
            <param name="b_bit"></param>
            <param name="c_ch"></param>
            <param name="c_bit"></param>
            <param name="adc_ch"></param>
            <param name="adc_bit"></param>
            <param name="high_freq_mode"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetAdcChannelDualMode(System.UInt16,System.Boolean)">
            <summary>
            Set adc channel dual mode ADC1/2
            </summary>
            <param name="Channel"></param>
            <param name="DualMode"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.StartAdcChannelConversion(System.UInt16,System.UInt16)">
            <summary>
            Start adc channel conversion
            </summary>
            <param name="Channel"></param>
            <param name="SamplingPeriod"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetAdcPeriodicUpdateFrq(System.Byte,System.Byte,System.UInt16)">
            <summary>
            Set adc periodic update frequency
            </summary>
            <param name="Channel"></param>
            <param name="Bit"></param>
            <param name="Period">Number of seconds between adc updates</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.ConfigureDurationMonitor(BAI.Systems.HwComm.XMsg.DioDurationMonitorConfig[],BAI.Systems.HwComm.XMsg.DioDurationMonitorConfig[],BAI.Systems.HwComm.XMsg.DioDurationMonitorConfig[],BAI.Systems.HwComm.XMsg.AdcDurationMonitorConfig[],BAI.Systems.HwComm.XMsg.AdcDurationMonitorConfig[],BAI.Systems.HwComm.XMsg.AdcDurationMonitorConfig[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dioDurationStarter"></param>
            <param name="dioDurationStopper"></param>
            <param name="validDiosForMonitoring"></param>
            <param name="adcDurationStarter"></param>
            <param name="adcDurationStopper"></param>
            <param name="validAdcsForMonitoring"></param>
            <param name="timeoutInMs"></param>
            <param name="debounceInMs"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.ClearAllDurationMonitors">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetDioFrequencyOffset(System.Byte,System.Byte,System.Int32)">
            <summary>
            Set ofset for dio frequency type IO
            </summary>
            <param name="Channel"></param>
            <param name="Bit"></param>
            <param name="Offset"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetDioFrequencyOffset(System.Byte,System.Byte)">
            <summary>
            Set ofset for dio frequency type IO
            </summary>
            <param name="Channel"></param>
            <param name="Bit"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetCpuTemperatureOffset(System.UInt16)">
            <summary>
            Set CPU temperature offset for out of spec
            </summary>
            <param name="Offset"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetCpuTemperatureOffset">
            <summary>
            Get CPU temperature offset for out of spec
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.SetAdcOffset(System.Byte,System.Byte,System.Single)">
            <summary>
            Set adc offset for out of spec. Offset is applied only on AdcSignalPeriodicUpdate event.
            </summary>
            <param name="Channel"></param>
            <param name="Bit"></param>
            <param name="Offset"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.GetAdcOffset(System.Byte,System.Byte)">
            <summary>
            Get adc offset for out of spec. Offset is applied only on AdcSignalPeriodicUpdate event.
            </summary>
            <param name="Channel"></param>
            <param name="Bit"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDIOXMsgDriver.DioScanI2cBus">
            <summary>
            Scans the i2c bus for active devices
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IUnsolicitedDIOXMsgDriver.DiChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IUnsolicitedDIOXMsgDriver.DoChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.SetAdcScaleFactor(System.Byte,System.Single)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="ScalefactorK">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.GetAdcScaleFactor(System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.SetAnalogFilterb0(System.Byte,System.Single)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="FilterB0">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.GetAnalogFilterb0(System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>type 32 bit float, units na</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.SetAnalogFilterb1(System.Byte,System.Single)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="FilterB1">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.GetAnalogFilterb1(System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>type 32 bit float, units na</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.SetAnalogFilterb2(System.Byte,System.Single)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="FilterB2">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.GetAnalogFilterb2(System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>type 32 bit float, units na</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.SetAnalogFiltera0(System.Byte,System.Single)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="FilterA0">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.GetAnalogFiltera0(System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>type 32 bit float, units na</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.SetAnalogFiltera1(System.Byte,System.Single)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="FilterA2">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.GetAnalogFiltera1(System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>type 32 bit float, units na</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.SetAnalogFilterk(System.Byte,System.Single)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="FilterK">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.GetAnalogFilterk(System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>type 32 bit float, units na</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.EnableAnalogFilter(System.Byte,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <param name="EnableFilter">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.IsAnalogFilterEnabled(System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>type bool (char) 0 = false / non zero = true</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IADCXMsgDriver.ReadAdc(System.Byte)">
            <summary>
            
            </summary>
            <param name="Channel">NA</param>
            <returns>type 32 bit float</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IRS232PassthroughXMsgDriver.Rs232Open(System.String,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="Device">NA</param>
            <param name="Baud">Bits/sec</param>
            <param name="Bits">7 or 8 bits per byte</param>
            <param name="Parity">0, 1, or 2</param>
            <param name="Stopbits">1 or 2</param>
            <returns>tcp port (16 bit unsigned int)</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IRS232PassthroughXMsgDriver.Rs232Close(System.String)">
            <summary>
            
            </summary>
            <param name="Device">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerConfigure(System.UInt32,System.UInt32)">
            <summary>
            N/A
            </summary>
            <param name="SpiFreq">SPI Freq divider</param>
            <param name="SpiSamplePeriod">How many SPI samples we skip before actually reading one</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerIsInitialized">
            <summary>
            N/A
            </summary>
            <returns>Is initialized?</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetCcd">
            <summary>
            N/A
            </summary>
            <returns>Current CCD value</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerStartAlign(System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            N/A
            </summary>
            <param name="RobotUnit"></param>
            <param name="Station"></param>
            <param name="PostAlignAngle"></param>
            <param name="AlignRadial"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerEndAlign">
            <summary>
            N/A
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerAlignWafer">
            <summary>
            N/A
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetAlignResult">
            <summary>
            N/A
            </summary>
            <returns>Struct containing raw and station-adjusted offsets of the most recent successful alignment</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetScandata(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Gets scan data
            </summary>
            <param name="startIndex">The array start index.</param>
            <param name="endIndex">The array end index.</param>
            <param name="secondDerivative">True if ccd is returned, false if ccd2 is returned.</param>
            <returns>The scan data.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetScandataSize">
            <summary>
            Gets scan data size
            </summary>
            <returns>Aligner data scan size.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerSetArmParam(BAI.Systems.HwComm.XMsg.OfaRobotArmParam,System.Int32,System.Single)">
            <summary>
            Sets the value of ArmR or ArmT for a given end effecter.
            </summary>
            <param name="param">Enum representing either ArmR or ArmT.</param>
            <param name="ee">Enum representing which EE to set the value for.</param>
            <param name="value">Desired value of the specified parameter.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetArmParam(BAI.Systems.HwComm.XMsg.OfaRobotArmParam,System.Int32)">
            <summary>
            Gets the value of ArmR or ArmT for a given end effecter.
            </summary>
            <param name="param">Enum representing either ArmR or ArmT.</param>
            <param name="ee">Enum representing which EE to get the value for.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetInt32Param(BAI.Systems.HwComm.XMsg.MarathonAlignerIntParam)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetFloatParam(BAI.Systems.HwComm.XMsg.MarathonAlignerFloatParam)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetByteParam(BAI.Systems.HwComm.XMsg.OfaAlignmentByteParam)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerSetInt32Param(BAI.Systems.HwComm.XMsg.MarathonAlignerIntParam,System.Int32)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerSetFloatParam(BAI.Systems.HwComm.XMsg.MarathonAlignerFloatParam,System.Single)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerSetByteParam(BAI.Systems.HwComm.XMsg.OfaAlignmentByteParam,System.Byte)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerSetAlignerFeature(BAI.Systems.HwComm.XMsg.MarathonAlignerFeaturesEnum)">
            <summary>
            
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetAlignerFeature">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerDumpDebugdata">
            <summary>
            Gets debug data
            </summary>
            <returns>The aligner data and logs</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerSetBoolParam(BAI.Systems.HwComm.XMsg.MarathonAlignerBoolParam,System.Boolean)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetBoolParam(BAI.Systems.HwComm.XMsg.MarathonAlignerBoolParam)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetCcdAndEncoder">
            <summary>
            Gets ccd and encoder pair
            </summary>
            <returns>The aligner ccd and angle</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerRealignWafer(System.Int32,System.Int32,System.Single)">
            <summary>
            Aligns the wafer relative to the new robot arm and wafer angle
            </summary>
            <param name="RobotUnit"></param>
            <param name="Station"></param>
            <param name="ReAlignAngle"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetNotchInfo">
            <summary>
            Gets ccd and encoder pair
            </summary>
            <returns>Notch info - peaks, width</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerSetArmAndWaferParam(BAI.Systems.HwComm.XMsg.OfaRobotArmParam,System.Int32,BAI.Systems.HwComm.XMsg.SoCWaferSize,System.Single)">
            <summary>
            Sets the value of ArmR or ArmT for a given end effecter and wafer size.
            </summary>
            <param name="param">Enum representing either ArmR or ArmT.</param>
            <param name="ee">Enum representing which EE to set the value for.</param>
            <param name="waferSize">Wafer size for the arm param.</param>
            <param name="value">Desired value of the specified parameter.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAlignerXMsgDriver.MarathonAlignerGetArmAndWaferParam(BAI.Systems.HwComm.XMsg.OfaRobotArmParam,System.Int32,BAI.Systems.HwComm.XMsg.SoCWaferSize)">
            <summary>
            Gets the value of ArmR or ArmT for a given end effecter and wafer size.
            </summary>
            <param name="param">Enum representing either ArmR or ArmT.</param>
            <param name="ee">Enum representing which EE to get the value for.</param>
            <param name="waferSize">Wafer size for the arm param.</param>
            <returns></returns>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.AwcResultUpdate">
            <summary>
            Event sent when AWC results are available
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcConfigure(System.UInt32,System.UInt32)">
            <summary>
            N/A
            </summary>
            <param name="SpiFreq">SPI Freq divider</param>
            <param name="SpiSamplePeriod">How many SPI samples we skip before actually reading one</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcStart(BAI.Systems.HwComm.XMsg.EndEffecterEnum,BAI.Systems.HwComm.XMsg.SoCWaferSize,System.Int32,System.Int32)">
            <summary>
            Starts data collection
            </summary>
            <param name="ee">end effector</param>
            <param name="waferSize">size of wafer</param>
            <param name="startPos">start position for data collection</param>
            <param name="centerPos">end effector calibrated center</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcFinish">
            <summary>
            Finishes data collection and processes the data
            </summary>
            <returns>lateral and radial offsets</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcGetCcd">
            <summary>
            N/A
            </summary>
            <returns>Current CCD value</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcGetScandata(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Gets scan data
            </summary>
            <param name="startIndex">The array start index.</param>
            <param name="endIndex">The array end index.</param>
            <param name="secondDerivative">True if ccd is returned, false if ccd2 is returned.</param>
            <returns>The scan data.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcGetScandataSize">
            <summary>
            Gets scan data size
            </summary>
            <returns>Aligner data scan size.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcIsInitialized">
            <summary>
            N/A
            </summary>
            <returns>Is initialized?</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcInitialize">
            <summary>
            Allocate buffers and get CCD reading ready
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcSetintparam(BAI.Systems.HwComm.XMsg.MarathonAWCIntParam,System.Int32)">
            <summary>
            Set int param
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcGetintparam(BAI.Systems.HwComm.XMsg.MarathonAWCIntParam)">
            <summary>
            Get int param
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcSetio(BAI.Systems.HwComm.XMsg.MarathonAWCIO,System.Int32,System.Byte)">
            <summary>
            Set IO configs
            </summary>
            <param name="param"></param>
            <param name="channel"></param>
            <param name="bit"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcSetboolparam(BAI.Systems.HwComm.XMsg.MarathonAWCBoolParam,System.Boolean)">
            <summary>
            Set bool param
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcGetboolparam(BAI.Systems.HwComm.XMsg.MarathonAWCBoolParam)">
            <summary>
            Get bool param
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcSetfloatparam(BAI.Systems.HwComm.XMsg.MarathonAWCFloatParam,System.Single)">
            <summary>
            Set float param
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcGetfloatparam(BAI.Systems.HwComm.XMsg.MarathonAWCFloatParam)">
            <summary>
            Get float param
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcSetalgoparam(BAI.Systems.HwComm.XMsg.MarathonAWCAlgoParam,System.Single)">
            <summary>
            Set float param
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcGetalgoparam(BAI.Systems.HwComm.XMsg.MarathonAWCAlgoParam)">
            <summary>
            Get float param
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IMarathonAWCXMsgDriver.MarathonAwcSetlenscorrections(System.Byte[])">
            <summary>
            Set calibrated lens corrects for the ccd reading
            </summary>
            <param name="Corrections"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerHomeAligner">
            <summary>
            Homes all axes of the OFA aligner. To home a single axis, use ALIGNER_HOME_SINGLE_AXIS instead.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerHomeSingleAxis(BAI.Systems.HwComm.XMsg.OfaAxisEnum)">
            <summary>
            Homes a single axis of the OFA aligner
            </summary>
            <param name="axis">The axis to be homed.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSetAllAxesEnable(System.Boolean)">
            <summary>
            Enable or disables theta and z axes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSetSingleAxisEnable(BAI.Systems.HwComm.XMsg.OfaAxisEnum,System.Boolean)">
            <summary>
            Enable or disables theta or z axis.
            </summary>
            <param name="param">Which axis to enable or disable</param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerAlignWafer(System.Int32,BAI.Systems.HwComm.XMsg.EndEffecterEnum,System.Single)">
            <summary>
            Align Wafer
            </summary>
            <param name="robotUnit">Robot unit number: an integer representing the robot unit that the wafer will be aligned to.</param>
            <param name="ee">Which end effecter to align to.</param>
            <param name="postalignangle">Final angle to end the align at.</param>
            <returns>Struct containing raw and station-adjusted offsets of the most recent successful alignment</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerRadialOffsetAlignWafer(System.Int32,BAI.Systems.HwComm.XMsg.EndEffecterEnum)">
            <summary>
            Align wafer and end with the raw offset vector aligned to the robot radial axis
            </summary>
            <param name="robotUnit">Robot unit number: an integer representing the robot unit that the wafer will be aligned to.</param>
            <param name="ee">Which end effecter to align to.</param>
            <returns>Struct containing raw and station-adjusted offsets of the most recent successful alignment</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerRealignWafer(System.Int32,BAI.Systems.HwComm.XMsg.EndEffecterEnum,System.Single)">
            <summary>
            Re-Align Wafer: recalculates offsets to correspond to the specified robot unit and station (EE) number
            </summary>
            <param name="robotUnit">Robot unit number: an integer representing the robot unit that the wafer will be re-aligned to.</param>
            <param name="ee">Which end effecter to realign to.</param>
            <param name="postAlignAngle">Final angle to which the fiducial will be aligned.</param>
            <returns>Struct containing raw and station-adjusted offsets of the most recent successful alignment</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetWafer(BAI.Systems.HwComm.XMsg.EndEffecterEnum,System.Single,System.Single)">
            <summary>
            Get wafer from end effecter
            </summary>
            <param name="ee">Which end effecter the wafer will be gotten from.</param>
            <param name="ZMoveOffset">Offset which will be added to atWaferPosition.</param>
            <param name="ZMoveDelay">Delay between the moves.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerPutWafer(BAI.Systems.HwComm.XMsg.EndEffecterEnum,System.Single,System.Single)">
            <summary>
            Put wafer to end effecter
            </summary>
            <param name="ee">Which end effecter the wafer will be put to.</param>
            <param name="ZMoveOffset">Offset which will be added to atWaferPosition.</param>
            <param name="ZMoveDelay">Delay between the moves.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerRetractChuck">
            <summary>
            Move chuck to the down position if there is no wafer on it
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerMapWafer">
            <summary>
            Map wafer presence on chuck
            </summary>
            <returns>Presence of wafer on chuck</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerMoveAbsolute(System.Single,BAI.Systems.HwComm.XMsg.MotionProfile,BAI.Systems.HwComm.XMsg.OfaAxisEnum)">
            <summary>
            Absolute Move: moves a specified axis to a specified absolute position.
            </summary>
            <param name="distance">The desired distance to move relative to the current axis' position.</param>
            <param name="profileName">Motion profile enum.</param>
            <param name="axis">The axis that will be moved.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetPosition(BAI.Systems.HwComm.XMsg.OfaAxisEnum)">
            <summary>
            GetPosition: Gets the position of axis in real units for axis
            </summary>
            <param name="axis">The axis for which position is desired</param>
            <returns>Position in real units of the requested OFA axis.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerMoveRelative(System.Single,BAI.Systems.HwComm.XMsg.MotionProfile,BAI.Systems.HwComm.XMsg.OfaAxisEnum)">
            <summary>
            Relative Move: moves a specified axis a specified distance relative to its current position.
            </summary>
            <param name="distance">The desired distance to move relative to the current axis' position.</param>
            <param name="profileName">Motion profile enum.</param>
            <param name="axis">The axis that will be moved.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerMoveAbsoluteSync(System.Single,BAI.Systems.HwComm.XMsg.MotionProfile,BAI.Systems.HwComm.XMsg.OfaAxisEnum)">
            <summary>
            Synchronous absolute Move: moves a specified axis to a specified absolute position and waits to complete before returning.
            </summary>
            <param name="distance">The desired distance to move relative to the current axis' position.</param>
            <param name="profileName">Motion profile enum.</param>
            <param name="axis">The axis that will be moved.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerMoveRelativeSync(System.Single,BAI.Systems.HwComm.XMsg.MotionProfile,BAI.Systems.HwComm.XMsg.OfaAxisEnum)">
            <summary>
            Synchronous relative Move: moves a specified axis a specified distance relative to its current position and waits to complete before returning.
            </summary>
            <param name="distance">The desired distance to move relative to the current axis' position.</param>
            <param name="profileName">Motion profile enum.</param>
            <param name="axis">The axis that will be moved.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetAligndata">
            <summary>
            Get Alignment Data: returns the offsets calculated for the most recent successful alignment
            </summary>
            <returns>Struct containing raw and station-adjusted offsets of the most recent successful alignment</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerResetAligner">
            <summary>
            Reset Aligner: sets current chuck axis encoder position to zero, clears errors, and enables the chuck and Z-axis motors
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetVersion">
            <summary>
            Get Version: returns current OFA firmware version information.
            </summary>
            <returns>String containing the current version of the OFA firmware.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetStatusbits">
            <summary>
            Request Aligner Status: returns a 32-bit status word representing the current status of the OFA.
            </summary>
            <returns>32-bit status word representing the current status of the OFA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSetSolenoid(System.Boolean)">
            <summary>
            Set Solenoid: turns the chuck vacuum solenoid ON or OFF.
            </summary>
            <param name="active">If true, will turn the chuck vacuum solenoid ON. If false, will turn the chuck vacuum solenoid OFF.</param>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerAddNotes(System.String)">
            <summary>
            Add Note to Non-Volatile Memory buffer
            </summary>
            <param name="note">Note to be added to the NVM buffer.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerDumpScandata">
            <summary>
            Dump scan data--not currently implemented
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerDisplayNotes">
            <summary>
            Display NVM Note buffer
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerRestoreNvm">
            <summary>
            Restore data values from NVM--not currently implemented
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerScanEdges">
            <summary>
            Obtain CCD coverage values also used for LED calibration--not currently implemented
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerStopMotion">
            <summary>
            Stop Motion using ACC parameter, without disabling the motor
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerWritetoNvm">
            <summary>
            Write to NVM for persistance--not currently implemented
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetInt32Param(BAI.Systems.HwComm.XMsg.MarathonAlignerIntParam)">
            <summary>
            Gets the value of a single OFA parameter of type: int32
            </summary>
            <param name="param">Enum representing the desired integer parameter (see documentation)</param>
            <returns>Value of the requested OFA parameter.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetFloatParam(BAI.Systems.HwComm.XMsg.MarathonAlignerFloatParam)">
            <summary>
            Gets the value of a single OFA parameter of type: float
            </summary>
            <param name="param">Enum representing desired float parameter (see documentation)</param>
            <returns>Value of the requested OFA parameter.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetByteParam(BAI.Systems.HwComm.XMsg.OfaAlignmentByteParam)">
            <summary>
            Gets the value of a single OFA parameter of type: char
            </summary>
            <param name="param">String representing the name of the desired parameter (see documentation)</param>
            <returns>Value of the requested OFA parameter.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSetInt32Param(BAI.Systems.HwComm.XMsg.MarathonAlignerIntParam,System.Int32)">
            <summary>
            Sets the value of a single OFA parameter of type: int32
            </summary>
            <param name="param">Enum representing the integer parameter to be changed (see documentation)</param>
            <param name="value">Desired value of the specified parameter.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSetFloatParam(BAI.Systems.HwComm.XMsg.MarathonAlignerFloatParam,System.Single)">
            <summary>
            Sets the value of a single OFA parameter of type: float
            </summary>
            <param name="param">Enum representing the float parameter to be changed (see documentation)</param>
            <param name="value">Desired value of the specified parameter.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSetByteParam(BAI.Systems.HwComm.XMsg.OfaAlignmentByteParam,System.Byte)">
            <summary>
            Sets the value of a single OFA parameter of type: char
            </summary>
            <param name="param">String representing the name of the parameter to be changed (see documentation)</param>
            <param name="value">Desired value of the specified parameter.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSetArmParam(BAI.Systems.HwComm.XMsg.OfaRobotArmParam,BAI.Systems.HwComm.XMsg.EndEffecterEnum,System.Single)">
            <summary>
            Sets the value of ArmR or ArmT for a given end effecter.
            </summary>
            <param name="param">Enum representing either ArmR or ArmT.</param>
            <param name="ee">Enum representing which EE to set the value for.</param>
            <param name="value">Desired value of the specified parameter.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetArmParam(BAI.Systems.HwComm.XMsg.OfaRobotArmParam,BAI.Systems.HwComm.XMsg.EndEffecterEnum)">
            <summary>
            Gets the value of ArmR or ArmT for a given end effecter.
            </summary>
            <param name="param">Enum representing either ArmR or ArmT.</param>
            <param name="ee">Enum representing which EE to get the value for.</param>
            <returns>Value of the requested OFA parameter.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSaveAppConfig">
            <summary>
            Saves the OFA ArmR and ArmT parameters in the configuration file.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerLoadAppConfig">
            <summary>
            Loads the OFA ArmR and ArmT parameters from the configuration file.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.StartWaferCenterDetect(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ee">1=EE1, 2=EE2</param>
            <param name="startPos">Starting encoder position of End Effector performing AWC</param>
            <param name="centerPos">Expected encoder position of peak line sensor coverage value during AWC</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.FinishWaferCenterDetect">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetVacuumLimit(BAI.Systems.HwComm.XMsg.OFAVacuumTypesEnum,BAI.Systems.HwComm.XMsg.HiLowStates)">
            <summary>
            Gets the value of the OFA vacuum limit
            </summary>
            <param name="vacuumType">Enum representing the type of the OFA vacuum limit(House/Differential) requested.</param>
            <param name="vacuumParam">Enum representing the requested limit (high/low limit).</param>
            <returns>Value of the requested vacuum limit.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSetVacuumLimit(BAI.Systems.HwComm.XMsg.OFAVacuumTypesEnum,BAI.Systems.HwComm.XMsg.HiLowStates,System.Single)">
            <summary>
            Sets the value of the OFA vacuum limit
            </summary>
            <param name="vacuumType">Enum representing the type of the OFA vacuum limit(House/Differential).</param>
            <param name="vacuumParam">Enum representing the limit (high/low limit) to be changed.</param>
            <param name="value">Desired value of the specified parameter.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerReadVacuum(BAI.Systems.HwComm.XMsg.OFAVacuumTypesEnum)">
            <summary>
            Gets the current value of the OFA vacuum (Differential/House)
            </summary>
            <param name="vacuumType">Enum representing the type of the OFA vacuum (House/Differential) requested.</param>
            <returns>Value of the requested vacuum.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerLoadVacuumLimitsFromFile">
            <summary>
            Loads the OFA vacuum limits from the configuration file
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerSaveVacuumLimitsInFile">
            <summary>
            Saves the OFA vacuum limits in the configuration file
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetWaferPresenceSensorState(System.String)">
            <summary>
            
            </summary>
            <param name="sensorName">The sensor name.</param>
            <returns>Sensor presence state.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetOpticSensorReceivedIntensity(System.String)">
            <summary>
            
            </summary>
            <param name="sensorName">The sensor name.</param>
            <returns>Received intensity such as 80 %</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerMoveZToAtwafer(BAI.Systems.HwComm.XMsg.EndEffecterEnum)">
            <summary>
            Use vacuum sensor to figure out at wafer position for OFA chuck. Wafer presence of OFA and EEs must be validated by EC first.
            </summary>
            <param name="ee">Enum representing which EE to set the value for.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetScandata(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Gets scan data
            </summary>
            <param name="startIndex">The array start index.</param>
            <param name="endIndex">The array end index.</param>
            <param name="secondDerivative">True if ccd is returned, false if ccd2 is returned.</param>
            <returns>The scan data.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetEncoderStep">
            <summary>
            Gets encoder step
            </summary>
            <returns>Encoder step.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerGetScandataSize">
            <summary>
            Gets scan data size
            </summary>
            <returns>Aligner data scan size.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IOFAAlignerCommandsXMsgDriver.AlignerDisableLineSensor">
            <summary>
            Turns off using line sensor for wafer presence checks
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecStackPortInterlockStateChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecStackPortStatusChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecWaferPresenceChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecStackLevelChange">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecAlarmGenerated">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecCaptureOffset">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecReadCurrentOffset">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecInitialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetCoverState">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetJedecportType">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecIsManualLoading">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecIsManualUnloading">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecPanelCoverState">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetManualLoad(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value">retCode</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetManualUnload(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value">retCode</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetStackCount">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetStackLevel">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetStackMode">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetStackMode(BAI.Systems.Devices.StackPort.StackOpMode)">
            <summary>
            
            </summary>
            <param name="stackOpMode">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetStackPortStatus">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecPush">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecPop">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecVerifyStackReady">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetMediaPresentVacuumLevel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetMediaThickness">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetMediaUnloadCount">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetPressureAlarmLimits">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetPressureAlarmLimits(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="low">NA</param>
            <param name="high">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetStackHighCount">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetStackLowCount">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetOperationMode(BAI.Systems.Devices.StackPort.OperationMode)">
            <summary>
            
            </summary>
            <param name="mode">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecPrepareToPush">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecPrepareToPop">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecAlarmIsTripped">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetAlarmCause">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecMapWaferPresenceOnHost">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetMediaThickness(System.Single)">
            <summary>
            
            </summary>
            <param name="thickness">TODO: units</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetMediaUnloadCount(System.UInt16)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetStackHighCount(System.UInt16)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetStackLowCount(System.UInt16)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetMediaPresentVacuumLevel(System.Single)">
            <summary>
            
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecIsLidPresentOnTray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetReadTimeout">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetReadTimeout(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetIdReadParam(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetIdReadParam(System.String)">
            <summary>
            
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetIdReadParams">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecReadId(System.String)">
            <summary>
            
            </summary>
            <param name="recipe"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecClearAlarm">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecEms">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecReadVacuum">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecTurnVacuum(System.Boolean)">
            <summary>
            
            </summary>
            <param name="onOff"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecMovePlunger(System.Boolean)">
            <summary>
            
            </summary>
            <param name="UpDown"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecGetPosition(BAI.Systems.HwComm.XMsg.JedecAxisEnum)">
            <summary>
            GetPosition: Gets the position of z axis in real units for axis
            </summary>
            <param name="axis">The axis for which position is desired</param>
            <returns>Position in real units of the requested OFA axis.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSetSingleAxisEnable(BAI.Systems.HwComm.XMsg.JedecAxisEnum,System.Boolean)">
            <summary>
            Enable or disables z axis.
            </summary>
            <param name="axis">Which axis to enable or disable</param>
            <param name="value"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecMoveAbsoluteSync(System.Single,BAI.Systems.HwComm.XMsg.MotionProfile,BAI.Systems.HwComm.XMsg.JedecAxisEnum)">
            <summary>
            Synchronous absolute Move: moves z axis to a specified absolute position and waits to complete before returning.
            </summary>
            <param name="distance">The desired distance to move relative to home position.</param>
            <param name="profileName">Motion profile enum.</param>
            <param name="axis">The axis for which position is desired</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecMoveRelativeSync(System.Single,BAI.Systems.HwComm.XMsg.MotionProfile,BAI.Systems.HwComm.XMsg.JedecAxisEnum)">
            <summary>
            Synchronous relative Move: moves z axis a specified distance relative to its current position and waits to complete before returning.
            </summary>
            <param name="distance">The desired distance to move relative to the current axis' position.</param>
            <param name="profileName">Motion profile enum.</param>
            <param name="axis">The axis for which position is desired</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecHomeSingleAxis(BAI.Systems.HwComm.XMsg.JedecAxisEnum)">
            <summary>
            Homes JEDEC z axis
            </summary>
            <param name="axis">The axis for which position is desired</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecSaveOpParamInFile">
            <summary>
            Saves the Operator Parameters in the configuration file.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecLoadOpParamFromFile">
            <summary>
            Loads the Operator Parameters in the configuration file
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecRecalcStackCount">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecCalibrateDistBetweenSensors">
            <summary>
            
            </summary>
            <returns>retCode</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IJedecDeviceXMsgDriver.JedecIsLidPresentOnPlunger">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachGetFloatParam(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Location"></param>
            <param name="LocationType"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachGetIntParam(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Location"></param>
            <param name="LocationType"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachGetBoolParam(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Location"></param>
            <param name="LocationType"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachSetFloatParam(System.String,System.String,System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="Location"></param>
            <param name="LocationType"></param>
            <param name="Parameter"></param>
            <param name="NewValue"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachSetIntParam(System.String,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="Location"></param>
            <param name="LocationType"></param>
            <param name="Parameter"></param>
            <param name="NewValue"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachSetBoolParam(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Location"></param>
            <param name="LocationType"></param>
            <param name="Parameter"></param>
            <param name="NewValue"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachLoadFromFlash">
            <summary>
            Load teach params from flash memory
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachSaveToFlash">
            <summary>
            Save current teach params to flash memory
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachGetLocationsCount(System.String)">
            <summary>
            
            </summary>
            <param name="Device"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachGetLocationsList(System.String)">
            <summary>
            Returns a newline-separated list of locations
            </summary>
            <param name="Device"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILocationManagerCommandsXMsgDriver.TeachGetLocationPositionsList(System.String,System.String,System.String)">
            <summary>
            Returns a newline-separated list of comma-separated parameter names, types, values, and units
            </summary>
            <param name="Device"></param>
            <param name="Location"></param>
            <param name="LocationType"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILightTowerXMsgDriver.GetLightTowerComponentState(BAI.Systems.HwComm.XMsg.LightTowerComponent)">
            <summary>
            Returns the state of a given light tower indicator.
            </summary>
            <param name="Indicator">The indicator whose state is to be returned.</param>
            <returns>The current state of the requested indicator.</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ILightTowerXMsgDriver.SetLightTowerComponentState(BAI.Systems.HwComm.XMsg.LightTowerComponent,BAI.Systems.HwComm.XMsg.UiIndicatorState)">
            <summary>
            Sets the state of a given light tower indicator.
            </summary>
            <param name="Indicator">The indicator whose state is to be set.</param>
            <param name="State">The state to which to set the indicator.</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISoftwareActivationGroupXMsgDriver.ReadArmsocUniqueId">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISoftwareActivationGroupXMsgDriver.ActivateSoftware(System.Byte[])">
            <summary>
            
            </summary>
            <param name="ActivationKey"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISoftwareActivationGroupXMsgDriver.DeactivateSoftware(System.Boolean)">
            <summary>
            
            </summary>
            <param name="deactivate">0: default value; 1: erase the software activation key</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISoftwareActivationGroupXMsgDriver.IsSoftwareActivated">
            <summary>
            
            </summary>
            <returns>0: board is NOT activated; 1: board is activated</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerAcquireSignalTracer">
            <summary>
            Reserve a signal tracer for this client to use
            </summary>
            <returns>Id of the tracer that was acquired</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerReleaseSignalTracer(System.Byte)">
            <summary>
            Releases a signal tracer that this client was using
            </summary>
            <param name="TracerId">Id of the tracer to release</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerAddTriggerOnAxisSignal(System.Byte,BAI.Systems.HwComm.XMsg.TriggerTypeEnum,BAI.Systems.HwComm.XMsg.TraceableSignalsEnum,System.UInt32,System.Single,System.Single)">
            <summary>
            Adds a trigger that will check an axis signal to start the signal tracing.
            </summary>
            <param name="TracerId">The tracer's id</param>
            <param name="Trigger">Trigger type that will start the recording</param>
            <param name="Signal">Type of signal to trace</param>
            <param name="AxisId">The signal will be traced on this axis</param>
            <param name="Min">The lower boundary that will cause the trigger to activate</param>
            <param name="Max">The upper boundary that will cause the trigger to activate</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerRemoveTriggerOnAxisSignal(System.Byte,BAI.Systems.HwComm.XMsg.TriggerTypeEnum,BAI.Systems.HwComm.XMsg.TraceableSignalsEnum,System.UInt32,System.Single,System.Single)">
            <summary>
            Removes a trigger that will check an axis signal to start the signal tracing.
            </summary>
            <param name="TracerId">The tracer's id</param>
            <param name="Trigger">Trigger type that will start the recording</param>
            <param name="Signal">Type of signal to trace</param>
            <param name="AxisId">The signal on this axis will be checked against the boundaries</param>
            <param name="Min">The lower boundary that will cause the trigger to activate</param>
            <param name="Max">The upper boundary that will cause the trigger to activate</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerAddTriggerOnIoSignal(System.Byte,BAI.Systems.HwComm.XMsg.TriggerTypeEnum,BAI.Systems.HwComm.XMsg.TraceableSignalsEnum,System.UInt16,System.Byte,System.Single,System.Single)">
            <summary>
            Adds a trigger that will check an IO signal.
            </summary>
            <param name="TracerId">The tracer's id</param>
            <param name="Trigger">Trigger type that will start the recording</param>
            <param name="Signal">Type of signal to trace</param>
            <param name="Channel">The IO signal found on this channel and bit that will be checked against the boundaries</param>
            <param name="Bit">The IO signal found on this channel and bit that will be checked against the boundaries</param>
            <param name="Min">The lower boundary that will cause the trigger to activate</param>
            <param name="Max">The upper boundary that will cause the trigger to activate</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerRemoveTriggerOnIoSignal(System.Byte,BAI.Systems.HwComm.XMsg.TriggerTypeEnum,BAI.Systems.HwComm.XMsg.TraceableSignalsEnum,System.UInt16,System.Byte,System.Single,System.Single)">
            <summary>
            Removes a trigger that will check an IO signal.
            </summary>
            <param name="TracerId">The tracer's id</param>
            <param name="Trigger">Trigger type that will start the recording</param>
            <param name="Signal">Type of signal to trace</param>
            <param name="Channel">The IO signal found on this channel and bit that will be checked against the boundaries</param>
            <param name="Bit">The IO signal found on this channel and bit that will be checked against the boundaries</param>
            <param name="Min">The lower boundary that will cause the trigger to activate</param>
            <param name="Max">The upper boundary that will cause the trigger to activate</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerAddTraceAxisSignal(System.Byte,BAI.Systems.HwComm.XMsg.TraceableSignalsEnum,System.UInt32)">
            <summary>
            Adds this signal to the list of signals that will be traced.
            </summary>
            <param name="TracerId">The tracer's id</param>
            <param name="Signal">Type of signal to trace</param>
            <param name="AxisId">The signal will be traced on this axis</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerRemoveTraceAxisSignal(System.Byte,BAI.Systems.HwComm.XMsg.TraceableSignalsEnum,System.UInt32)">
            <summary>
            Removes a signal from the list of signals that will be traced.
            </summary>
            <param name="TracerId">The tracer's id</param>
            <param name="Signal">Type of signal to trace</param>
            <param name="AxisId">The signal on this axis that would be traced</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerAddTraceIoSignal(System.Byte,BAI.Systems.HwComm.XMsg.TraceableSignalsEnum,System.UInt16,System.Byte)">
            <summary>
            Adds this IO signal to the list of signals that will be traced.
            </summary>
            <param name="TracerId">The tracer's id</param>
            <param name="Signal">Type of signal to trace</param>
            <param name="Channel">The IO signal found on this channel and bit will be traced</param>
            <param name="Bit">The IO signal found on this channel and bit will be traced</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerRemoveTraceIoSignal(System.Byte,BAI.Systems.HwComm.XMsg.TraceableSignalsEnum,System.UInt16,System.Byte)">
            <summary>
            Removes this IO signal from the list of signals that will be traced.
            </summary>
            <param name="TracerId">The tracer's id</param>
            <param name="Signal">Type of signal to trace</param>
            <param name="Channel">The IO signal found on this channel and bit will no longer be traced</param>
            <param name="Bit">The IO signal found on this channel and bit will no longer be traced</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerClearTriggers(System.Byte)">
            <summary>
            Clears the list of triggers that will start the recording
            </summary>
            <param name="TracerId">The tracer's id</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerClearTraces(System.Byte)">
            <summary>
            Clears the list of signals that will be recorded
            </summary>
            <param name="TracerId">The tracer's id</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerConfigureSignalTracer(System.Byte,System.UInt32,System.UInt32,System.Byte,BAI.Systems.HwComm.XMsg.TracingStrategyEnum,System.Byte)">
            <summary>
            Clears the list of signals that will be recorded
            </summary>
            <param name="TracerId">The tracer's id</param>
            <param name="Interval">The interval of updates that the Signal Tracer records on</param>
            <param name="Records">The number of records to store in the buffer</param>
            <param name="Buckets">The data buffer will be divided into this many buckets</param>
            <param name="Strategy">The tracing strategy that will be used</param>
            <param name="PreTracePercent">Percent buffer to fill with trace data before the tracer is actually triggered</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerStopService(System.Byte)">
            <summary>
            Stop the signal tracing service
            </summary>
            <param name="TracerId">The tracer's id</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerStartService(System.Byte)">
            <summary>
            Start the signal tracing service
            </summary>
            <param name="TracerId">The tracer's id</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISignalTracerXMsgDriver.TracerGetAvailableSignals(System.Byte)">
            <summary>
            Returns an array of signals that can be traced
            </summary>
            <param name="TracerId">The tracer's id</param>
            <returns>Array of traceable signals</returns>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IUnsolicitedSignalTracerXMsgDriver.RecordedTracerData">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorAxisSignalPassedThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorBoardSignalPassedThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.AcousticDataEvt">
            <summary>
            
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorSignalPeriodicPeakData">
            <summary>
            
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorGetBoardDiagnosticInfo">
            <summary>
            Get Board Diagnostic info
            </summary>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorGetAxisDiagnosticInfo(System.Byte)">
            <summary>
            Get Axis Diagnostic info
            </summary>
            <param name="Axis">NA</param>
            <returns>NA</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorConfigureBoardSignalAlertThreshold(System.Boolean,BAI.Systems.HwComm.XMsg.DiagnosticInfoEnum,BAI.Systems.Common.AlarmLevel,System.Single,System.Single)">
            <summary>
            Add signal alert threshold
            </summary>
            <param name="Enable">Enable alert</param>
            <param name="Signal">Diagnostic signal</param>
            <param name="Level">alarm level when threshold passed</param>
            <param name="LowThreshold">Min value of window threshold</param>
            <param name="HighThreshold">Max value of window threshold</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorConfigureAxisSignalAlertThreshold(System.Boolean,System.Byte,BAI.Systems.HwComm.XMsg.DiagnosticInfoEnum,BAI.Systems.Common.AlarmLevel,System.Single,System.Single)">
            <summary>
            Add signal alert threshold
            </summary>
            <param name="Enable">Enable alert</param>
            <param name="AxisId">Axis Id</param>
            <param name="Signal">Diagnostic signal</param>
            <param name="Level">alarm level when threshold passed</param>
            <param name="LowThreshold">Min value of window threshold</param>
            <param name="HighThreshold">Max value of window threshold</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorEnableDiagnosticPeripheral(BAI.Systems.HwComm.XMsg.DiagnosticPeripheralEnum,System.Boolean)">
            <summary>
            Enable a diagnostic peripheral
            </summary>
            <param name="Peripheral">Peripheral to enable</param>
            <param name="Enable">Enable</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorRecordAudio(System.Single)">
            <summary>
            Start Recording Audio
            </summary>
            <param name="RecordingLength">Seconds to record</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorSetAcousticRecordingThreshold(System.Int16,System.Single)">
            <summary>
            Record Acoustic If Threshold Passed
            </summary>
            <param name="Threshold">Audio Threshold</param>
            <param name="RecordingLength">Length of Recording</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorSetDiagnosticPeripheralOffset(BAI.Systems.HwComm.XMsg.DiagnosticPeripheralEnum,BAI.Systems.HwComm.XMsg.DiagnosticInfoEnum,System.Single)">
            <summary>
            Sets the offset applied to a diagnostic info defined for a diagnostic peripheral.
            </summary>
            <param name="Peripheral">NA</param>
            <param name="DiagnosticInfo"></param>
            <param name="Offset"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorGetDiagnosticPeripheralOffset(BAI.Systems.HwComm.XMsg.DiagnosticPeripheralEnum,BAI.Systems.HwComm.XMsg.DiagnosticInfoEnum)">
            <summary>
            Gets the offset applied to a diagnostic info defined for a diagnostic peripheral.
            </summary>
            <param name="Peripheral">NA</param>
            <param name="DiagnosticInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorConfigureAxisSignalPeriodicPeak(System.Byte,System.Boolean,BAI.Systems.HwComm.XMsg.DiagnosticInfoEnum,System.UInt32,System.UInt16)">
            <summary>
            Add periodic signal peak computation
            </summary>
            <param name="AxisId">Axis Id</param>
            <param name="Enable">Enable periodic peak computation</param>
            <param name="Signal">Diagnostic signal</param>
            <param name="Period">Period time in milliseconds</param>
            <param name="SwitchMotionStateIgnoreTime">Interval of time when peaks are nor calculated after motion state changes from idle to in motion or from motion to idle</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IDiagnosticSignalMonitorXMsgDriver.MonitorConfigureBoardSignalPeriodicPeak(System.Boolean,BAI.Systems.HwComm.XMsg.DiagnosticInfoEnum,System.UInt32,System.UInt16)">
            <summary>
            Add periodic signal peak computation
            </summary>
            <param name="Enable">Enable periodic peak computation</param>
            <param name="Signal">Diagnostic signal</param>
            <param name="Period">Period time in milliseconds</param>
            <param name="SwitchMotionStateIgnoreTime">Interval of time when peaks are nor calculated after motion state changes from idle to in motion or from motion to idle</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISyncSignalGeneratorXMsgDriver.SyncConfigureSyncGenerator(System.Int32,System.Byte,BAI.Systems.HwComm.XMsg.SyncGeneratorClockRate)">
            <summary>
            Configure sync signal generator
            </summary>
            <param name="EStopChannel">Channel of EStop IO to monitor</param>
            <param name="EStopBit">Bit of EStop IO to monitor</param>
            <param name="ClockRate">Clock rate of sync generator</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISyncSignalGeneratorXMsgDriver.SyncGenerateSyncSignal(System.UInt32)">
            <summary>
            Generate sync signal for specified time
            </summary>
            <param name="GenerationTimeMs">Length of time(ms) to generate signal</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISyncSignalGeneratorXMsgDriver.SyncConfigureMotionSyncCollector(BAI.Systems.HwComm.XMsg.SyncGeneratorClockRate,System.Byte)">
            <summary>
            Configure motion sync signal collector independent of axis
            </summary>
            <param name="ClockRate">NA</param>
            <param name="EStopDebounce">NA</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISyncSignalGeneratorXMsgDriver.SyncMotionSyncStartCounting">
            <summary>
            Start the independent sync collector counting
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.ISyncSignalGeneratorXMsgDriver.SyncMotionSyncStopCounting">
            <summary>
            Stop the independent sync collector counting
            </summary>
        </member>
        <member name="E:BAI.Systems.HwComm.XMsg.IArmSocConnectionXMsgDriver.IAmAlive">
            <summary>
            Event stating that the board is alive
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IArmSocConnectionXMsgDriver.SetIAmAliveEvent(System.Boolean,System.UInt32)">
            <summary>
            Configure I_AM_ALIVE event
            </summary>
            <param name="EnableEvent">Enable or disable I_AM_ALIVE event</param>
            <param name="Period">Number of milliseconds between sending I_AM_ALIVE event</param>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IArmSocConnectionXMsgDriver.GetIAmAliveEventDuration">
            <summary>
            Returns I_AM_ALIVE event period
            </summary>
            <returns>Number of milliseconds between sending I_AM_ALIVE event</returns>
        </member>
        <member name="M:BAI.Systems.HwComm.XMsg.IArmSocConnectionXMsgDriver.IsIAmAliveEventEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:BAI.Systems.HwComm.XMsg.XMsg.Item(System.Int32)">
            <summary>
            Get a string argument
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:BAI.Systems.HwComm.XMsg.XMsg.ByteArgs">
            <summary>
            Get binary arguments
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComm.Modbus.IModbusMaster.ReadModifyWriteRegister(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the register at <paramref name="address"/>, bitwise ands the value with <paramref name="andMask"/>,
            bitwise ors the value with <paramref name="orMask"/> and writes it back.
            </summary>
            <param name="address"></param>
            <param name="andMask"></param>
            <param name="orMask"></param>
        </member>
        <member name="M:BAI.Systems.HwComm.Modbus.IModbusSlaveChannel.ReadModifyWriteRegister(System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Reads the register <paramref name="registerName"/>, changes the bit values as
            described in <paramref name="newBitValues"/>, and writes back the bits.
            </summary>
            <remarks>
            All the bits must be on the same register.
            </remarks>
            <param name="registerName"></param>
            <param name="newBitValues"></param>
        </member>
        <member name="T:BAI.Systems.HwComm.IobComm.IDioCommOp">
            <summary>
            Interface for DIO control without knowing the DIO implementation details of the IOB.
            </summary>
            <remarks>
            <para>
            Client only needs to use the signal names. No need to care about channels and bits.
            </para>
            </remarks>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.InvalidDioSignalException">
            The methods throws <see cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.InvalidDioSignalException"/> and its derived exceptions if:
            <para>
                <list type="number">
                    <item>The given signal name does not exist.</item>
                    <item>The given signal to DoWriteSignal is a DI signal.</item>
                    <item>The given signal is not connected.</item>
                </list>
            </para>
            </exception>
        </member>
        <member name="T:BAI.Systems.HwComm.IobComm.IDioCommConfig">
            <summary>
            Interface to get DIO signal configuration data.
            </summary>
            <remarks>
            Data source  is file Module.IO.Config.xml
            Date content is type BAI.Systems.Utils.Iob.DigitalSignalConfig (signal, channel, bit, and etc)
            </remarks>
        </member>
        <member name="T:BAI.Systems.HwComm.IobComm.IDioComm">
            <summary>
            Interface to access low level Digital Input / Output (DIO) functions on the IO Board.
            </summary>
            <remarks>
            <para>
            The DIO signals are grouped into channels, each with 8 bits.
            The DI  signals are read-only.
            The DO  signals are for writing, but can also be read back.
            </para>
            <para>
            When read/write a single bit, a byte is used for the value. 
            But only LSB matters. All other bit is ignored. 
            For input values,  client should set all other bits to zero.
            For return values, the service  sets all other bits to zero. 
            </para>
            </remarks>
        </member>
        <member name="T:BAI.Systems.HwComm.IobComm.DiChangedEventArgs">
            <summary>
            Pay load for low level IO changed events - DiChanged.
            This contains all 64-bits of DI in a long integer.
            </summary>
            <remarks>
            To monitor a specific digitial signal, 
            use higher level event DigitalSignalChanged
            </remarks>
        </member>
        <member name="T:BAI.Systems.HwComm.IobComm.DigitalSignalChange">
            <summary>
            Data to mark a change of a DIO signal. 
            Carried in the payload of high level event DigitalSignalChanged 
            </summary>
        </member>
        <member name="T:BAI.Systems.HwComm.IobComm.IIobComm">
            <summary>
            This interface exposes the IO Board driver's board level functions to managed space.
            </summary>
            <remarks>
            <para>
                This component simply uses Platform Invoke (P/Invoke) interop service to import GIO.DLL.
                It does not have any logic, and should not add any.
            </para>
            <para>
            Details:
            <list type="bullet">
                <item>The SBC communicate with IO board via the SBC's parallel port.</item>
                <item>At power up or reset, the board and parallel port are both set at IEEE 1284 compatibility mode.</item>
                <item>Initialize call puts the port into IEEE 1284 ECP mode via negotiation between SBC and IOB.</item>
                <item>Thereafter, all communications are in ECP mode.</item>
                <item>Detailed function for DIO, AIO, interrupts for wafer presence/centering are exposed via separate classes.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:BAI.Systems.HwComm.IobComm.ParallelPortMode">
            <summary>
            This enumeration represents the SBC's parallel port's mode.
            The mode is returned when reading the ecr register.
            The three MSB bits, bits 7 - 5 make the mode.
            </summary>
        </member>
        <member name="T:BAI.Systems.HwComm.IobComm.IParallelPortComm">
            <summary>
            This class exposes the IO Board driver's board level diagnostic functions to managed space.
            </summary>
            <remarks>
            Summary:
                This component simply uses Platform Invoke (P/Invoke) interop service to import GIO.DLL.
                It does not have any logic, and should not add any.
            
            Details:
                
            
            Register Address Map:
                1. Register address (port number) = Parallel Port Based Address + Offset
                2. Parallel Port Base Address = 0x378h
                3. Offsets are defined in table below
                4. Note, the same address may be used differently in different IEEE 1284 mode.
                5. The mode is determined by bits 7 - 5 (MSB and down) of the ecr register (at offset 0x400h)
                ==============================================================================================
                    Offset  Register    Description                 ModeName    ModeBits   Read/Write(SBC)
                ----------------------------------------------------------------------------------------------
                    0x000h  data        Data port                   SPP         000             R/W
                            ecpAFifo    ECP address FIFO            ECP         011             R/W
                ----------------------------------------------------------------------------------------------
                    0x001h  dsr         Status                      All         XXX             R
                ----------------------------------------------------------------------------------------------
                    0x002h  dcr         Control                     All         XXX             R/W
                ----------------------------------------------------------------------------------------------
                    0x400h  cFifo       Data FIFO                   SPP         000             R/W
                            ecpDFifo    ECP Data FIFO               ECP         011             R/W
                            tFifo       Test FIFO                   Test        110             R/W
                            cnfgA       Configuration A             Config      111             R/W
                ----------------------------------------------------------------------------------------------
                    0x401h  cnfgB       Configuration B             Config      111             R/W
                ----------------------------------------------------------------------------------------------
                    0x402h  ecr         Extended Control            All         XXX             R/W
                ==============================================================================================
            </remarks>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemBaseRemoteImp.AlignWafer(System.String,BAI.Systems.Common.WaferAlignFeature,System.Double,System.String)">
            <summary>
            Align wafer on specified wafer aligner with to specified robot (end effecter)
            </summary>
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1", "AL1.WaferAligner1"</param>
            <param name="feature"></param>
            <param name="angleDegree"></param>
            <param name="endEffecter">Robot end effecter name such as "EFEM.WaferEngine.EE1", "AT.WaferEngine.EE2"</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemBaseRemoteImp.ReadWaferId(System.String,System.String)">
            <summary>
            Read wafer ID if EFEM has multiple wafer ID readers (front and back sides for example).
            </summary>
            <param name="readerDevice">Specify which wafer ID reader</param>
            <param name="recipe">Wafer ID reader recipe name.</param>
            <returns>Wafer ID read back</returns>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemBaseRemoteImp.initializeLoadPort(System.Object)">
            <summary>
            Thread function for EFEM to concurrently init all load-ports
            </summary>
            <param name="loadportObj">Is of type ILoadPort</param>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemSpartanRemoteImp.getRemoteVersion(System.String,System.String)">
            <summary>
            Get version of software/firmware/hardware from a targeted module/device/component
            </summary>
            <param name="versionType">Type of code to get version from: API.SW, SBC.SW, PCB.SW, PCB.FW, HW. Empty string is treated as API.SW</param>
            <param name="targetSpec">Module/device/component to get version from: EFEM, EFEM.LoadPortB.VerticalDoor. EFEM.WaferEngine.XMP, Empty string OK.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MoveToReadyGet(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MoveToReadyPut(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.GetWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.PutWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.GetWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.PutWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.GetPutWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.PutGetWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.GetTwoWafers(System.String)">
            <summary>
            Simultaneously get 2 wafers with both end effecters from two transfer locations
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.PutTwoWafers(System.String)">
            <summary>
            Simultaneously put 2 wafers with both end effecters to two transfer locations
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MapWaferPresenceOnHost(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MapWaferPresence(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MapSubstratePresenceOnHost(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MapSubstratePresence(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.AlignWafer(System.String,BAI.Systems.Common.WaferAlignFeature,System.Double,System.String)">
            <summary>
            Align wafer on specified wafer aligner with to specified robot (end effecter)
            </summary>
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1", "AL1.WaferAligner1"</param>
            <param name="feature"></param>
            <param name="angleDegree"></param>
            <param name="endEffecter">Robot end effecter name such as "EFEM.WaferEngine.EE1", "AT.WaferEngine.EE2"</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.ReAlignWafer(System.String,System.String)">
            <summary>
      Quickly realigns a wafer to the given <paramref name="endEffector" />.  The wafer must already have been aligned.
    </summary><remarks>
      <para>
        Adjusts the wafer to face the given <paramref name="endEffector" /> and returns new pick offsets
        to be used with the <paramref name="endEffector" />.
      </para>
      <para>
        The wafer must not be moved between the last align and calling this method.
        The align must not be reset between the last align and calling this method.
        Otherwise the results returned may be incorrect.
      </para>
    </remarks><param name="aligner">Algner name such as "Aligner1"</param><param name="endEffector">End effector for result - likely to use to pick wafer</param><exception cref="T:BAI.Systems.Common.Exceptions.ExecutionExceptions.NoWaferOnChuckToAlignException">
      There is no wafer on the aligner.
    </exception><exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.WaferNotAlignedException">
      Wafer on aligner is no aligned yet.
    </exception><returns>Alignment result for the desired end effecter to pick the wafer with.</returns>
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.ReadWaferId(System.String,System.String)">
            <summary>
            Read wafer ID if EFEM has multiple wafer ID readers (front and back sides for example).
            </summary>
            <param name="readerDevice">Specify which wafer ID reader</param>
            <param name="recipe">Wafer ID reader recipe name.</param>
            <returns>Wafer ID read back</returns>
        </member>
        <member name="P:BAI.Systems.Modules.EFEM.EfemProxy.TimeoutForAlignWafer">
            <inheritdoc />
        </member>
        <member name="P:BAI.Systems.Modules.EFEM.EfemProxy.EnableMultipleNotchSearch">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.ResetWaferAlignOpParams">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.RetractEndEffecter(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MoveUpToWaferPlane(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MoveDownToWaferPlane(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MoveUpToGetWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MoveDownToPutWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.StopMotion(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.StopMotion">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.Ems">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.GetActiveRobotMotionProfile">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.SetActiveRobotMotionProfile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.GetRobotMotionProfiles">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.GetRobotPosition">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.MoveToSafeLocation">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.GetWaferRestraintState(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.ApplyWaferRestraint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.EFEM.EfemProxy.ReleaseWaferRestraint(System.String)">
            <inheritdoc />
        </member>
        <member name="P:BAI.Systems.Modules.AtmTransferRemoteImpBase.TransferOneWaferOp`1.WaferIsTransfered">
            <summary>
            Returns true if the wafer is actually transfered to the EE.
            Returns false if the EE just extends.
            </summary>
        </member>
        <member name="P:BAI.Systems.Modules.AtmTransferRemoteImpBase.TransferOneWaferOp`1.SafeToIgnoreSubstratePresence">
            <summary>
            Returns true if the WaferEngine is preparing for a transfer
            Returns false otherwise
            </summary>
        </member>
        <member name="T:BAI.Systems.Modules.AtmTransferRemoteImpBase.SwapOperation">
            <summary>
            Does not validate presence, must be paired with get/put operations that don't execute.
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.GetPutSubstrates(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.PutGetSubstrates(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.GetTwoSubstrates(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.PutTwoSubstrates(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.GetPutSubstrates(System.String,System.String,System.String,System.String,BAI.Systems.Common.Substrates.SwapTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.PutGetSubstrates(System.String,System.String,System.String,System.String,BAI.Systems.Common.Substrates.SwapTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.MoveToReadyGet(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.MoveToReadyPut(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.GetWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.PutWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.GetWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.PutWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.GetPutWafers(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.PutGetWafers(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.GetTwoWafers(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.PutTwoWafers(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.OfaAlignWafer(System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.OfaAlignWaferAndReadId(System.String,System.String,System.Collections.Generic.KeyValuePair{BAI.General.NumberWithUnit,System.Collections.Generic.List{System.String}}[])">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.OfaAlignWaferAndReadId(System.String,System.String,System.Collections.Generic.KeyValuePair{BAI.General.NumberWithUnit,System.Collections.Generic.List{System.String}}[],BAI.General.NumberWithUnit)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.StopMotion">
            <summary>
            Stop motion on all axes
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.AtmTransferRemoteImpBase.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="M:BAI.Systems.Modules.AL.AlignerLockRemoteImp.Ems">
            <summary>
            Emergency motor stop (EMS) - this will trigger alarm.
            After an alarm is trigger, one needs to clear alarm
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.AL.AlignerLockRemoteImp.AlignWafer(System.String,BAI.Systems.Common.WaferAlignFeature,System.Double,System.String)">
            <summary>
            Align wafer on specified wafer aligner with to specified robot (end effecter)
            </summary>
            <param name="aligner">Aligner name such as "EFEM.WaferAligner1", "AL1.WaferAligner1"</param>
            <param name="feature"></param>
            <param name="angleDegree"></param>
            <param name="endEffecter">Robot end effecter name such as "EFEM.WaferEngine.EE1", "AT.WaferEngine.EE2"</param>
            <returns></returns>
        </member>
        <member name="P:BAI.Systems.Modules.AL.AlignerLockRemoteProxy.TimeoutForAlignWafer">
            <inheritdoc />
        </member>
        <member name="P:BAI.Systems.Modules.AL.AlignerLockRemoteProxy.EnableMultipleNotchSearch">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AL.AlignerLockRemoteProxy.ResetWaferAlignOpParams">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmosphereTransferImp.Ems">
            <summary>
            Emergency motor stop (EMS) - this will trigger alarm.
            After an alarm is trigger, one needs to clear alarm
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.GetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.GetTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.PutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.PutTransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.MoveToReadyGetSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.MoveToReadyPutSubstrate(System.String,System.String,BAI.Systems.Common.Substrates.TransferOptions)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.MoveToReadyGet(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.MoveToReadyPut(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.GetWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.PutWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.GetWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.PutWafer(System.String,System.String,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.GetPutWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A get and then put wafer swap - most frequently used swap.
            The put and get locations can be the same.
            </summary>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
            <param name="eePut"></param>
            <param name="putLocation"></param>
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.PutGetWafers(System.String,System.String,System.String,System.String)">
            <summary>
            A put and then get wafer swap - less frequently used swap.
            The put and get locations must be different.
            </summary>
            <param name="eePut"></param>
            <param name="putLocation"></param>
            <param name="eeGet"></param>
            <param name="getLocation"></param>
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.GetTwoWafers(System.String)">
            <summary>
            Simultaneously get 2 wafers with both end effecters from two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.PutTwoWafers(System.String)">
            <summary>
            Simultaneously put 2 wafers with both end effecters to two transfer locations 
            adjacent to each other vertically.
            </summary>
            <param name="bottomLocation">Transfer location for bottom slot.</param>
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.RetractEndEffecter(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.ExtendEndEffecter(System.String,System.String,BAI.Systems.Common.VerticalOffsetFromWafer,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.MoveUpToWaferPlane(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.MoveDownToWaferPlane(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.MoveUpToGetWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.MoveDownToPutWafer(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.StopMotion">
            <summary>
            Stop motion on all axes
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.Ems">
            <summary>
            Emergency motor stop (servo off, motor amplifiers disabled)
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.AT.AtmTransferRemoteProxy.GetRobotPosition">
            <summary>
            Get current robot position
            </summary>
            <returns>Dictionary of axis name-position pairs</returns>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.GetCarrier(System.String,System.String)">
            <summary>
            This message should go to (for now, just) active port
            </summary>
            <param name="activeHost"></param>
            <param name="fromLocation"></param>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.PutCarrier(System.String,System.String)">
            <summary>
            This message should go to (for now, just) active port
            </summary>
            <param name="activeHost"></param>
            <param name="toLocation"></param>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.MoveToReadyGet(System.String,System.String)">
            <summary>
            This message should go to (for now, just) active port
            </summary>
            <param name="activeHost"></param>
            <param name="fromLocation"></param>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.MoveToReadyPut(System.String,System.String)">
            <summary>
            This message should go to (for now, just) active port
            </summary>
            <param name="activeHost"></param>
            <param name="toLocation"></param>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.MoveToTransferLocation(System.String,System.String)">
            <summary>
            This message should go to (for now, just) active port
            </summary>
            <param name="mobileHost"></param>
            <param name="transferLocation"></param>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.MapCarrierPresenceOnHost(System.String)">
            <summary>
            This is a module message that does not get sent through devices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.MapCarrierPresence(System.String)">
            <summary>
            This is a module message that does not get sent through devices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.GetCarrierRestraintState(System.String)">
            <summary>
            This is a module message that does not get sent through devices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.ApplyCarrierRestraint(System.String)">
            <summary>
            This is a module message that does not get sent through devices.
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.ReleaseCarrierRestraint(System.String)">
            <summary>
            This is a module message that does not get sent through devices.
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.CB.CarrierBufferRemoteImp.GetCarrierTransferLocations(System.String,System.String,System.String)">
            <summary>
            This is a module message that does not get sent through devices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.ITransportModuleDiag.CollectErrorData(System.String,System.String)">
            <summary>
            Collects logs files from the module and saves them in a folder inside of <paramref name="directoryPath"/>.
            </summary>
            <remarks>
            A folder inside of <paramref name="directoryPath"/> is created with a name in the format:
            ComputerName.<paramref name="errorTitle"/>.TimeStamp .
            The log files are put in this folder and then the path to that folder is returned.
            </remarks>
            <param name="errorTitle">The title of the logs, used in the generated directory name,</param>
            <param name="directoryPath">The directory where the log files should be saved.</param>
            <returns>
            A path to the folder in which the logs were saved.
            </returns>
        </member>
        <member name="T:BAI.Systems.Modules.ITransportModule">
            <summary>
            A module that handles and tracks substrates.
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.ITransportModule.AlarmIsTripped">
            <summary>
            Indicates if the module is in an alarm state.
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.ITransportModule.ClearAlarm(System.String)">
            <summary>
            Clears the alarm on the device. Will throw an exception if the alarm cannot be cleared.
            </summary>
            <param name="device">Device to clear alarm on</param>
        </member>
        <member name="M:BAI.Systems.Modules.ITransportModule.AlarmIsTripped(System.String)">
            <summary>
            Indicates if the device is in an alarm state.
            </summary>
            <param name="device"></param>
            <returns>Device to check if alarm is tripped</returns>
        </member>
        <member name="M:BAI.Systems.Modules.ITransportModule.ClearAlarm">
            <summary>
            Clears the alarm. Will throw an exception if the alarm cannot be cleared.
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.ITransportModule.Initialize">
            <summary>
            Initialize the system to make it ready for use.
            </summary>
            <remarks>
            <para>
                This method can be called after power up to home all devices and put
                the robot into an operational state. This method can also be called after
                an alarm to restore the module to an operational state.
            </para>
            <para>
                The Initialize routine performs the following actions:
                <list type="bullet">
                    <item>
                        <description><see cref="M:BAI.Systems.Modules.ITransportModule.ClearAlarm"/></description>
                    </item>
                    <item>
                        <description><see cref="M:BAI.Systems.Common.Controls.IRobotCtrl.SetMotionServo(System.Boolean)"/> to enable axes</description>
                    </item>
                    <item>
                        <description><see cref="M:BAI.Systems.Common.Controls.IRobotCtrl.HomeAllAxes"/> to home the robot axes</description>    
                    </item>
                    <item>
                        <description>Other device-specific initialization.</description>
                    </item>
                </list>
            </para>
            </remarks>
        </member>
        <member name="M:BAI.Systems.Modules.ITransportModule.GetDeviceNames(System.String)">
            <summary>
            Search constituent devices the name of which match the search string.
            </summary>
            <param name="deviceNameMatch">Search string for device name, such as "LoadPort". If null or empty string, list every device.</param>
            <returns>Array of device names, each in the format of Module.Device such as "EFEM.LoadPortB"</returns>
        </member>
        <member name="M:BAI.Systems.Modules.ITransportModule.GetDevice(System.String)">
            <summary>
            Search unique constituent device the name of which matches the search string.
            If no match is found, exception ObjectIdMatchNotFoundException is thrown.
            If more than one is found, exception ObjectIdMatchNotUniqueException is thrown.
            </summary>
            <param name="deviceNameMatch">Search string for device name, such as "LoadPortB"</param>
            <returns>The device proxy</returns>
        </member>
        <member name="T:BAI.Systems.Modules.IVersion">
            <summary>
            Query version information.
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.IVersion.GetVersion(System.String,System.String)">
            <summary>
            Get version of software, firmware, or hardware from a targeted module, device, or component.
            </summary>
            <param name="versionType">Type of code to get version from: API.SW, SBC.SW, PCB.SW, PCB.FW, HW. Empty string is treated as API.SW</param>
            <param name="targetSpec">Module/device/component to get version from: EFEM, CB.ActivePortA.DSP, EC.IOB.FPGA and etc. Empty string OK.</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.IVersion.GetPatchVersion(System.String,System.String)">
            <summary>
            Get the patch version of software.
            </summary>
            <param name="versionType">Type of code to get version from: API.SW, SBC.SW, PCB.SW, PCB.FW, HW. Empty string is treated as API.SW</param>
            <param name="targetSpec">Module/device/component to get version from: EFEM, CB.ActivePortA.DSP, EC.IOB.FPGA and etc. Empty string OK.</param>
            <returns>The patch version</returns>
        </member>
        <member name="M:BAI.Systems.Modules.IVersion.GetVersions">
            <summary>
            Get's all versions of all components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.IVersion.GetPatchVersions">
            <summary>
            Get's all patch versions of all components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.TransportModuleProxy.instantiateImp(System.String,System.String)">
            <summary>
            This method is call in proxy constructor to instantiate implementation
            </summary>
            <param name="name"></param>
            <param name="clientName"></param>
        </member>
        <member name="M:BAI.Systems.Modules.TransportModuleProxy.GetVersion(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModuleProxy.GetVersions">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModuleProxy.InitWaferPresence">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModuleProxy.SetWaferPresenceOnHost(System.String,BAI.Systems.Common.WaferPresenceState)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModuleProxy.GetWaferHostNames(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModuleProxy.GetWaferPresence(System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModuleProxy.GetTransferLocations(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModule.GetVersion(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModule.GetPatchVersion(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModule.GetVersions">
            <inheritdoc />
        </member>
        <member name="M:BAI.Systems.Modules.TransportModule.InitWaferPresence">
            <summary>
            Initialize - read from Persist/Module.WaferOnHost.txt file, and detect with sensors
            </summary>
        </member>
        <member name="M:BAI.Systems.Modules.TransportModule.SetWaferPresenceOnHost(System.String,BAI.Systems.Common.WaferPresenceState)">
            <summary>
            A high level transfer coordinator/manager call this method on a module
            to set the presence/absence on a passive/mobile host in that module after
            an active host has finished a get/put wafer operation.
            </summary>
            <param name="host">the passive/mobile host that is participating in a transfer operation</param>
            <param name="state">wafer presence state to set the host to</param>
        </member>
        <member name="M:BAI.Systems.Modules.TransportModule.setWaferPresenceOnHost(System.String,BAI.Systems.Common.WaferPresenceState)">
            <summary>
            A high level transfer coordinator/manager call this method on a module
            to set the presence/absence on a passive/mobile host in that module after
            an active host has finished a get/put wafer operation.
            </summary>
            <param name="host">the passive/mobile host that is participating in a transfer operation</param>
            <param name="state">wafer presence state to set the host to</param>
        </member>
        <member name="M:BAI.Systems.Modules.TransportModule.GetTransferLocations(System.String,System.String)">
            <summary>
            Find the transfer locations that matches the search keyword for either an active or mobile wafer host.
            </summary>
            <param name="activeOrMobileHost">Name of active host (end effecter) or
            mobile host (TC.Column, or PM.Stage)</param>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Modules.TransportModule.getRemoteVersion(System.String,System.String)">
            <summary>
            Get version of software/firmware/hardware from a targeted module/device/component
            </summary>
            <param name="versionType">Type of code to get version from: API.SW, SBC.SW, PCB.SW, PCB.FW, HW. Empty string is treated as API.SW</param>
            <param name="targetSpec">Module/device/component to get version from: EFEM, CB.ActivePortA.DSP, EC.IOB.FPGA and etc. Empty string OK.</param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Utils.Configs.Generated.ArmSocConfig">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.ArmSocConfig.FirmwareVersions">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.ArmSocConfig.Boards">
            <remarks/>
        </member>
        <member name="T:BAI.Systems.Utils.Configs.Generated.ArmSocConfigFirmwareVersions">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.ArmSocConfigFirmwareVersions.VersionTemplate">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.ArmSocConfigFirmwareVersions.DefaultUpdate">
            <remarks/>
        </member>
        <member name="T:BAI.Systems.Utils.Configs.Generated.VersionTemplate">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.VersionTemplate.Pattern">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.VersionTemplate.Version">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.VersionTemplate.Name">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.VersionTemplate.App">
            <remarks/>
        </member>
        <member name="T:BAI.Systems.Utils.Configs.Generated.Board">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.Name">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.IpAddress">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.EnableIAmAliveEvent">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.PeriodInMs">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.TimeoutInMs">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.SmartFruIdWarning">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.SmartFruIdFatal">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.RebootOrder">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.RebootIfXmsgConnIsActive">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.Update">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.Board.doc">
            <remarks/>
        </member>
        <member name="T:BAI.Systems.Utils.Configs.Generated.ArmSocConfigBoards">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.ArmSocConfigBoards.Board">
            <remarks/>
        </member>
        <member name="P:BAI.Systems.Utils.Configs.Generated.ArmSocConfigBoards.DisableUpdate">
            <remarks/>
        </member>
        <member name="T:BAI.Systems.Utils.Configs.CarrierDetectionSignature">
            <summary>
            For Brooks internal use only.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.ChamberDeviceConfigs.GetConnectedHwComponents(System.String)">
            <summary>
            Read module config file to get all connected HW component under chamber device.
            </summary>
            <param name="path">Module config file path such as EC\VT.Config.xml</param>
            <returns>Map[HwCompName, HwCompType]</returns>
        </member>
        <member name="F:BAI.Systems.Utils.Configs.InterlockType.NO">
            <summary>
            No interlocking.
            </summary>
        </member>
        <member name="F:BAI.Systems.Utils.Configs.InterlockType.HW">
            <summary>
            Interlocking done at the device level.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.ParamXmlUtil.ReadAllParams(System.Xml.XmlReader,System.String)">
            <summary>
            Read an XML file to find a list of OpParams
            </summary>
            <param name="xmlStream">XML reader stream</param>
            <param name="paramType">OpParam or ConfigParam</param>
            <returns>Dictionary&lt;parameter category, list of parameters&gt;</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.MaterialConfigTable`1.GetRuntimeValue(System.String)">
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">throw when row is not found</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.FabSpecManager.Reload">
            <summary>
            For testing purposes only.
            </summary>
            <remarks>
            Disconnect and Connect must be called on the EfemProxy after reloading the file.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.ModuleConfigReaderUtil.GetConfigStatForDevices(System.String)">
            <summary>
            Find all devices and their configuration status in module configuration file 
            </summary>
            <param name="path">Module config file path such as CB1.Config.xml</param>
            <returns>Dictionary with device name as key and configuration status as value</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.ModuleConfigReaderUtil.GetDevices(System.String,System.String)">
            <summary>
            Find all devices that match input configuration status
            </summary>
            <param name="path">Module config file path such as CB1.Config.xml</param>
            <param name="configStat">Configuration status, such as Connected, NotConnected. If null, any config status is a match</param>
            <returns>List of devices in config file that matches the input configuration status</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.ModuleConfigReaderUtil.FindDevice(System.Xml.XmlReader,System.String,System.String,System.String)">
            <summary>
            In a XmlReader stream opened from a module configuration file, find a device with three specs
            </summary>
            <param name="reader">XML stream of module configuration file, such as VT2.Config.Xml</param>
            <param name="deviceType">Type of device, such as Chamber, Shuttle</param>
            <param name="deviceName">Name of device, such as Chamber, Shuttle, or LoadPortB</param>
            <param name="configStat">Device's configuration state: Not/Installed, Not/Connected</param>
            <returns>True if the device with the three specs are found</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.ModuleConfigReaderUtil.GetConfigParams(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            From the current position, read the the collection of ConfigParam under the ConfigParams tag. 
            </summary>
            <param name="reader">XML stream of module configuration file (such as CB1.Config.Xml).</param>
            <param name="category">The Category attribute value for tag ConfigParams. Can be null.</param>
            <param name="subCategory">The SubCategory attribute value for tag ConfigParams. Can be null.</param>
            <returns>Collection of ConfigParam where key is name of parameber, value is an object parsed from configuration file.</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.SharedResourceConfigs.ReadResourceSharingReactionsForDevice(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search reactions to resource share request under the device specified in a module config file
            </summary>
            <param name="path">Module config file path, such as CB1.Config.xml</param>
            <param name="deviceType">Device type, such as ActivePort, ShuttleLift, and etc</param>
            <param name="deviceName">Device name, such as ActivePortB, StaticPort2</param>
            <param name="category">Category attribute value for ConfigParams XML tag. In this case, should be ResourceShare</param>
            <param name="subCategory">Subcategory attribute value for ConfigParams XML tag, such as LoadPortA</param>
            <returns>Dictionary where key=resource.action.request (such as Zone:X2Y0Z5.AnyAction.Acquire), value=reaction (such as MoveOverX)</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.SharedResourceConfigs.ReadSharedResourcesForDevice(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search list of shared resources under the device specified in a module config file
            </summary>
            <param name="path">Module config file path, such as CB1.Config.xml</param>
            <param name="deviceType">Device type, such as ActivePort, ShuttleLift, and etc</param>
            <param name="deviceName">Device name, such as ActivePortB, StaticPort2</param>
            <param name="category">Category attribute value for ConfigParams XML tag. In this case, should be ResourceShare</param>
            <param name="subCategory">Subcategory attribute value for ConfigParams XML tag, such as LoadPortA</param>
            <returns>List of shared resourced for the device</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Configs.DioConfigs.ReadDioConfigs(System.String,System.String)">
            <summary>
            Read DI or DO signal configuration data from a configuration file such as VT.IO.Config.Xml
            </summary>
            <param name="path">full path of configuration file</param>
            <param name="dio">either DI or DO</param>
            <returns>List of digital signals</returns>
        </member>
        <member name="T:BAI.Systems.Utils.General.ExclusiveActionLock">
            <summary>
            Class to provide a generic mechanism to ensure that there is at most one action executing at a time.
            Typical usage for a thread to execute an action
            	1. Try acquire the lock (exception thrown if there is already an action executing
            	2. Execute the action in a try-catch block. Returns exception if failed
            	3. Release the lock (and re-throw the exception if steps 2 returned exception)
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.General.ExclusiveActionLock.Acquire(System.String)">
            <summary>
            Try to acquire the exclusive lock for a new action
            </summary>
            <param name="action">Action to acquire the lock for. Must contain one of the valid actions.</param>
            <exception cref="T:BAI.Systems.Common.Exceptions.VerificationExceptions.InvalidRequestForCurrentStateException">Thrown if current state is not idle</exception>
        </member>
        <member name="M:BAI.Systems.Utils.General.ExclusiveActionLock.Release(System.String)">
            <summary>
            Release the acquired exclusive lock and return the lock to idle
            </summary>
            <param name="action">Action that the lock was acquired for</param>
            <returns>True is successful</returns>
            <exception cref="T:System.Threading.SynchronizationLockException">Thrown if the thread does not own the lock</exception>
        </member>
        <member name="M:BAI.Systems.Utils.General.ObjectNameUtil.NormalizeModuleName(System.String)">
            <summary>
            Normalize the module name by removing the index after module type:
            VT2 gets normalized to VT, and etc.
            </summary>
            <param name="moduleName"></param>
            <returns>module type such as "VT", "EFEM"</returns>
        </member>
        <member name="M:BAI.Systems.Utils.General.ObjectNameUtil.NormalizeObjectName(System.String)">
            <summary>
            Normalize the object name ModuleName.DeviceName.ComponentName by removing the index after module type.
            </summary>
            <remarks>
            Normalized name is ModuleType.DeviceName.ComponentName.
            For example VT2.Chamber gets normalized to VT.Chamber, VT1.Shuttle.EE2 normalizes to VT.Shuttle.EE2
            </remarks>
            <param name="objectName">Such as VT2.Chamber</param>
            <returns>Such as VT.Chamber</returns>
        </member>
        <member name="M:BAI.Systems.Utils.General.ObjectNameUtil.RemoveModuleNumber(System.String)">
            <summary>
            Similar to <see cref="M:BAI.Systems.Utils.General.ObjectNameUtil.NormalizeObjectName(System.String)"/>, but does not check the validity of the module name.
            </summary>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Utils.General.RemoteClockSynchronizer">
            <summary>
            Utility class for synchronizing a remote clock to local clock.
            </summary>
            <remarks>
            Client can call to synchronize synchronously or in background.
            Or can call to auto synchronize (every 24 hour) - easiest use-case.
            </remarks>
        </member>
        <member name="M:BAI.Systems.Utils.General.RemoteClockSynchronizer.#ctor(System.String,System.String,BAI.Systems.Common.Controls.IRemoteControllerCtrl)">
            <summary>
            	Constructor - usually by TransportModuleRemoteImp
            </summary>
            <param name="name">Any name for logging - usually the client's name such as AT, CB, EFEM, VT1</param>
            <param name="remoteSbc">Type of remote controller SBC - different SBC's may need peculiar algo to synchronize</param>
            <param name="remoteCtrl">The actual object for the synchronizer to call Get/Set remote clock - usually the client itself</param>
        </member>
        <member name="M:BAI.Systems.Utils.General.RemoteClockSynchronizer.#ctor(System.String,BAI.Systems.Utils.General.RemoteControllerMake,BAI.Systems.Common.Controls.IRemoteControllerCtrl)">
            <summary>
            	Constructor - usually by TransportModuleRemoteImp
            </summary>
            <param name="name">Any name for logging - usually the client's name such as AT, CB, EFEM, VT1</param>
            <param name="remoteSbc">Type of remote controller SBC - different SBC's may need peculiar algo to synchronize</param>
            <param name="remoteCtrl">The actual object for the synchronizer to call Get/Set remote clock - usually the client itself</param>
        </member>
        <member name="T:BAI.Systems.Utils.General.TimeoutData">
            <summary>
            Data class to conveniently scale time out for different operations in unit of ms
            </summary>
        </member>
        <member name="T:BAI.Systems.Utils.General.ZoneUtil">
            <summary>
            Utility for using zones in a 3-dimensional grid
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.General.ZoneUtil.ZoneToCoordinate(System.String)">
            <summary>
            Convert zone name (such as Zone:X3Y0Z6) to 3D coordinate
            </summary>
            <param name="zoneName">Name of the zone to convert</param>
            <returns>Coorindate in 3D space for the zone</returns>
        </member>
        <member name="M:BAI.Systems.Utils.General.ZoneUtil.CoordinateToZone(BAI.Utils.General.CartCoord3D)">
            <summary>
            Convert a 3D coordinate to a zone name such as Zone:X3Y0Z6.
            Note the (X, Y, Z) values in the coordinate object should be integers (in a grid)
            </summary>
            <param name="coord">3D coordinate object to convert</param>
            <returns>Zone name in format of Zone:X3Y0Z6</returns>
        </member>
        <member name="P:BAI.Systems.Utils.Iob.InputGroupDebouncerBase.EnableDuplicateEventSending">
            <summary>
            If true, every time the signals evaluate as high an event will be raised,
            even if the event has been raised before.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Iob.WhitelistInputGroupDebouncer.SetAllowedSignalCombinations(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Boolean}})">
            <summary>
            Updated the set of allow signals states.
            </summary>
            <param name="allowedStates">each dictionary must contain all the signals</param>
        </member>
        <member name="M:BAI.Systems.Utils.Iob.WhitelistInputGroupDebouncer.SetAllowedSignalCombinations(System.Collections.Generic.List{System.String})">
            <summary>
            Requires that all the listed signals be high. All others are ignored.
            </summary>
            <param name="mustBeHigh"></param>
        </member>
        <member name="T:BAI.Systems.Utils.Location.LocationConverter">
            <summary>
            Converts native SC teach data into NamedLocations for use by InSight.
            </summary>
            <remarks>
            The NamedLocations converted by class are not compatible with the EC Wafer Engine.
            See <see cref="T:BAI.Systems.Utils.Location.ECLocationConverter"/>.
            </remarks>
        </member>
        <member name="T:BAI.Systems.Utils.Location.ECLocationConverter">
            <summary>
            Converts parameters between the native EC format and the SC native format.
            </summary>
        </member>
        <member name="T:BAI.Systems.Utils.Location.LocationRef">
            <summary>
            A reference to a location.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationRef.Parse(System.String)">
            <summary>
            Parses a location name into a LocationRef.
            </summary>
            <param name="locRef">a location name like "PortA.Slot1"</param>
            <returns></returns>
        </member>
        <member name="P:BAI.Systems.Utils.Location.LocationRef.StationName">
            <summary>
            The name of the station.  For example, "PortA".
            </summary>
        </member>
        <member name="P:BAI.Systems.Utils.Location.LocationRef.FullName">
            <summary>
            The full name of the location, including the module name.
            </summary>
        </member>
        <member name="P:BAI.Systems.Utils.Location.LocationRef.ShortName">
            <summary>
            The name of the location with no module name prepended.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationRef.GetNamedLocation(BAI.Systems.Utils.Location.ILocationManager,BAI.Systems.Common.OperationalType,System.String,System.String,System.String)">
            <summary>
            Converts this location ref into a location using the given location manager.
            </summary>
            <param name="locMan"></param>
            <param name="opType"></param>
            <param name="owner"></param>
            <param name="carrierType"></param>
            <param name="substrateType"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationRef.GetNamedLocation(BAI.Systems.Utils.Location.ILocationManager,BAI.Systems.Common.OperationalType,BAI.Systems.Data.Motion.MotionAxisEnum,System.String,System.String)">
            <summary>
            Converts this location ref into a location using the given location manager.
            </summary>
            <param name="locMan"></param>
            <param name="opType"></param>
            <param name="owner"></param>
            <param name="carrierType"></param>
            <param name="substrateType"></param>
            <returns></returns>        
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationRef.GetNamedLocation(BAI.Systems.Utils.Location.ILocationManager,BAI.Systems.Common.OperationalType,BAI.Systems.Data.Motion.ArmAndPaddle,System.String,System.String)">
            <summary>
            Converts this location ref into a location using the given location manager.
            </summary>
            <param name="locMan"></param>
            <param name="opType"></param>
            <param name="owner"></param>
            <param name="carrierType"></param>
            <param name="substrateType"></param>
            <returns></returns>
        </member>
        <member name="P:BAI.Systems.Utils.Location.LocationRef.SlotIndex">
            <summary>
            The slot index if this a group location.
            </summary>
            <exception cref="T:System.NotSupportedException">Throw if this location is not a group location.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationRef.GetHigherSlot(System.Int32)">
            <summary>
            Gets a reference to a location that is <paramref name="nSlots"/> higher than this reference.
            Only valid on references to group locations.
            </summary>
            <param name="nSlots"></param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Utils.Location.LocationRef.SingleLocationRef">
            <summary>
            A location ref to a single location, for example "WaferAligner.Chuck".
            </summary>
        </member>
        <member name="T:BAI.Systems.Utils.Location.LocationRef.GroupLocationRef">
            <summary>
            A location ref to a group location, for example "PortA.Slot25".
            </summary>
        </member>
        <member name="P:BAI.Systems.Utils.Location.LocationManager.LocationMapModuleType">
            <summary>
            VT, TC, LL, WB, EFEM
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationManager.GetSingleLocation(BAI.Systems.Common.OperationalType,System.String,System.String)">
            <summary>
            Get a cloned copy of the single named location.
            </summary>
            <param name="type">Calib, Config</param>
            <param name="ownerHost">EE1, EE2 for VT or ColumnA, B, C for TC</param>
            <param name="locationName">name of the location such as PortA.WaferSensor.Present</param>
            <returns>A cloned copye of the single named location</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationManager.GetLocationGroup(BAI.Systems.Common.OperationalType,System.String,System.String)">
            <summary>
            Get a cloned copy of the named location group.
            </summary>
            <param name="type">Calib, Config</param>
            <param name="ownerHost">EE1, EE2 for VT or ColumnA, B, C for TC</param>
            <param name="locationNameBase">Base name of the location such as PortC.Slot</param>
            <returns>A cloned copy of the named location group</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationManager.GetLocationMap(BAI.Systems.Common.OperationalType)">
            <summary>
            Get a cloned copy of the entire location map (all locations, groups for all owner hosts)
            </summary>
            <param name="type">Calib, Config</param>
            <returns>A cloned copy of the entire location map</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationStation.AddMissingParameters(BAI.Systems.Utils.Location.LocationMap,System.Action{BAI.Systems.Utils.Location.NamedLocationGroup},System.Action{BAI.Systems.Utils.Location.NamedLocation})">
             <summary>
            
             </summary>
             <param name="map"></param>
             <param name="groupUpdated">Called for each group that was updated.</param>
             <param name="singleUpdated">Called for each single location that updated.</param>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationStation.AddDefaultParameters(BAI.Systems.Utils.Location.NamedLocationBase{System.Double})">
             <summary>
            
             </summary>
             <param name="loc"></param>
             <returns>true if any parameters were added</returns>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationStationExtensions.AddDoubleParam(BAI.Systems.Utils.Location.NamedLocationGroup,System.String,System.Double,System.String)">
            <summary>
            Adds a new parameter or throws if it already exists.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterAlreadyExistsException">Thrown if the parameter already exists.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationStationExtensions.AddDoubleParam(BAI.Systems.Utils.Location.NamedLocation,System.String,System.Double,System.String)">
            <summary>
            Adds a new parameter or throws if it already exists.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterAlreadyExistsException">Thrown if the parameter already exists.</exception>
        </member>
        <member name="P:BAI.Systems.Utils.Location.WeStationCreationParameters.Name">
            <summary>
            In the form of "PortA.Slot".
            </summary>
        </member>
        <member name="P:BAI.Systems.Utils.Location.WeStationCreationParameters.WaferMappingDi">
            <summary>
            Index of SBC DI that can be used to map the wafer, or null if the station does not support mapping.
            </summary>
        </member>
        <member name="P:BAI.Systems.Utils.Location.WeSingleStationCreationParameters.Name">
            <summary>
            In the form of "PortA.Slot".
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationXmlUtil.readLocationGroup(System.Xml.XmlReader)">
            <summary>
            Read xml content of tag LocationGroup to contruct an instance of NamedLocationGroup.
            The XmlRead must be read right to the LocationGroup tag
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationXmlUtil.readLocationSingle(System.Xml.XmlReader)">
            <summary>
            Read xml content of tag Location to contruct an instance of NamedLocation.
            The XmlRead must be read right to the Location tag
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.GetParameter(System.String)">
            <summary>
            Get a clone of a parameter of default type or returns null if not found.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.GetParameter``1(System.String)">
            <summary>
            Get a clone of a parameter of given type or returns null if not found.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.GetTypedParameter(System.Type,System.String)">
            <summary>
            Get a clone of a parameter of given type or returns null if not found.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.AddParameter(BAI.Systems.Utils.Data.NamedParameter{`0})">
            <summary>
            Adds a new parameter or throws if it already exists.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterAlreadyExistsException">Thrown if the parameter already exists.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.AddParameter``1(BAI.Systems.Utils.Data.NamedParameter{``0})">
            <summary>
            Adds a new parameter or throws if it already exists.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterAlreadyExistsException">Thrown if the parameter already exists.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.AddTypedParameter(BAI.Systems.Utils.Data.TypedNamedParameter)">
            <summary>
            Adds a new parameter or throws if it already exists.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterAlreadyExistsException">Thrown if the parameter already exists.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.AddTypedParameter(BAI.Systems.Utils.Data.TypedNamedParameter,System.Boolean)">
            <summary>
            Adds a new parameter or throws if it already exists.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterAlreadyExistsException">Thrown if the parameter already exists.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.ReplaceParameter(BAI.Systems.Utils.Data.NamedParameter{`0})">
            <summary>
            Replaces the parameter (without cloning) or throws if it does not exists.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterNotFoundException">Thrown if the parameter does not exist.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.ReplaceParameter``1(BAI.Systems.Utils.Data.NamedParameter{``0})">
            <summary>
            Replaces the parameter or throws if it does not exists.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterNotFoundException">Thrown if the parameter does not exist.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.ReplaceTypedParameter(BAI.Systems.Utils.Data.TypedNamedParameter)">
            <summary>
            Replaces the parameter (without cloning) or throws if it does not exists.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterNotFoundException">Thrown if the parameter does not exist.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.RemoveParameter(System.String)">
            <summary>
            Removes a parameter.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterNotFoundException">Thrown if the parameter does not exists.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.UpdateParameter(System.String,`0)">
            <summary>
            Replaces an existing parameter with a cloned value.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterNotFoundException">Thrown if the parameter does not exist or is of a different type the <paramref name="updatedValue"/>.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.UpdateParameter``1(System.String,``0)">
            <summary>
            Replaces an existing parameter with a cloned value.
            </summary>
            <exception cref="T:BAI.Systems.Common.Exceptions.ValidationExceptions.ParameterNotFoundException">Thrown if the parameter does not exist or is of a different type the <paramref name="updatedValue"/>.</exception>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.SetParameter(System.String,`0,System.String)">
            <summary>
            Either adds or replaces the parameter.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.SetBoolParam(System.String,System.Boolean)">
            <summary>
            Either adds or replaces the parameter.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.SetNumberWithUnitParameter(System.String,BAI.General.NumberWithUnit)">
            <summary>
            Sets a double-typed parameter to value of a NumberWithUnit.
            </summary>
            <param name="parameterName"></param>
            <param name="nwu">The Number and Unit will become the Value and Unit of the parameter respectively.</param>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.SetParameter``1(BAI.Systems.Utils.Data.NamedParameter{``0})">
            <summary>
            Either adds or replaces the parameter.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.NamedLocationBase`1.SetTypedParameter(BAI.Systems.Utils.Data.TypedNamedParameter)">
            <summary>
            Either adds or replaces the parameter.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationMap.UpdateSingleLocation(BAI.Systems.Utils.Location.NamedLocation)">
            <summary>
            Update a single named location.
            Note: A cloned copy is stored so that change to the input location afterward does not impact map
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationMap.UpdateLocationGroup(BAI.Systems.Utils.Location.NamedLocationGroup)">
            <summary>
            Update a single named location.
            Note: A cloned copy is stored so that change to the input location afterward does not impact map
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:BAI.Systems.Utils.Location.LocationMap.Clone">
            <summary>
            Performs a deep copy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Utils.Location.VerticalLocationGroup">
            <summary>
            Represents a group of locations that are a stack along the vertical direction
            </summary>
        </member>
        <member name="T:BAI.Systems.Utils.Persistence.PersistTimeStamp">
            <summary>
            Class to persist a single named time stamp on disk
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Persistence.PersistTimeStamp.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            Constructor
            </summary>
            <param name="stampName">Name of stamp.</param>
            <param name="persistFile">Name of file to persist stamp.</param>
            <param name="minPersistInterval">Minimum interval to save time stamp on disk ( > 15 sec).</param>
        </member>
        <member name="M:BAI.Systems.Utils.Persistence.PersistTimeStamp.#ctor(System.String,System.String)">
            <summary>
            Constructor to use 15 minutes as the minimum persistence update.
            </summary>
            <param name="stampName"></param>
            <param name="persistFile"></param>
        </member>
        <member name="M:BAI.Systems.Utils.Persistence.PersistTimeStampGroup.#ctor(System.String[],System.String,System.TimeSpan)">
            <summary>
            Constructor
            </summary>
            <param name="names">Name of stamp.</param>
            <param name="persistFile">Name of file to persist stamp.</param>
            <param name="minPersistInterval">Minimum interval to save time stamp on disk ( > 15 sec).</param>
        </member>
        <member name="M:BAI.Systems.Utils.Persistence.PersistTimeStampGroup.#ctor(System.String[],System.String)">
            <summary>
            Constructor to use 15 minutes as the minimum persistence update.
            </summary>
            <param name="names"></param>
            <param name="persistFile"></param>
        </member>
        <member name="T:BAI.Systems.Utils.ResourceShare.ResourceShareClientDevice">
            <summary>
            Base class for a typical device that shares resources.
            This device acquires a number of resources to performs at most one transaction/action. 
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientDevice.ResourcesNeededForTransaction(System.String,BAI.Systems.Services.ResourceShare.ResourceUsageData)">
            <summary>
            Calculate which shared resources are needed to perform a transaction
            </summary>
            <param name="trans">Transaction, or action to perform, such as PumpChamber, OpenPort</param>
            <param name="usage">Data for the transaction, usually derived type, such as start and end pressures</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientDevice.initSharedResources">
            <summary>
            Load sharedResources from configuration file
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientDevice.initSharingReactions">
            <summary>
            Map reaction string to delegates (usually method in derived classes)
            </summary>
        </member>
        <member name="T:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase">
            <summary>
            Abstract base class for client that participate in sharing resources.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.AssertResources(System.String[])">
            <summary>
            Assert a list of resources is currently acquired. Throws exception if assertion fails.
            </summary>
            <param name="resources"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.reactToResourceShareRequest(System.String,System.String,System.String,BAI.Systems.Services.ResourceShare.ResourceUsageData)">
            <summary>
            Dispatcher to run the named reaction defined in configuration file
            </summary>
            <param name="resource">Shared resource</param>
            <param name="request">Acquire or Release request</param>
            <param name="action">Action the requester need to use shared resource for</param>
            <param name="data">Supplemental data for action to use shared resource</param>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.reactionAllow(System.String,System.String,System.String,BAI.Systems.Services.ResourceShare.ResourceUsageData)">
            <summary>
            Reaction delegate - do nothing
            </summary>
            <param name="request"></param>
            <param name="resource"></param>
            <param name="action"></param>
            <param name="data"></param>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.initSharedResources">
            <summary>
            Construct list sharedResources from configuration file
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.initSharingReactions">
            <summary>
            Construct map sharingReactions from configuration file
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.initReactionCalls">
            <summary>
            Construct map reactionCalls from configuration file.
            This base implementation only adds common reactions - None (do nothing), Reject (every request).
            Derived class is expected to override this method to add more reactions.
            The derived class should call base.initReactionCalls() first and then add to reactionCalls map.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.validateReactionCalls">
            <summary>
            Make sure that all reaction names (value in sharingReactions map) has a delegate in reactionCalls
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.uninitReactionCalls">
            <summary>
            Clear reactionCalls map. Derived class does not need to override.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.registerSharing">
            <summary>
            Register to the resource manager that the client needs to participate in sharing the list of resources
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.ResourceShareClientBase.unregisterSharing">
            <summary>
            Unregister to the resource manager that the client no longer participate in sharing the list of resources
            </summary>
        </member>
        <member name="T:BAI.Systems.Utils.ResourceShare.SpaceShareClient">
            <summary>
            Base class for devices to share space in conflict zones
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.ResourceShare.SpaceShareClient.ResourcesNeededForTransaction(System.String,BAI.Systems.Services.ResourceShare.ResourceUsageData)">
            <summary>
            Calculate which shared resources are needed to perform a transaction
            </summary>
            <param name="trans">Transaction, or action to perform, such as PumpChamber, OpenPort</param>
            <param name="usage">Data for the transaction, usually derived type, such as start and end pressures</param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Utils.Data.ParameterXmlUtil`1.ReadParameterSet(System.Xml.XmlReader)">
            <summary>
            Read XML section with tag ParameterSet to contruct a list of NamedParameter instances
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:BAI.Systems.Utils.Data.TypedNamedParameter.TypeEquals(System.Type)">
            <summary>
            You MUST use this method when comparing types to this Parameter's type, since
            primitive types (double, string) are cast into higher level container types
            (DoubleParam, StringParam)
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Utils.Remoting.CopyableMsgTypeParse`1">
            <summary>
            Looks like a MsgTypeParse, but also with the ability to copy and compare fields.
            Also uses the <see cref="T:BAI.Utils.General.ReflectionTypeConverter"/> instead of custom serialization.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:BAI.Systems.Utils.Remoting.CopyableMsgTypeParse`1.Fields">
            <summary>
            Should return a list of this class's fields.
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.IncrementalRetry.Retry(System.Func{System.Boolean},BAI.Systems.Utils.IncrementalRetry.Settings)">
            <summary>
            Calls <paramref name="func"/> until it returns true, according to the <paramref name="settings"/>.
            </summary>
            <param name="func">func that returns true on success</param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Utils.Substrates.SubstratePresenceUtil">
            <summary>
            Utility class to convert between substrate presence and wafer presence related data structures
            </summary>
        </member>
        <member name="M:BAI.Systems.Utils.Trajectories.Trajectory.Validate(System.Boolean)">
            <summary>
            Returns an array of error messages about the state of this trajectory.
            </summary>
            <returns>a 0 length array if there are no problems</returns>
        </member>
        <member name="T:BAI.Systems.HwComp.OCR.OcrAutoTriggerBase`1">
            <summary>
            Implementation for an ethernet-connected SR-600 series Keyence 2D ID reader
            </summary>
        </member>
        <member name="P:BAI.Systems.HwComp.OCR.OcrAutoTriggerBase`1.ReadTimeout">
            <summary>
            Read timeout.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComp.OCR.OcrAutoTriggerBase`1.ReadId">
            <summary>
            Read an ID.
            Throws BCRException
            </summary>
            <returns>Code string</returns>
        </member>
        <member name="M:BAI.Systems.HwComp.OCR.OcrAutoTriggerBase`1.ReadId(System.String)">
            <summary>
            Read an ID with a specific parameter bank.
            Throws BCRException
            </summary>
            <param name="recipeStr"></param>
            <returns>Code string</returns>
        </member>
        <member name="M:BAI.Systems.HwComp.OCR.OcrAutoTriggerBase`1.resetHeartBeat">
            <summary>
            This must be called inside lock(mSockServer) 
            </summary>
            
        </member>
        <member name="P:BAI.Systems.HwComp.OCR.OcrCognexRemoteImp.ReadTimeout">
            <summary>
            Read timeout.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComp.OCR.OcrCognexRemoteImp.ReadId">
            <summary>
            Read an ID.
            Throws BCRException
            </summary>
            <returns>Code string</returns>
        </member>
        <member name="M:BAI.Systems.HwComp.OCR.OcrCognexRemoteImp.ReadId(System.String)">
            <summary>
            Read an ID with a specific parameter bank.
            Throws BCRException
            </summary>
            <param name="recipeStr"></param>
            <returns>Code string</returns>
        </member>
        <member name="P:BAI.Systems.HwComp.OCR.OcrRemoteProxy.ReadTimeout">
            <summary>
            Read timeout.
            </summary>
        </member>
        <member name="M:BAI.Systems.HwComp.OCR.OcrRemoteProxy.ReadId">
            <summary>
            Read an ID.
            Throws BCRException
            </summary>
            <returns>Code string</returns>
        </member>
        <member name="M:BAI.Systems.HwComp.OCR.OcrRemoteProxy.ReadId(System.String)">
            <summary>
            Read an ID with a specific parameter bank.
            Throws BCRException
            </summary>
            <param name="recipeStr"></param>
            <returns>Code string</returns>
        </member>
        <member name="M:BAI.Systems.HwComp.PioSwitch.PioSwitchRemoteImp.GetComm">
            <summary>
            Get the Comm reference (used by service proxy to combine this with DIO)
            </summary>
        </member>
        <member name="T:BAI.Systems.HwComp.PressureGauge.PressureUpdateEventArgs">
            <summary>
            Pay load for pressure update events - in unit of milli-torrs
            </summary>
        </member>
        <member name="T:BAI.Systems.HwComp.PressureGauge.IPressureGaugeOp">
            <summary>
            Represents a pressure gauge hardware component.
            </summary>
            <remarks>
            (MKS 901P for example)
            </remarks>
        </member>
        <member name="M:BAI.Systems.HwComp.HwComponentRemoteProxy.instantiateImp(System.String,System.String)">
            <summary>
            This method is call in proxy constructor to instantiate implementation
            </summary>
            <param name="componentName"></param>
            <param name="clientName"></param>
            <returns></returns>
        </member>
        <member name="T:BAI.Systems.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BAI.Systems.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BAI.Systems.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BAI.Systems.Properties.Resources.BaseType_Cannot_Be_Abstract">
            <summary>
              Looks up a localized string similar to The base type &apos;{0}&apos; cannot be abstract..
            </summary>
        </member>
        <member name="P:BAI.Systems.Properties.Resources.BaseType_Cannot_Be_Sealed">
            <summary>
              Looks up a localized string similar to The base type &apos;{0}&apos; cannot be sealed..
            </summary>
        </member>
        <member name="P:BAI.Systems.Properties.Resources.BaseType_Must_Have_Default_Ctor">
            <summary>
              Looks up a localized string similar to The base type &apos;{0}&apos; must have a public parameterless constructor..
            </summary>
        </member>
        <member name="P:BAI.Systems.Properties.Resources.InterfaceType_Must_Be_Interface">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; must be an interface, not a class..
            </summary>
        </member>
        <member name="T:BAI.Systems.Services.ResourceShare.ResourceShareCallData">
            <summary>
            Data class for thread procs for Acquire/Release resource
            </summary>
        </member>
        <member name="T:BAI.Systems.Services.ResourceShare.ResourceUsageData">
            <summary>
            Base class to represent the data an active client broadcasts when sending:
            	1. Request to acquire the resource
            	2. Updates on progress using the resource (optional)
            	3. Notification to release the resource 
            </summary>
        </member>
        <member name="T:BAI.Internal.Systems.Devices.WaferAligner.OfaInternal.OfaModuleOperationsHelper">
            <summary>
            OFA related operations that can run on either the EC or the CTC.
            </summary>
            <remarks>
            <para>
                Sometimes the EC4 stops responding when doing a ReadId command.
                This class makes it possible to work around this problem by performing
                the ReadId from the CTC computer directly to the wafer id reader.
            </para>
            <para>
                Since not all hardware configurations necessarily have a network
                connection from the CTC computer to the tool switch, this code supports
                being run either the EC or CTC.
            </para>
            <para>
                See See TFS-4438 and TFS-2356.
            </para>
            </remarks>
        </member>
        <member name="M:BAI.Internal.Systems.Devices.WaferAligner.OfaInternal.OfaModuleOperationsHelper.tryDoWaferMove``1(BAI.Systems.Common.OfaOperationResult{``0},System.Action,BAI.Systems.Common.WaferPresenceState,BAI.Systems.Common.WaferPresenceState)">
            <summary>
            Attempt to execute a wafer move and updates the <paramref name="ret"/> based on the
            success or failure of the move.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ret"></param>
            <param name="move"></param>
            <param name="postMoveChuckPres"></param>
            <param name="postMoveEePres"></param>
        </member>
        <member name="T:BAI.Infras.Utils.General.ByteSignature">
            <summary>
            Represent bit pattern logic.
            </summary>
            <remarks>
                <para>
                    This class can be used to match against a bitfield. It is defined using a string representation.
                    There is one special value: <c>NonZero</c>. If the mask is <c>NonZero</c>, it will match as true against
                    any non-zero integer.
                </para>
                <para>
                    If the mask is not <c>NonZero</c>, each character of the mask defines the matching behavior against one bit. THe possible values
                    for the characters are:
                </para>
                <list type="bullet">
                    <item>
                        <description>'1': bit must be 1</description>
                    </item>
                    <item>
                        <description>'0': bit must be 0</description>
                    </item>
                    <item>
                        <description>'X' or 'x' or '*': bit may be either 1 or 0</description>
                    </item>
                </list>
                <para>
                    The ByteSignature ignores bits that are not defined in the mask.
                </para>
            </remarks>
        </member>
        <member name="P:BAI.Infras.Utils.General.ByteSignature.Mask">
            <summary>
            The string representation of the ByteSignature.  Defaults all DontCareMasks to 'x'.
            </summary>
        </member>
    </members>
</doc>
