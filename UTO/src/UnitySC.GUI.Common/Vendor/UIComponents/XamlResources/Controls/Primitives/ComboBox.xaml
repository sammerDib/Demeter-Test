<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Behaviors"
    xmlns:controller="clr-namespace:UnitySC.GUI.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dependencyObjects="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.MarkupExtensions"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <!--#region Drop Down Toggle Button-->
    <Style x:Key="ComboBoxDropDownToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border
                        MinHeight="{TemplateBinding Height}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid>
                                <Rectangle Fill="{TemplateBinding Background}" />
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>
                            <Grid
                                x:Name="ExpandPath"
                                HorizontalAlignment="Right"
                                RenderTransformOrigin="0.5,0.5">
                                <Grid.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Grid.RenderTransform>
                                <Path
                                    x:Name="Arrow"
                                    Height="6"
                                    Margin="10,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="M0,0L32,0 16,19.745z"
                                    Fill="{TemplateBinding Foreground}"
                                    RenderTransformOrigin="0.5,0.5"
                                    Stretch="Uniform" />
                            </Grid>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Unchecked" To="Checked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="180" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="180" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                        GeneratedDuration="0"
                                        From="Checked"
                                        To="Unchecked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="180" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="180" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion Drop Down Toggle Button-->

    <!--#region Editable ComboBox Template-->
    <ControlTemplate x:Key="EditableComboBoxTemplate" TargetType="{x:Type TextBox}">
        <ScrollViewer
            x:Name="PART_ContentHost"
            VerticalAlignment="Top"
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
            TextBlock.Foreground="red" />
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--#endregion Editable ComboBox Template-->

    <SolidColorBrush x:Key="ComboBoxBorderbrush" Color="Transparent" />
    <SolidColorBrush x:Key="ComboBoxBackground" Color="{DynamicResource ControlInputBackground}" />
    <SolidColorBrush x:Key="ComboBoxForeground" Color="{DynamicResource ControlActionForeground}" />
    <SolidColorBrush x:Key="ComboBoxItemBackground" Color="{DynamicResource ControlActionBackground}" />
    <SolidColorBrush x:Key="ComboBoxFocusedBrush" Color="{DynamicResource SelectionForeground}" />

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{DynamicResource ComboBoxBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxForeground}" />
        <Setter Property="TextElement.FontSize" Value="{StaticResource FontSizeNormal}" />
        <Setter Property="Height" Value="30" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderbrush}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}" />
        <Setter Property="BorderThickness">
            <Setter.Value>
                <Thickness Bottom="{StaticResource UnderlineThicknessSize}" />
            </Setter.Value>
        </Setter>
        <Setter Property="behaviors:UserInterfaceScale.FontScale">
            <Setter.Value>
                <ScaleTransform ScaleX="{Binding Source={x:Static controller:App.Instance}, Path=UserInterfaceManager.FontScale}" ScaleY="{Binding Source={x:Static controller:App.Instance}, Path=UserInterfaceManager.FontScale}" />
            </Setter.Value>
        </Setter>
        <Setter Property="dependencyObjects:Icon.Margin" Value="0,0,7,0" />
        <Setter Property="Padding" Value="8,0,12,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border
                        x:Name="Container"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2,2,0,0"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <ToggleButton
                                x:Name="ToggleButton"
                                Height="{TemplateBinding Height}"
                                dependencyObjects:Icon.Geometry="{TemplateBinding dependencyObjects:Icon.Geometry}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                ClickMode="Press"
                                Focusable="false"
                                Foreground="{TemplateBinding Foreground}"
                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{StaticResource ComboBoxDropDownToggleButtonStyle}" />
                            <DockPanel Margin="{TemplateBinding Padding}">
                                <Path
                                    x:Name="Icon"
                                    Width="{StaticResource IconInsideBoxSizeDouble}"
                                    Height="{StaticResource IconInsideBoxSizeDouble}"
                                    Margin="{TemplateBinding dependencyObjects:Icon.Margin}"
                                    Data="{TemplateBinding dependencyObjects:Icon.Geometry}"
                                    DockPanel.Dock="Left"
                                    Fill="{TemplateBinding Foreground}"
                                    IsHitTestVisible="False"
                                    RenderTransform="{TemplateBinding dependencyObjects:Icon.Transform}"
                                    RenderTransformOrigin="0.5,0.5"
                                    Stretch="Uniform" />
                                <Grid Margin="0,0,20,0">
                                    <ContentPresenter
                                        x:Name="Content"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding SelectionBoxItem}"
                                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                        IsHitTestVisible="False"
                                        TextBlock.Foreground="{TemplateBinding Foreground}">
                                        <ContentPresenter.Resources>
                                            <Style BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="{x:Type TextBlock}">
                                                <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}" />
                                            </Style>
                                        </ContentPresenter.Resources>
                                    </ContentPresenter>
                                    <TextBox
                                        x:Name="PART_EditableTextBox"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Background="Transparent"
                                        CaretBrush="{TemplateBinding Foreground}"
                                        Focusable="True"
                                        FontSize="{TemplateBinding TextElement.FontSize}"
                                        Foreground="{TemplateBinding Foreground}"
                                        LayoutTransform="{Binding Path=(behaviors:UserInterfaceScale.FontScale), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                        Style="{x:Null}"
                                        Visibility="Hidden" />
                                    <TextBlock
                                        x:Name="PART_Watermark"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Background="Transparent"
                                        FontFamily="{TemplateBinding FontFamily}"
                                        FontSize="{TemplateBinding FontSize}"
                                        FontStretch="{TemplateBinding FontStretch}"
                                        FontStyle="{TemplateBinding FontStyle}"
                                        FontWeight="{TemplateBinding FontWeight}"
                                        Foreground="{TemplateBinding Foreground}"
                                        IsHitTestVisible="False"
                                        LayoutTransform="{Binding Path=(behaviors:UserInterfaceScale.FontScale), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                        Opacity="{StaticResource DisabledOpacity}"
                                        Text="{TemplateBinding dependencyObjects:Watermark.Text}"
                                        Visibility="Collapsed" />
                                </Grid>
                            </DockPanel>
                            <Popup
                                x:Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Slide">
                                <Grid
                                    x:Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    Margin="10,0,10,10"
                                    SnapsToDevicePixels="True">
                                    <Border
                                        Margin="0,2,0,0"
                                        Background="{DynamicResource ComboBoxItemBackground}"
                                        CornerRadius="0,0,2,2"
                                        Effect="{StaticResource ControlsShadow}" />
                                    <Border
                                        x:Name="DropDownBorder"
                                        Margin="0,8"
                                        BorderBrush="{DynamicResource ComboBoxBorderbrush}"
                                        BorderThickness="0"
                                        CornerRadius="0">
                                        <ScrollViewer
                                            CanContentScroll="True"
                                            HorizontalScrollBarVisibility="Auto"
                                            SnapsToDevicePixels="True"
                                            VerticalScrollBarVisibility="Auto">
                                            <VirtualizingStackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="SelectedIndex" Value="-1" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Watermark" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="dependencyObjects:Icon.Geometry" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Container" Property="BorderBrush" Value="{DynamicResource ComboBoxFocusedBrush}" />
                            <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource ComboBoxFocusedBrush}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="Container" Property="BorderBrush" Value="{DynamicResource ComboBoxFocusedBrush}" />
                            <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource ComboBoxFocusedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_EditableTextBox" Property="Template" Value="{StaticResource EditableComboBoxTemplate}" />
                            <Setter TargetName="Content" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Standard" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region ComboBox Item-->
    <SolidColorBrush x:Key="ComboBoxMouseOverItemBackground" Color="{DynamicResource SelectionBackground}" />

    <Style d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Height" Value="30" />
        <Setter Property="Padding" Value="8,5,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid Height="{TemplateBinding Height}">
                        <Rectangle
                            x:Name="SelectedRectangle"
                            Fill="{DynamicResource ComboBoxMouseOverItemBackground}"
                            IsHitTestVisible="True"
                            Opacity="0"
                            RadiusX="0"
                            RadiusY="0" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="Center">
                            <ContentPresenter.Resources>
                                <Style BasedOn="{StaticResource BaseTextBlockStyle}" TargetType="TextBlock">
                                    <Setter Property="Height" Value="30" />
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="SelectedRectangle" Property="Opacity" Value="{StaticResource MouseOverOpacity}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion ComboBox Item-->

</ResourceDictionary>
