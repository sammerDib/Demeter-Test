<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Behaviors"
    xmlns:controls="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Controls">

    <SolidColorBrush x:Key="ValidationErrorBackground" Color="{DynamicResource ControlActionBackground}" />

    <ControlTemplate x:Key="MaterialDesignValidationErrorTemplate">
        <ControlTemplate.Resources>
            <DataTemplate DataType="{x:Type ValidationError}">
                <TextBlock
                    MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}"
                    Margin="2"
                    HorizontalAlignment="Left"
                    Foreground="{DynamicResource SeverityErrorBrush}"
                    Style="{StaticResource OverlineTextStyle}"
                    Text="{Binding ErrorContent}"
                    TextWrapping="Wrap"
                    UseLayoutRounding="false" />
            </DataTemplate>
        </ControlTemplate.Resources>
        <StackPanel>
            <AdornedElementPlaceholder Name="Placeholder" />
            <Border x:Name="DefaultErrorViewer" Visibility="Collapsed">
                <Grid>
                    <Border
                        Background="{DynamicResource ValidationErrorBackground}"
                        CornerRadius="0,0,3,3"
                        Effect="{StaticResource ThinControlsShadow}" />
                    <TextBlock
                        MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}"
                        Margin="8,2"
                        HorizontalAlignment="Left"
                        Foreground="{DynamicResource SeverityErrorBrush}"
                        Style="{StaticResource OverlineTextStyle}"
                        Text="{Binding CurrentItem.ErrorContent}"
                        TextWrapping="Wrap"
                        UseLayoutRounding="false" />
                </Grid>
            </Border>
            <controls:ValidationErrorPopup
                x:Name="ValidationPopup"
                AllowsTransparency="True"
                IsOpen="False"
                Placement="Bottom"
                PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}">
                <Border x:Name="PopupBorder" Background="{DynamicResource ValidationErrorBackground}">
                    <TextBlock
                        Margin="0,2"
                        HorizontalAlignment="Left"
                        Foreground="{DynamicResource SeverityErrorBrush}"
                        Style="{StaticResource OverlineTextStyle}"
                        Text="{Binding CurrentItem.ErrorContent}"
                        TextWrapping="Wrap"
                        UseLayoutRounding="false" />
                </Border>
            </controls:ValidationErrorPopup>
        </StackPanel>
        <ControlTemplate.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.OnlyShowOnFocus)}" Value="False" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.UsePopup)}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.Suppress)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.OnlyShowOnFocus)}" Value="False" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.UsePopup)}" Value="False" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.Suppress)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="DefaultErrorViewer" Property="Visibility" Value="Visible" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.OnlyShowOnFocus)}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.UsePopup)}" Value="True" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="ValidationPopup" Property="IsOpen" Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.OnlyShowOnFocus)}" Value="True" />
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(behaviors:ValidationAssist.UsePopup)}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="DefaultErrorViewer" Property="Visibility" Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.IsEnabled}" Value="False">
                <Setter TargetName="DefaultErrorViewer" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>
