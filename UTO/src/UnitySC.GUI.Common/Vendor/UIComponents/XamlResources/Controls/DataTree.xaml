<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Behaviors"
    xmlns:controls="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Controls"
    xmlns:converters="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Components.DataTree.Utilities.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dataTreeControls="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Components.DataTree.Controls"
    xmlns:dataTreeConverters="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Components.DataTree.Converters"
    xmlns:filters="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Components.DataTables.Filters"
    xmlns:interfaces="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Components.DataTree.Interfaces"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    mc:Ignorable="d">

    <!--#region Constants-->
    <system:Double x:Key="DataTreeItemMinHeight">40</system:Double>
    <system:Double x:Key="DataTreeDisabledOpacity">0.3</system:Double>
    <KeyTime x:Key="DataTreeItemRotationAnimationKeyTime">0:0:0.15</KeyTime>
    <!--#endregion Constants-->

    <!--#region Converters-->
    <converters:TreeNodeToLeftMarginConverter x:Key="TreeNodeToLeftMarginConverter" Length="20" />
    <!--#endregion Converters-->

    <!--#region Brushes-->
    <SolidColorBrush x:Key="DataTreeItemBackground" Color="Transparent" />
    <SolidColorBrush
        x:Key="DataTreeItemMouseOverBackground"
        Opacity="{StaticResource MouseOverOpacity}"
        Color="{DynamicResource SelectionBackground}" />
    <SolidColorBrush x:Key="DataTreeItemSelectedBackground" Color="{DynamicResource SelectionBackground}" />
    <SolidColorBrush x:Key="DataTreeItemSelectedForeground" Color="{DynamicResource PanelForeground}" />
    <SolidColorBrush x:Key="DataTreeItemDropTargetBackground" Color="{DynamicResource SelectionForeground}" />
    <!--#endregion Brushes-->

    <!--#region TreeElement-->

    <Style
        x:Key="DataTreeItemExpandToggleButtonStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="{StaticResource DataTreeItemMinHeight}" />
        <Setter Property="MinHeight" Value="{StaticResource DataTreeItemMinHeight}" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        x:Name="container"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="Transparent">
                        <DockPanel>
                            <Path
                                x:Name="ExpandPath"
                                Height="10"
                                Margin="10,0"
                                Data="m 5.9999998,294.18 -4.59,-4.59 L 0,291 5.9999998,297 12,291 10.59,289.59 Z"
                                DockPanel.Dock="Right"
                                Fill="{TemplateBinding Foreground}"
                                Opacity="{StaticResource DataTreeDisabledOpacity}"
                                RenderTransformOrigin="0.5,0.5"
                                SnapsToDevicePixels="True"
                                Stretch="Uniform">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                DockPanel.Dock="Left"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                        GeneratedDuration="2"
                                        From="Unchecked"
                                        To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="-90" />
                                                <EasingDoubleKeyFrame KeyTime="{StaticResource DataTreeItemRotationAnimationKeyTime}" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                        GeneratedDuration="2"
                                        From="Checked"
                                        To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="{StaticResource DataTreeItemRotationAnimationKeyTime}" Value="-90" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <!--  Instant duration to avoid animation when creating the UI element  -->
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandPath"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <!--  Instant duration to avoid animation when creating the UI element  -->
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandPath"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                            To="-90"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  This control is dependent on a DataContext ITreeNode typed because it is used with an encapsulation of the model by an ITreeNode managed by the DataTree.  -->
    <Style TargetType="{x:Type dataTreeControls:DataTreeItem}">
        <d:Style.DataContext>
            <x:Type Type="interfaces:ITreeNode" />
        </d:Style.DataContext>
        <Setter Property="IsClicked" Value="{Binding IsClicked}" />
        <Setter Property="IsDragDropDestination" Value="{Binding IsNextParentOfDraggedElement}" />
        <Setter Property="IsExpandable" Value="{Binding IsExpandable}" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
        <Setter Property="IsMouseOverHeader" Value="{Binding IsMouseOver, Mode=OneWayToSource}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
        <Setter Property="OnDragCommand" Value="{Binding OnDragCommand}" />
        <Setter Property="SelectedCommand" Value="{Binding SelectCommand}" />
        <Setter Property="ItemTemplate" Value="{Binding ItemTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dataTreeControls:DataTree}}}" />
        <Setter Property="ItemTemplateSelector" Value="{Binding ItemTemplateSelector, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dataTreeControls:DataTree}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dataTreeControls:DataTreeItem}">
                    <Grid>
                        <Border
                            x:Name="MainBorder"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Opacity="{StaticResource DataTreeDisabledOpacity}" />

                        <DockPanel>

                            <!--#region Header-->

                            <!--  A Border cannot be used instead of grid, the transparent background is necessary to raise trigger events  -->
                            <ContentControl x:Name="PART_HeaderGrid" DockPanel.Dock="Top">
                                <Grid>

                                    <Rectangle Fill="{TemplateBinding Background}" IsHitTestVisible="False" />

                                    <Border
                                        x:Name="Header"
                                        Background="Transparent"
                                        Focusable="True"
                                        SnapsToDevicePixels="true">

                                        <DockPanel Margin="{Binding Path=., Converter={StaticResource TreeNodeToLeftMarginConverter}}">

                                            <ToggleButton
                                                x:Name="Expander"
                                                ClickMode="Press"
                                                DockPanel.Dock="Left"
                                                Foreground="{TemplateBinding Foreground}"
                                                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                Style="{StaticResource DataTreeItemExpandToggleButtonStyle}" />

                                            <!--  Models are always encapsulated in TreeNodes, that's why it is possible to reference DataContext.Model because the DataContext is always of type TreeNode  -->
                                            <!--  ReSharper disable once Xaml.BindingWithContextNotResolved  -->
                                            <ContentPresenter
                                                x:Name="PART_Header"
                                                HorizontalAlignment="Stretch"
                                                VerticalAlignment="Center"
                                                Content="{Binding DataContext.Model, RelativeSource={RelativeSource TemplatedParent}}"
                                                ContentTemplate="{TemplateBinding ItemTemplate}"
                                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />

                                        </DockPanel>

                                    </Border>

                                </Grid>

                            </ContentControl>
                            <!--#endregion Header-->

                        </DockPanel>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDragDropDestination" Value="true">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource DataTreeItemDropTargetBackground}" />
                        </Trigger>
                        <Trigger Property="IsExpandable" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="{Binding DisabledExpanderVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dataTreeControls:DataTree}}, FallbackValue={x:Static Visibility.Hidden}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOverHeader" Value="True">
                            <Setter TargetName="Header" Property="Background" Value="{DynamicResource DataTreeItemMouseOverBackground}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Header" Property="Background" Value="{DynamicResource DataTreeItemSelectedBackground}" />
                            <Setter TargetName="Header" Property="TextElement.Foreground" Value="{DynamicResource DataTreeItemSelectedForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="PART_HeaderGrid" Property="Opacity" Value="{StaticResource DataTreeDisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type dataTreeControls:DataTreeExpander}">
        <Setter Property="TreeNode" Value="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dataTreeControls:DataTreeItem}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dataTreeControls:DataTreeExpander}">
                    <Grid Margin="{Binding Path=TreeNode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TreeNodeToLeftMarginConverter}}">
                        <ToggleButton
                            x:Name="Expander"
                            ClickMode="Press"
                            DockPanel.Dock="Left"
                            Foreground="{TemplateBinding Foreground}"
                            IsChecked="{Binding TreeNode.IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                            Style="{StaticResource DataTreeItemExpandToggleButtonStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  ReSharper disable once Xaml.BindingWithContextNotResolved  -->
                        <DataTrigger Binding="{Binding TreeNode.IsExpandable, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="Expander" Property="Visibility" Value="{Binding DisabledExpanderVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dataTreeControls:DataTree}}, FallbackValue={x:Static Visibility.Hidden}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Style which represents the style of the ScrollViewer used for displaying items, and containing the Header of the GridView.  -->
    <Style
        x:Key="DataTreeGridViewItemStyle"
        BasedOn="{StaticResource {x:Type dataTreeControls:DataTreeItem}}"
        TargetType="{x:Type dataTreeControls:DataTreeItem}">
        <d:Style.DataContext>
            <x:Type Type="interfaces:ITreeNode" />
        </d:Style.DataContext>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource ListViewBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dataTreeControls:DataTreeItem}">

                    <!--  A Border cannot be used instead of grid, the transparent background is necessary to raise trigger events  -->
                    <Grid x:Name="PART_HeaderGrid">
                        <Border
                            x:Name="MainBorder"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Opacity="{StaticResource DataTreeDisabledOpacity}" />

                        <Rectangle Fill="{TemplateBinding Background}" IsHitTestVisible="False" />

                        <Border
                            x:Name="Header"
                            Background="Transparent"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Focusable="True"
                            SnapsToDevicePixels="true">

                            <!--  Models are always encapsulated in TreeNodes, that's why it is possible to reference DataContext.Model because the DataContext is always of type TreeNode  -->
                            <!--  ReSharper disable once Xaml.BindingWithContextNotResolved  -->
                            <GridViewRowPresenter
                                x:Name="GridViewRowPresenter"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Columns="{Binding GridView.Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type dataTreeControls:DataTree}}}"
                                Content="{Binding DataContext.Model, RelativeSource={RelativeSource TemplatedParent}}" />

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDragDropDestination" Value="true">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource DataTreeItemDropTargetBackground}" />
                        </Trigger>
                        <Trigger Property="IsMouseOverHeader" Value="True">
                            <Setter TargetName="Header" Property="Background" Value="{DynamicResource DataTreeItemMouseOverBackground}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Header" Property="Background" Value="{DynamicResource DataTreeItemSelectedBackground}" />
                            <Setter TargetName="Header" Property="TextElement.Foreground" Value="{DynamicResource DataTreeItemSelectedForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="PART_HeaderGrid" Property="Opacity" Value="{StaticResource DataTreeDisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion TreeElement-->

    <!--#region DataTree-->

    <!--
        Style which represents the style of the ScrollViewer used for displaying items, and containing the Header of the GridView.
        
        /!\ Warning, component virtualization when using a GridView is not fully supported.
        When using the scroll, all the items are generated and slowdowns may occur.
        This is why the IsDeferredScrollingEnabled property is used to reduce the impact of using scrolling.
    -->
    <Style x:Key="DataTreeGridViewScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="CanContentScroll" Value="True" />
        <Setter Property="IsDeferredScrollingEnabled" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer
                                behaviors:ScrollViewerAssist.SyncHorizontalOffset="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                DockPanel.Dock="Top"
                                Focusable="false"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden">
                                <Border
                                    Background="{DynamicResource GridViewScrollViewerHeaderBackground}"
                                    BorderBrush="{DynamicResource ListViewBorderBrush}"
                                    BorderThickness="0,0,0,1">
                                    <StackPanel Orientation="Horizontal">
                                        <!--  ReSharper disable Xaml.BindingWithContextNotResolved  -->
                                        <GridViewHeaderRowPresenter
                                            x:Name="PART_GridViewHeaderRowPresenter"
                                            AllowsColumnReorder="{Binding Path=TemplatedParent.TemplatedParent.GridView.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.TemplatedParent.GridView.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.TemplatedParent.GridView.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.TemplatedParent.GridView.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.TemplatedParent.GridView.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.TemplatedParent.GridView.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                            Columns="{Binding Path=TemplatedParent.TemplatedParent.GridView.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                            <!--  ReSharper restore Xaml.BindingWithContextNotResolved  -->
                                            <GridViewHeaderRowPresenter.Resources>
                                                <Style BasedOn="{StaticResource Subtitle1TextStyle}" TargetType="{x:Type TextBlock}">
                                                    <Setter Property="IsHitTestVisible" Value="False" />
                                                    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                                </Style>
                                            </GridViewHeaderRowPresenter.Resources>
                                        </GridViewHeaderRowPresenter>
                                        <!--  NB: Rectangle added to keep the width of the header ScrollViewer the same size as the list items  -->
                                        <Rectangle Margin="{Binding RelativeSource={RelativeSource Self}, Path=(behaviors:ListViewAssist.ListViewItemPadding)}" />
                                    </StackPanel>
                                </Border>

                            </ScrollViewer>

                            <ScrollContentPresenter
                                Name="PART_ScrollContentPresenter"
                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                CanHorizontallyScroll="False"
                                CanVerticallyScroll="False"
                                KeyboardNavigation.DirectionalNavigation="Local" />
                        </DockPanel>

                        <ScrollBar
                            Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="0"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Orientation="Horizontal"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

                        <ScrollBar
                            Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Orientation="Vertical"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type dataTreeControls:DataTreeItemsControl}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <ScrollViewer
                        x:Name="ScrollViewer"
                        behaviors:ScrollViewerAssist.IsAutoHideEnabled="True"
                        CanContentScroll="True"
                        Focusable="False"
                        VerticalScrollBarVisibility="Auto">
                        <ItemsPresenter />
                    </ScrollViewer>

                    <ControlTemplate.Triggers>
                        <!--  Trigger fired when using a GridView  -->
                        <!--
                            [TLa] A warning is raised but RelativeSource Self in a DataTrigger does indeed reference
                            the element to which the ControlTemplate is applied, unlike RelativeSource TemplatedParent
                            which does not raise a warning but does not work.
                        -->
                        <!--  ReSharper disable once Xaml.BindingWithContextNotResolved  -->
                        <DataTrigger Binding="{Binding GridView, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="True">
                            <Setter TargetName="ScrollViewer" Property="Style" Value="{StaticResource DataTreeGridViewScrollViewerStyle}" />
                            <Setter TargetName="ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Auto" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        IsItemsHost="True"
                        IsVirtualizing="True"
                        Orientation="Vertical"
                        VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Trigger fired when using a GridView  -->
            <DataTrigger Binding="{Binding GridView, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="True">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                CanHorizontallyScroll="True"
                                CanVerticallyScroll="True"
                                IsItemsHost="True"
                                IsVirtualizing="True"
                                Orientation="Vertical"
                                VirtualizationMode="Standard" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="DataTreeDragDropSeparatorTemplate">
        <Grid Height="10" Panel.ZIndex="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="10" />
                <ColumnDefinition />
                <ColumnDefinition Width="10" />
            </Grid.ColumnDefinitions>
            <Rectangle
                Grid.Column="0"
                Grid.ColumnSpan="3"
                Height="2"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}" />
            <Polygon
                Grid.Column="0"
                VerticalAlignment="Center"
                Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                Points="0,0 10,5, 0,10" />
            <Polygon
                Grid.Column="2"
                VerticalAlignment="Center"
                Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                Points="10,0 10,10, 0,5" />
        </Grid>
    </DataTemplate>

    <SolidColorBrush x:Key="DataTreeBackground" Color="{DynamicResource PanelBackground}" />

    <dataTreeConverters:DataTreeItemContainerStyleConverter
        x:Key="DataTreeItemContainerStyleConverter"
        DefaultValue="{StaticResource {x:Type dataTreeControls:DataTreeItem}}"
        GridViewValue="{StaticResource DataTreeGridViewItemStyle}" />

    <Style TargetType="{x:Type dataTreeControls:DataTree}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{Binding GridView, Converter={StaticResource DataTreeItemContainerStyleConverter}, RelativeSource={RelativeSource Self}}" />
        <Setter Property="DisabledExpanderVisibility" Value="Hidden" />
        <Setter Property="Background" Value="{DynamicResource DataTreeBackground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dataTreeControls:DataTree}">
                    <Grid Background="Transparent" Focusable="True">

                        <!--#region Drag and Drop Grid-->
                        <Grid
                            x:Name="PART_DragGrid"
                            Height="Auto"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            Panel.ZIndex="1"
                            IsHitTestVisible="False"
                            Visibility="Hidden">
                            <Grid.RenderTransform>
                                <TranslateTransform x:Name="PART_DragGridTransform" />
                            </Grid.RenderTransform>
                            <ContentPresenter
                                Panel.ZIndex="1"
                                Content="{Binding}"
                                ContentTemplate="{StaticResource DataTreeDragDropSeparatorTemplate}" />
                        </Grid>
                        <!--#endregion Drag and Drop Grid-->

                        <!--#region Tree-->
                        <DockPanel x:Name="NavigationDockPanel" Margin="50,0,0,0">
                            <Border
                                x:Name="HeaderBorder"
                                BorderBrush="{DynamicResource ListViewBorderBrush}"
                                BorderThickness="0,0,0,1"
                                DockPanel.Dock="Top">
                                <DockPanel>

                                    <controls:SortingButton
                                        x:Name="SortingButton"
                                        Margin="10,0,0,0"
                                        DockPanel.Dock="Left"
                                        SortEngine="{Binding DataSource.Sort, RelativeSource={RelativeSource TemplatedParent}}"
                                        Visibility="{Binding GridView, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NotNullToCollapsedConverter}}" />

                                    <controls:SearchBar
                                        x:Name="SearchBar"
                                        VerticalAlignment="Top"
                                        SearchEngine="{Binding DataSource.Search, RelativeSource={RelativeSource TemplatedParent}}" />

                                </DockPanel>
                            </Border>

                            <ContentPresenter Content="{TemplateBinding BottomAdditionalContent}" DockPanel.Dock="Bottom" />
                            <dataTreeControls:DataTreeItemsControl
                                x:Name="PART_Content"
                                Focusable="False"
                                GridView="{TemplateBinding GridView}"
                                ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
                                ItemsSource="{Binding DataSource.SourceView, RelativeSource={RelativeSource TemplatedParent}}"
                                VirtualizingPanel.ScrollUnit="Pixel" />
                        </DockPanel>
                        <!--#endregion Tree-->

                        <filters:FilterPanelView
                            x:Name="FilterPanelView"
                            HorizontalAlignment="Left"
                            Background="{TemplateBinding Background}"
                            DataContext="{Binding DataSource.Filter, RelativeSource={RelativeSource TemplatedParent}}" />

                    </Grid>

                    <ControlTemplate.Triggers>
                        <!--
                            [TLa] A warning is raised but RelativeSource Self in a DataTrigger does indeed reference
                            the element to which the ControlTemplate is applied, unlike RelativeSource TemplatedParent
                            which does not raise a warning but does not work.
                        -->
                        <!--  ReSharper disable Xaml.BindingWithContextNotResolved  -->
                        <DataTrigger Binding="{Binding DataSource.Filter.Collection.Count, RelativeSource={RelativeSource Self}}" Value="0">
                            <Setter TargetName="NavigationDockPanel" Property="Margin" Value="0" />
                            <Setter TargetName="FilterPanelView" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataSource.Search.SearchDefinitions.Count, RelativeSource={RelativeSource Self}}" Value="0">
                            <Setter TargetName="SearchBar" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DataSource.Sort.SortDefinitions.Count, RelativeSource={RelativeSource Self}}" Value="0">
                            <Setter TargetName="SortingButton" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataSource.Search.SearchDefinitions.Count, RelativeSource={RelativeSource Self}}" Value="0" />
                                <Condition Binding="{Binding DataSource.Sort.SortDefinitions.Count, RelativeSource={RelativeSource Self}}" Value="0" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="HeaderBorder" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <!--  ReSharper restore Xaml.BindingWithContextNotResolved  -->
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion DataTree-->

</ResourceDictionary>
