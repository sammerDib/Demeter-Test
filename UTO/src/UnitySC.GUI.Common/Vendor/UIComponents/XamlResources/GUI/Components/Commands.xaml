<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:commands="clr-namespace:Agileo.GUI.Components.Commands;assembly=Agileo.GUI"
    xmlns:dataTemplateSelectors="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.DataTemplateSelectors"
    xmlns:guiExtended="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.GuiExtended"
    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <!--#region Styles-->
    <SolidColorBrush x:Key="CommandNotPressedBackground" Color="Transparent" />
    <SolidColorBrush x:Key="CommandNotPressedForeground" Color="{DynamicResource VerticalCanvasForeground}" />
    <SolidColorBrush x:Key="CommandPressedBackground" Color="{DynamicResource SelectionBackground}" />
    <SolidColorBrush x:Key="CommandPressedForeground" Color="{DynamicResource SelectionForeground}" />
    <system:Double x:Key="CommandHeight">75</system:Double>
    <system:Double x:Key="CommandWidth">75</system:Double>

    <Style
        x:Key="CommandButtonStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type Button}">
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Width" Value="{DynamicResource CommandWidth}" />
        <Setter Property="Height" Value="{DynamicResource CommandHeight}" />
        <Setter Property="Background" Value="{DynamicResource CommandNotPressedBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource CommandNotPressedForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid
                        x:Name="container"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}">
                        <Rectangle
                            x:Name="background"
                            Grid.RowSpan="2"
                            Fill="{DynamicResource CommandPressedBackground}"
                            Opacity="0" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="background" Property="Opacity" Value="{StaticResource MouseOverOpacity}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="background" Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="{DynamicResource CommandPressedForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="container" Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ToggleCommandButtonStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Width" Value="{DynamicResource CommandWidth}" />
        <Setter Property="Height" Value="{DynamicResource CommandHeight}" />
        <Setter Property="Background" Value="{DynamicResource CommandNotPressedBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource CommandNotPressedForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        x:Name="container"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}">
                        <Rectangle
                            x:Name="background"
                            Grid.RowSpan="2"
                            Fill="{DynamicResource CommandPressedBackground}"
                            Opacity="0" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="background" Property="Opacity" Value="{StaticResource MouseOverOpacity}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="background" Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="{DynamicResource CommandPressedForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="container" Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="CommandGroupMenuItemStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type MenuItem}">
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Width" Value="{DynamicResource CommandWidth}" />
        <Setter Property="Height" Value="{DynamicResource CommandHeight}" />
        <Setter Property="Background" Value="{DynamicResource CommandNotPressedBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource CommandNotPressedForeground}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid
                        x:Name="templateRoot"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Rectangle
                                x:Name="background"
                                Fill="{DynamicResource CommandPressedBackground}"
                                Opacity="0" />

                            <ContentPresenter
                                x:Name="content"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Header}"
                                ContentSource="Header"
                                ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                TextElement.Foreground="{TemplateBinding Foreground}" />
                            <Popup
                                x:Name="PART_Popup"
                                Grid.Column="0"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                Placement="Left"
                                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Grid Margin="10">
                                    <Rectangle Effect="{StaticResource ControlsShadow}" Fill="{DynamicResource ContextMenuBackground}" />
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <ItemsPresenter
                                                x:Name="ItemsPresenter"
                                                Grid.IsSharedSizeScope="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="background" Property="Opacity" Value="{StaticResource MouseOverOpacity}" />
                        </Trigger>
                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter TargetName="background" Property="Opacity" Value="1" />
                            <Setter TargetName="content" Property="TextElement.Foreground" Value="{DynamicResource CommandPressedForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="templateRoot" Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion Styles-->

    <!--#region DataTemplates-->
    <DataTemplate x:Key="CommandContentTemplate" DataType="{x:Type commands:CommandElement}">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition x:Name="Row0" Height="*" />
                <RowDefinition x:Name="Row1" Height="Auto" />
            </Grid.RowDefinitions>
            <!--  Icon  -->
            <ContentPresenter
                x:Name="Icon"
                Grid.Row="0"
                MaxWidth="{StaticResource MaxCommandIconSize}"
                MaxHeight="{StaticResource MaxCommandIconSize}"
                Margin="0,2,0,0"
                VerticalAlignment="Center"
                Content="{Binding Icon}" />
            <!--  Text  -->
            <TextBlock
                x:Name="Text"
                Grid.Row="1"
                MaxWidth="{StaticResource CommandWidth}"
                Margin="2"
                VerticalAlignment="Center"
                FontSize="{StaticResource FontSizeSmall}"
                Text="{Binding LocalizedName}"
                TextAlignment="Center"
                TextWrapping="Wrap" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding HasIcon}" Value="False">
                <Setter TargetName="Row0" Property="Height" Value="0" />
                <Setter TargetName="Row1" Property="Height" Value="*" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CommandTemplate" DataType="{x:Type commands:BusinessPanelCommand}">
        <Button
            Command="{Binding}"
            Content="{Binding}"
            ContentTemplate="{StaticResource CommandContentTemplate}"
            IsEnabled="{Binding IsEnabled}"
            Style="{StaticResource CommandButtonStyle}"
            Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
    </DataTemplate>

    <DataTemplate x:Key="ApplicationCommandReferenceTemplate" DataType="{x:Type commands:ApplicationCommandReference}">
        <Button
            Command="{Binding ApplicationCommand}"
            Content="{Binding ApplicationCommand}"
            ContentTemplate="{StaticResource CommandContentTemplate}"
            IsEnabled="{Binding ApplicationCommand.IsEnabled}"
            Style="{StaticResource CommandButtonStyle}"
            Visibility="{Binding ApplicationCommand.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
    </DataTemplate>

    <DataTemplate x:Key="CheckToggleCommandTemplate" DataType="{x:Type guiExtended:BusinessPanelCheckToggleCommand}">
        <Grid IsEnabled="{Binding IsEnabled}" Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Button
                x:Name="CheckedButton"
                Background="{DynamicResource ToggleButtonCheckedBackground}"
                Command="{Binding CheckedCommand}"
                Content="{Binding}"
                ContentTemplate="{StaticResource CommandContentTemplate}"
                Foreground="{DynamicResource ToggleButtonCheckedForeground}"
                Style="{StaticResource CommandButtonStyle}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:InvokeCommandAction Command="{Binding SwitchCheckCommand}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Button>
            <Button
                x:Name="UncheckedButton"
                Command="{Binding UncheckedCommand}"
                Content="{Binding}"
                ContentTemplate="{StaticResource CommandContentTemplate}"
                Style="{StaticResource CommandButtonStyle}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:InvokeCommandAction Command="{Binding SwitchCheckCommand}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Button>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsChecked}" Value="True">
                <Setter TargetName="UncheckedButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsChecked}" Value="False">
                <Setter TargetName="CheckedButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="ToggleCommandTemplate" DataType="{x:Type commands:BusinessPanelToggleCommand}">
        <Grid IsEnabled="{Binding IsEnabled}" Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Button
                x:Name="CheckedButton"
                Command="{Binding CheckedCommand}"
                Content="{Binding CheckedCommand}"
                ContentTemplate="{StaticResource CommandContentTemplate}"
                Style="{StaticResource CommandButtonStyle}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:InvokeCommandAction Command="{Binding SwitchCheckCommand}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Button>
            <Button
                x:Name="UncheckedButton"
                Command="{Binding UncheckedCommand}"
                Content="{Binding UncheckedCommand}"
                ContentTemplate="{StaticResource CommandContentTemplate}"
                Style="{StaticResource CommandButtonStyle}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Click">
                        <b:InvokeCommandAction Command="{Binding SwitchCheckCommand}" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Button>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsChecked}" Value="True">
                <Setter TargetName="UncheckedButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsChecked}" Value="False">
                <Setter TargetName="CheckedButton" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CommandGroupTemplate" DataType="{x:Type commands:BusinessPanelCommandGroup}">
        <Menu Background="Transparent" Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
            <MenuItem
                Header="{Binding}"
                HeaderTemplate="{StaticResource CommandContentTemplate}"
                IsEnabled="{Binding IsEnabled, Mode=OneWay}"
                ItemContainerStyleSelector="{DynamicResource MenuItemCommandElementStyleSelector}"
                ItemsSource="{Binding Commands}"
                Style="{StaticResource CommandGroupMenuItemStyle}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseRightButtonUp">
                        <b:ChangePropertyAction PropertyName="IsSubmenuOpen" Value="True" />
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </MenuItem>
        </Menu>
    </DataTemplate>

    <DataTemplate x:Key="InvisibleCommand" DataType="{x:Type guiExtended:InvisibleBusinessPanelCommand}">
        <Control Height="0" />
    </DataTemplate>

    <!--#endregion DataTemplates-->

    <dataTemplateSelectors:GenericDataTemplateSelector x:Key="CommandElementTemplateSelector">
        <StaticResource ResourceKey="CommandGroupTemplate" />
        <StaticResource ResourceKey="CheckToggleCommandTemplate" />
        <StaticResource ResourceKey="ToggleCommandTemplate" />
        <StaticResource ResourceKey="ApplicationCommandReferenceTemplate" />
        <StaticResource ResourceKey="InvisibleCommand" />
        <StaticResource ResourceKey="CommandTemplate" />
    </dataTemplateSelectors:GenericDataTemplateSelector>

</ResourceDictionary>
