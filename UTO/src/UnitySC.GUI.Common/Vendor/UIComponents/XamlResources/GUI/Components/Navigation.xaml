<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dataTemplateSelectors="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.DataTemplateSelectors"
    xmlns:local="clr-namespace:Agileo.GUI.Components.Navigations;assembly=Agileo.GUI"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <SolidColorBrush x:Key="TreeViewBackground" Color="Transparent" />
    <SolidColorBrush x:Key="TreeViewBorderBrush" Color="Transparent" />
    <SolidColorBrush x:Key="SubNavigationBackground" Color="{DynamicResource VerticalCanvasBackground}" />
    <SolidColorBrush x:Key="SubNavigationButtonBackground" Color="Transparent" />
    <SolidColorBrush x:Key="SubNavigationForeground" Color="{DynamicResource VerticalCanvasForeground}" />
    <SolidColorBrush x:Key="TreeViewItemForeground" Color="{DynamicResource PanelForeground}" />
    <SolidColorBrush x:Key="TreeViewItemBackground" Color="Transparent" />
    <SolidColorBrush x:Key="SelectedTreeViewItemForeground" Color="{DynamicResource SelectionForeground}" />
    <SolidColorBrush x:Key="SelectedTreeViewItemBackground" Color="{DynamicResource SelectionBackground}" />

    <!--#region Explicit Styles-->

    <!--#region TreeView-->
    <Style x:Key="MenuTreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Width" Value="250" />
        <Setter Property="Background" Value="{DynamicResource SubNavigationBackground}" />
        <Setter Property="Margin">
            <Setter.Value>
                <Thickness Right="{StaticResource PanelMargin}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <controls:Card Background="{TemplateBinding Background}">
                        <controls:Card.CornerRadius>
                            <CornerRadius BottomRight="{StaticResource CardCornerRadiusDouble}" TopRight="{StaticResource CardCornerRadiusDouble}" />
                        </controls:Card.CornerRadius>
                        <ScrollViewer
                            CanContentScroll="False"
                            Focusable="False"
                            Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                            HorizontalScrollBarVisibility="Disabled"
                            VerticalScrollBarVisibility="Auto">
                            <ItemsPresenter HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </controls:Card>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion TreeView-->

    <!--#region TreeViewItem-->

    <!--#region Explicit Templates (Used by styles)-->

    <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type local:MenuItem}">
        <DockPanel>
            <!--  Icon  -->
            <ContentPresenter
                x:Name="Icon"
                Width="20"
                Height="20"
                Margin="0,2,8,2"
                VerticalAlignment="Center"
                Content="{Binding Icon}"
                DockPanel.Dock="Left" />
            <!--  Text  -->
            <TextBlock
                x:Name="Text"
                VerticalAlignment="Center"
                DockPanel.Dock="Left"
                FontSize="{StaticResource FontSizeNormal}"
                Text="{Binding LocalizedName}"
                TextAlignment="Left"
                TextWrapping="Wrap" />
        </DockPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding HasIcon}" Value="False">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style
        x:Key="MenuTreeViewItemStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="MinHeight" Value="{StaticResource HeaderElementHeight}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{DynamicResource SubNavigationButtonBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource SubNavigationForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        x:Name="container"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}">
                        <Rectangle
                            x:Name="background"
                            Grid.RowSpan="2"
                            Fill="{DynamicResource CommandPressedBackground}"
                            Opacity="0" />
                        <DockPanel>
                            <StackPanel
                                x:Name="SalienceContainer"
                                MinWidth="{StaticResource SalienceThickness}"
                                DockPanel.Dock="Right">
                                <!--  This element is dependent of the dataContext, its place should be in a DataTemplate  -->
                                <controls:SalienceViewer
                                    x:Name="Salience"
                                    Height="{TemplateBinding ActualHeight}"
                                    CollapsedWidth="{StaticResource SalienceThickness}"
                                    Count="{Binding Saliences.CurrentSalienceCount}"
                                    Type="{Binding Saliences.CurrentSalienceType}" />
                            </StackPanel>
                            <Path
                                x:Name="ExpandPath"
                                Height="10"
                                Margin="10,0"
                                Data="m 5.9999998,294.18 -4.59,-4.59 L 0,291 5.9999998,297 12,291 10.59,289.59 Z"
                                DockPanel.Dock="Right"
                                Fill="{TemplateBinding Foreground}"
                                Opacity="{StaticResource DisabledOpacity}"
                                RenderTransformOrigin="0.5,0.5"
                                SnapsToDevicePixels="True"
                                Stretch="Uniform">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                DockPanel.Dock="Left"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </DockPanel>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                        GeneratedDuration="2"
                                        From="Unchecked"
                                        To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="{StaticResource RotationAnimationKeyTime}" Value="-180" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetName="Salience" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                <EasingDoubleKeyFrame KeyTime="{StaticResource RotationAnimationKeyTime}" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>-->
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                        GeneratedDuration="2"
                                        From="Checked"
                                        To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="-180" />
                                                <EasingDoubleKeyFrame KeyTime="{StaticResource RotationAnimationKeyTime}" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetName="Salience" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="{StaticResource RotationAnimationKeyTime}" Value="1" />
                                            </DoubleAnimationUsingKeyFrames>-->
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <!--  Instant duration to avoid animation when creating the UI element  -->
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandPath"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                            To="-180"
                                            Duration="0" />
                                        <!--
                                            <DoubleAnimation
                                            Storyboard.TargetName="Salience"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0" /
                                        -->
                                    </Storyboard>
                                </VisualState>
                                <!--  Instant duration to avoid animation when creating the UI element  -->
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandPath"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                            To="0"
                                            Duration="0" />
                                        <!--<DoubleAnimation
                                            Storyboard.TargetName="Salience"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0" />-->
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Salience" Property="Type" Value="None" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Salience" Property="IsMouseOverOrSelected" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="MenuTreeViewItemTemplate" DataType="{x:Type local:Menu}">
        <ToggleButton
            Padding="{Binding Level, Converter={StaticResource LevelToLeftMarginConverter}, ConverterParameter='2'}"
            ClickMode="Press"
            IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"
            Style="{StaticResource MenuTreeViewItemStyle}">
            <ContentControl
                x:Name="ContentControl"
                Content="{Binding}"
                ContentTemplate="{StaticResource MenuItemTemplate}" />
        </ToggleButton>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                <Setter TargetName="ContentControl" Property="FontWeight" Value="Bold" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#region BusinessPanel-->
    <Style
        x:Key="BusinessPanelTreeViewItemStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MinHeight" Value="{StaticResource HeaderElementHeight}" />
        <Setter Property="Background" Value="{DynamicResource SubNavigationButtonBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource SubNavigationForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid
                        x:Name="container"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}">
                        <Rectangle
                            x:Name="background"
                            Grid.RowSpan="2"
                            Fill="{DynamicResource CommandPressedBackground}"
                            Opacity="0" />
                        <ContentControl
                            Margin="{TemplateBinding Padding}"
                            Content="{Binding}"
                            ContentTemplate="{StaticResource MenuItemTemplate}" />
                        <controls:SalienceViewer
                            x:Name="Salience"
                            Height="{TemplateBinding ActualHeight}"
                            HorizontalAlignment="Right"
                            CollapsedWidth="{StaticResource SalienceThickness}"
                            Count="{Binding Saliences.CurrentSalienceCount}"
                            Type="{Binding Saliences.CurrentSalienceType}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="background" Property="Opacity" Value="{StaticResource MouseOverOpacity}" />
                            <Setter TargetName="Salience" Property="IsMouseOverOrSelected" Value="True" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="True" />
                                <Condition Binding="{Binding Path=., Converter={StaticResource IsInstanceOfTypeConverter}, ConverterParameter={x:Type local:BusinessPanel}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource CommandPressedForeground}" />
                            <Setter Property="Background" Value="{DynamicResource CommandPressedBackground}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="True" />
                                <Condition Binding="{Binding Path=., Converter={StaticResource IsInstanceOfTypeConverter}, ConverterParameter={x:Type local:Menu}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="FontWeight" Value="Bold" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                            <Setter TargetName="Salience" Property="IsMouseOverOrSelected" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="container" Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="BusinessPanelTreeViewItemTemplate" DataType="{x:Type local:BusinessPanel}">
        <Button
            Padding="{Binding Level, Converter={StaticResource LevelToLeftMarginConverter}, ConverterParameter='2'}"
            Command="{Binding SelectCommand}"
            CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
            Style="{StaticResource BusinessPanelTreeViewItemStyle}" />
    </DataTemplate>
    <!--#endregion BusinessPanel-->

    <!--#endregion Explicit Templates (Used by styles)-->

    <Style x:Key="MenuItemTreeViewStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{DynamicResource SubNavigationButtonBackground}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource SubNavigationForeground}" />
        <Setter Property="IsExpanded" Value="{Binding IsSelected}" />
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
        <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <DockPanel>
                        <ContentControl
                            x:Name="Control"
                            Content="{Binding}"
                            ContentTemplate="{StaticResource BusinessPanelTreeViewItemTemplate}"
                            DockPanel.Dock="Top" />
                        <ItemsPresenter x:Name="ItemsHost" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=., Converter={StaticResource IsInstanceOfTypeConverter}, ConverterParameter={x:Type local:Menu}}" Value="True">
                            <Setter TargetName="Control" Property="ContentTemplate" Value="{StaticResource MenuTreeViewItemTemplate}" />
                        </DataTrigger>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion TreeViewItem-->

    <!--#endregion Explicit Styles-->

    <!--#region DataTemplate-->

    <DataTemplate x:Key="SubNavigationTemplate" DataType="{x:Type local:Menu}">
        <TreeView
            x:Name="treeview"
            DockPanel.Dock="Left"
            ItemContainerStyle="{StaticResource MenuItemTreeViewStyle}"
            ItemsSource="{Binding Items}"
            Style="{StaticResource MenuTreeViewStyle}">
            <TreeView.Resources>
                <HierarchicalDataTemplate DataType="{x:Type local:Menu}" ItemsSource="{Binding Path=Items}" />
            </TreeView.Resources>
        </TreeView>
    </DataTemplate>

    <dataTemplateSelectors:GenericDataTemplateSelector x:Key="SubNavigationDataTemplateSelector">
        <StaticResource ResourceKey="SubNavigationTemplate" />
        <!--  DataTemplate empty if the element is not a Menu so that nothing is displayed in the sub navigation bar.  -->
        <DataTemplate />
    </dataTemplateSelectors:GenericDataTemplateSelector>

    <!--#endregion DataTemplate-->

</ResourceDictionary>
