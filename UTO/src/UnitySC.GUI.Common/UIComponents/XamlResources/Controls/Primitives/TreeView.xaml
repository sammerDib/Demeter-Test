<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="clr-namespace:UnitySC.GUI.Common.Vendor.UIComponents.Behaviors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <SolidColorBrush x:Key="TreeViewBackground" Color="Transparent" />
    <SolidColorBrush x:Key="TreeViewBorderBrush" Color="Transparent" />

    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource TreeViewBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TreeViewBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border
                        x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0">
                        <ScrollViewer
                            Padding="0"
                            CanContentScroll="False"
                            Focusable="False"
                            Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                            HorizontalScrollBarVisibility="Disabled"
                            VerticalScrollBarVisibility="Auto">
                            <ItemsPresenter HorizontalAlignment="Stretch" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region Expand TreeViewItem ToggleButton-->
    <SolidColorBrush x:Key="ExpandTreeViewItemIconColor" Color="{DynamicResource PanelForeground}" />

    <Style
        x:Key="ExpandTreeViewItemToggleButtonStyle"
        BasedOn="{x:Null}"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="MinHeight" Value="{StaticResource HeaderElementHeight}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{DynamicResource TreeViewItemBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource TreeViewItemForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        x:Name="container"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}">
                        <Rectangle
                            x:Name="background"
                            Grid.RowSpan="2"
                            Fill="{DynamicResource CommandPressedBackground}"
                            Opacity="0" />
                        <DockPanel>
                            <Path
                                x:Name="ExpandPath"
                                Height="10"
                                Margin="10,0"
                                Data="m 5.9999998,294.18 -4.59,-4.59 L 0,291 5.9999998,297 12,291 10.59,289.59 Z"
                                DockPanel.Dock="Right"
                                Fill="{TemplateBinding Foreground}"
                                Opacity="{StaticResource DisabledOpacity}"
                                RenderTransformOrigin="0.5,0.5"
                                SnapsToDevicePixels="True"
                                Stretch="Uniform">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                DockPanel.Dock="Left"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                        GeneratedDuration="2"
                                        From="Unchecked"
                                        To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="-90" />
                                                <EasingDoubleKeyFrame KeyTime="{StaticResource RotationAnimationKeyTime}" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                        GeneratedDuration="2"
                                        From="Checked"
                                        To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="{StaticResource RotationAnimationKeyTime}" Value="-90" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <!--  Instant duration to avoid animation when creating the UI element  -->
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandPath"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <!--  Instant duration to avoid animation when creating the UI element  -->
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ExpandPath"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                            To="-90"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region TreeView item-->

    <SolidColorBrush x:Key="TreeViewItemForeground" Color="{DynamicResource PanelForeground}" />
    <SolidColorBrush x:Key="TreeViewItemBackground" Color="Transparent" />
    <SolidColorBrush x:Key="SelectedTreeViewItemForeground" Color="{DynamicResource SelectionForeground}" />
    <SolidColorBrush x:Key="SelectedTreeViewItemBackground" Color="{DynamicResource SelectionBackground}" />

    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{DynamicResource TreeViewItemBackground}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Foreground" Value="{DynamicResource TreeViewItemForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <DockPanel>
                        <Border
                            x:Name="Header"
                            Background="{TemplateBinding Background}"
                            DockPanel.Dock="Top"
                            SnapsToDevicePixels="true">
                            <DockPanel Margin="{Binding Converter={StaticResource TreeViewItemToLeftMarginConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton
                                    x:Name="Expander"
                                    ClickMode="Press"
                                    DockPanel.Dock="Left"
                                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                    Style="{StaticResource ExpandTreeViewItemToggleButtonStyle}" />

                                <ContentPresenter
                                    x:Name="PART_Header"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="Center"
                                    ContentSource="Header"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <ContentPresenter.Resources>
                                        <Style BasedOn="{StaticResource Body1TextStyle}" TargetType="{x:Type TextBlock}" />
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                            </DockPanel>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(behaviors:TreeViewItemBehaviors.IsReadonly), RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Header" Property="Background" Value="{DynamicResource SelectedTreeViewItemBackground}" />
                            <Setter Property="Foreground" Value="{DynamicResource SelectedTreeViewItemForeground}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion TreeView item-->

</ResourceDictionary>
