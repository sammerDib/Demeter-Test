//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Agileo StateMachine.
//     Version: 7.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Agileo.StateMachine;
using System.Collections.Generic;
using UnitySC.Equipment.Abstractions.Vendor.Devices.Activities;

namespace UnitySC.Equipment.Devices.Controller.Activities.WaferFlow
{
    public partial class WaferFlow
    {
        private Agileo.StateMachine.StateMachine m_WaferFlow = null;

        public WaferFlow()
        {
            CreateStateMachine();
        }

        private void CreateStateMachine()
        {
            m_WaferFlow = new Agileo.StateMachine.StateMachine("WaferFlow");

            State FinalState = new State("FinalState", Agileo.StateMachine.State.PseudostateKind.Final, guid: "9cf57aee-6d22-4b5d-b0e2-c1247fc53a22");
            m_WaferFlow.AddState(FinalState);
            State Activity = new State("Activity", Agileo.StateMachine.State.PseudostateKind.Composite, exit: ActivityExit, guid: "8c70c472-01a8-441c-8033-e8cce846fdfb");
            m_WaferFlow.AddState(Activity);
            State PM = new State("PM", Agileo.StateMachine.State.PseudostateKind.Composite, exit: PmExit, guid: "d51d5d76-1e8a-4420-82ab-2891c0e23bc3");
            Activity.Add(PM);
            State PostTransferAndStartPm = new State("PostTransferAndStartPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PostTransferAndStartPmEntry, guid: "e36906b0-faed-47f9-b70b-7b3b289e7fa7");
            PM.Add(PostTransferAndStartPm);
            State SwapInPm = new State("SwapInPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: SwapInPmEntry, guid: "33ff6e9d-dd2a-4f3a-9e6f-c0ca1e7f8a1d");
            PM.Add(SwapInPm);
            State WaitPmReadyToTransfer = new State("WaitPmReadyToTransfer", Agileo.StateMachine.State.PseudostateKind.Normal, entry: WaitPmReadyToTransferEntry, guid: "e5021d7d-1c9e-4eb9-b337-c659c21888f2");
            PM.Add(WaitPmReadyToTransfer);
            State PrepareTransferOnPm = new State("PrepareTransferOnPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PrepareTransferOnPmEntry, guid: "99e4b448-575b-4a98-a2a4-80ada722b744");
            PM.Add(PrepareTransferOnPm);
            State GoInFrontOfPm = new State("GoInFrontOfPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: GoInFrontOfPmEntry, guid: "d7875034-bb27-4b1c-92e1-c7538417f2db");
            PM.Add(GoInFrontOfPm);
            State PreparePm = new State("PreparePm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PreparePmEntry, guid: "3fb4e3fb-fa25-45e7-943f-1f846a13e476");
            PM.Add(PreparePm);
            State CheckPmState = new State("CheckPmState", Agileo.StateMachine.State.PseudostateKind.Normal, guid: "ead9f2c8-4fbe-4236-9257-1d844a92125f");
            PM.Add(CheckPmState);
            State LP = new State("LP", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "a3f5d319-ef6b-459e-9c29-008592a102a1");
            Activity.Add(LP);
            State PlaceInLp = new State("PlaceInLp", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PlaceInLpEntry, guid: "6f2ef0f4-5db2-435d-8a48-e84ba2013546");
            LP.Add(PlaceInLp);
            State PickInLp = new State("PickInLp", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PickInLpEntry, guid: "d82181f6-62ef-4ff4-a30a-ce74b8c8c650");
            LP.Add(PickInLp);
            State Aligner = new State("Aligner", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "31d8815d-098d-4ebe-a655-16b22ab19543");
            Activity.Add(Aligner);
            State GoInFrontOfAligner = new State("GoInFrontOfAligner", Agileo.StateMachine.State.PseudostateKind.Normal, entry: GoInFrontOfAlignerEntry, guid: "0971f096-909c-4d26-8292-7065d4e87348");
            Aligner.Add(GoInFrontOfAligner);
            State WaitAlignerActivityDone = new State("WaitAlignerActivityDone", Agileo.StateMachine.State.PseudostateKind.Normal, entry: WaitAlignerActivityDoneEntry, guid: "736f0353-f8c4-45f1-b2be-5eb99621e7cf");
            Aligner.Add(WaitAlignerActivityDone);
            State StartAlignerActivity = new State("StartAlignerActivity", Agileo.StateMachine.State.PseudostateKind.Normal, entry: StartAlignerActivityEntry, exit: StartAlignerActivityExit, guid: "a78a5013-874b-415d-a201-354c7fbece5e");
            Aligner.Add(StartAlignerActivity);
            State SwapInAligner = new State("SwapInAligner", Agileo.StateMachine.State.PseudostateKind.Normal, entry: SwapInAlignerEntry, guid: "2f3e5700-9cc9-4bfc-b536-60069dcc6e85");
            Aligner.Add(SwapInAligner);
            State WaitOrders = new State("WaitOrders", Agileo.StateMachine.State.PseudostateKind.Normal, entry: WaitOrdersEntry, exit: WaitOrdersExit, guid: "6cd5533a-3519-4c38-82ad-2e4eee29cdca");
            Activity.Add(WaitOrders);
            State Initial = new State("Initial", Agileo.StateMachine.State.PseudostateKind.Initial, guid: "a0684060-067b-458d-95d5-c9cc7b72ee88");
            m_WaferFlow.AddState(Initial);

            Activity.AddTransition(FinalState, trigger: typeof(ActivityDoneEvent), external: true, guid: "5c8324d4-2cf0-4c8a-a100-4ce08600ca3e");
            PostTransferAndStartPm.AddTransition(WaitOrders, trigger: typeof(PmDone), external: true, guid: "ae864273-1d45-4e8c-9b53-6d9d690818a5");
            SwapInPm.AddTransition(PostTransferAndStartPm, trigger: typeof(RobotDone), external: true, guid: "8bafce84-cd1d-4fa9-86ab-25525bf330df");
            WaitPmReadyToTransfer.AddTransition(PrepareTransferOnPm, trigger: typeof(PmReadyToTransfer), external: true, guid: "1cf04f28-8900-45a3-b354-a35ad96f71d0");
            WaitPmReadyToTransfer.AddTransition(WaitOrders, trigger: typeof(PmInError), external: true, guid: "03506d07-8e09-4208-9756-063bb008b725");
            WaitPmReadyToTransfer.AddTransition(WaitOrders, trigger: typeof(StopRequested), external: true, guid: "5ad28215-0b9f-4c80-a476-5396a7566218");
            PrepareTransferOnPm.AddTransition(WaitPmReadyToTransfer, trigger: typeof(PmNotReadyToTransfer), external: true, guid: "80ee2792-d532-4bb2-a89c-1bfd45af5993");
            PrepareTransferOnPm.AddTransition(SwapInPm, trigger: typeof(PmReadyToTransfer), external: true, guid: "252727eb-e3ce-485b-bba5-7fdb0b3ca74c");
            GoInFrontOfPm.AddTransition(WaitPmReadyToTransfer, trigger: typeof(RobotDone), guard: PmFullAndActive, external: true, guid: "ea2179da-ede8-4194-8522-ba29a3bdbdfd");
            GoInFrontOfPm.AddTransition(PrepareTransferOnPm, trigger: typeof(RobotDone), guard: PmEmptyOrIdle, external: true, guid: "64b04995-1c40-4fe9-8fd6-911e957383d3");
            PreparePm.AddTransition(GoInFrontOfPm, trigger: typeof(PmDone), external: true, guid: "490243e5-be86-4c8e-961a-2aa2fd433b24");
            CheckPmState.AddTransition(PreparePm, guard: PmEmptyOrIdle, external: true, guid: "dfada49c-857f-42f6-bee7-e8705da5fd52");
            CheckPmState.AddTransition(GoInFrontOfPm, guard: PmFullAndActive, external: true, guid: "7d60bb7a-ee0d-44b3-958d-84907386db03");
            PlaceInLp.AddTransition(WaitOrders, trigger: typeof(RobotDone), external: true, guid: "d0b7b464-b17c-4281-9e5d-929318b02995");
            PickInLp.AddTransition(WaitOrders, trigger: typeof(RobotDone), external: true, guid: "ac35bfb6-e3e7-4ee1-8045-844a2d5ffb28");
            GoInFrontOfAligner.AddTransition(WaitAlignerActivityDone, trigger: typeof(RobotDone), external: true, guid: "d507e81a-0a42-4a1c-bbec-e193b9f504d1");
            WaitAlignerActivityDone.AddTransition(SwapInAligner, trigger: typeof(AlignerActivityDone), external: true, guid: "ca6f0ef0-251e-4da5-83b5-c736fe348285");
            StartAlignerActivity.AddTransition(WaitOrders, trigger: typeof(AlignerActivityStarted), external: true, guid: "044b8abc-ce50-4e18-9902-895b0e23a73b");
            SwapInAligner.AddTransition(WaitOrders, trigger: typeof(RobotDone), guard: AlignerEmpty, external: true, guid: "a326a0f8-464f-45aa-8374-11fbdb8a7bf5");
            SwapInAligner.AddTransition(StartAlignerActivity, trigger: typeof(RobotDone), guard: AlignerOccupied, external: true, guid: "30404fdf-21d3-4546-a791-2a4dcdf8d317");
            WaitOrders.AddTransition(GoInFrontOfAligner, trigger: typeof(AlignerSelected), external: true, guid: "f61626eb-efb6-4189-998c-f1a28f652dde");
            WaitOrders.AddTransition(CheckPmState, trigger: typeof(ProcessModuleSelected), external: true, guid: "d9465ad7-5393-42ad-bdf3-d227c257f9f3");
            WaitOrders.AddTransition(WaitOrders, trigger: typeof(Reevaluate), external: true, guid: "a4dff765-d245-4887-a7d7-c8724d89d834");
            WaitOrders.AddTransition(PickInLp, trigger: typeof(PickLoadPortSelected), external: true, guid: "d02a2315-73a7-4158-a2b9-40a0b17baceb");
            WaitOrders.AddTransition(PlaceInLp, trigger: typeof(PlaceLoadPortSelected), external: true, guid: "53e19c2f-8891-4929-b314-a1148e2210bf");
            WaitOrders.AddTransition(WaitOrders, trigger: typeof(StopRequested), external: true, guid: "1aa53fd8-422e-439f-9b67-25b27b7c2ee9");
            Initial.AddTransition(WaitOrders, external: true, guid: "7af6a0b3-4d9d-47be-ada6-f9484e76242e");
        }

        /// <summary>
        /// Start state machine thread
        /// </summary>
        public virtual void Start()
        {
            m_WaferFlow.Start();
        }

        /// <summary>
        /// Stop state machine
        /// </summary>
        /// Clear eventQueue and stop thread
        public virtual void Stop()
        {
            m_WaferFlow.Stop();
        }

        /// <summary>
        /// Stop state machine and dispose objects
        /// </summary>
        public virtual void Dispose()
        {
            m_WaferFlow.Dispose();
        }

        /// <summary>
        /// Post event ans add it to queue
        /// </summary>
        /// <param name="evt"></param>
        public virtual void PostEvent(Event evt)
        {
            m_WaferFlow.PostEvent(evt);
        }

        /// <summary>
        /// Fire an event synchronously to the state machine.
        /// </summary>
        /// <returns>return true when the event is used to fire a transition otherwise return false</returns>
        /// <param name="evt"> event sent to the state machine</param>
        public virtual bool FireEvent(Event evt)
        {
            return m_WaferFlow.FireEvent(evt);
        }

        public event NotifyStateChanged.SateChangeEventHandler OnStateChanged
        {
            add
            {
                m_WaferFlow.OnStateChanged += value;
            }
            remove
            {
                m_WaferFlow.OnStateChanged -= value;
            }
        }

        public event NotifyStateChanged.TransitionChangeEventHandler OnTransitionChanged
        {
            add
            {
                m_WaferFlow.OnTransitionChanged += value;
            }
            remove
            {
                m_WaferFlow.OnTransitionChanged -= value;
            }
        }
    }
}