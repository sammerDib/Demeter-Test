//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Agileo StateMachine.
//     Version: 7.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Agileo.StateMachine;
using System.Collections.Generic;
using UnitySC.Equipment.Abstractions.Vendor.Devices.Activities;

namespace UnitySC.Equipment.Devices.Controller.Activities
{
    internal partial class Clear
    {
        private Agileo.StateMachine.StateMachine m_Clear = null;

        public Clear()
        {
            CreateStateMachine();
        }

        private void CreateStateMachine()
        {
            m_Clear = new Agileo.StateMachine.StateMachine("Clear");

            State Activity = new State("Activity", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "e528bfc9-5d71-4ab4-af38-a27acd687e05");
            m_Clear.AddState(Activity);
            State RunClearPm3Activity_G1 = new State("RunClearPm3Activity_G1", Agileo.StateMachine.State.PseudostateKind.Normal, entry: RunClearPm3Activity_G1Entry, guid: "1f74abb9-1c2c-47fc-9b2e-edd3c943affb");
            Activity.Add(RunClearPm3Activity_G1);
            State RunClearPm3Activity_G2 = new State("RunClearPm3Activity_G2", Agileo.StateMachine.State.PseudostateKind.Normal, entry: RunClearPm3Activity_G2Entry, guid: "7ee526e0-aaa5-489e-81d2-e26420141302");
            Activity.Add(RunClearPm3Activity_G2);
            State RunClearPm2Activity_G1 = new State("RunClearPm2Activity_G1", Agileo.StateMachine.State.PseudostateKind.Normal, entry: RunClearPm2Activity_G1Entry, guid: "874256af-72d5-4745-9d12-c35fcc99960c");
            Activity.Add(RunClearPm2Activity_G1);
            State RunClearPm2Activity_G2 = new State("RunClearPm2Activity_G2", Agileo.StateMachine.State.PseudostateKind.Normal, entry: RunClearPm2Activity_G2Entry, guid: "0393a972-2d46-4d9d-b765-ff81f7ecb65a");
            Activity.Add(RunClearPm2Activity_G2);
            State PickOnAligner_G2 = new State("PickOnAligner_G2", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PickOnAligner_G2Entry, guid: "002f624d-e76d-40bc-a80c-af72648423f4");
            Activity.Add(PickOnAligner_G2);
            State RunClearPm1Activity_G1 = new State("RunClearPm1Activity_G1", Agileo.StateMachine.State.PseudostateKind.Normal, entry: RunClearPm1Activity_G1Entry, guid: "f8ad82f4-5328-4a47-95d5-f6e01f60d85f");
            Activity.Add(RunClearPm1Activity_G1);
            State InitialRequest = new State("InitialRequest", Agileo.StateMachine.State.PseudostateKind.Initial, guid: "b9a7e9a4-a940-46d7-84fa-1e2f53958f54");
            Activity.Add(InitialRequest);
            State PlaceToLP_G2 = new State("PlaceToLP_G2", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PlaceToLP_G2Entry, guid: "09a51acb-d825-4f52-9a79-b70dd0311a97");
            Activity.Add(PlaceToLP_G2);
            State GetStatuses = new State("GetStatuses", Agileo.StateMachine.State.PseudostateKind.Normal, entry: GetStatusesEntry, guid: "259f7376-445d-415a-8403-d2fa47bd5a91");
            Activity.Add(GetStatuses);
            State PickOnAligner_G1 = new State("PickOnAligner_G1", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PickOnAligner_G1Entry, guid: "a7fdb3c5-23b1-4c13-afdb-4e936475ce41");
            Activity.Add(PickOnAligner_G1);
            State RunClearPm1Activity_G2 = new State("RunClearPm1Activity_G2", Agileo.StateMachine.State.PseudostateKind.Normal, entry: RunClearPm1Activity_G2Entry, guid: "3366f854-b03b-424b-b78a-26d3edbf7415");
            Activity.Add(RunClearPm1Activity_G2);
            State PlaceToLP_G1 = new State("PlaceToLP_G1", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PlaceToLP_G1Entry, guid: "5e232a1c-61dc-4dce-86ee-0e2d6385335f");
            Activity.Add(PlaceToLP_G1);
            State Initial = new State("Initial", Agileo.StateMachine.State.PseudostateKind.Initial, guid: "ec197159-b2fa-41b5-be5a-b2111edd3597");
            m_Clear.AddState(Initial);
            State FinalState = new State("FinalState", Agileo.StateMachine.State.PseudostateKind.Final, guid: "1aed7e72-c36d-4e48-b332-4e159d6da153");
            m_Clear.AddState(FinalState);

            Activity.AddTransition(FinalState, trigger: typeof(ActivityDoneEvent), effect: ActivityExit, external: true, guid: "fed5747a-7e9e-4710-a39b-1b42686ff221");
            Activity.AddTransition(FinalState, trigger: typeof(StatusReceived), effect: ActivityExit, guard: ToolClean, external: true, guid: "df669e91-b863-498b-bde7-25d272dd457d");
            RunClearPm3Activity_G1.AddTransition(Activity, trigger: typeof(PmDone), external: true, guid: "9a34ff95-dffa-451d-8b97-2e8636f6fe76");
            RunClearPm3Activity_G2.AddTransition(Activity, trigger: typeof(PmDone), external: true, guid: "6acb5a0e-b664-4d4c-8de7-7966f52b5f32");
            RunClearPm2Activity_G1.AddTransition(Activity, trigger: typeof(PmDone), external: true, guid: "b1f4084b-89cd-4e1f-936a-251e39c9d987");
            RunClearPm2Activity_G2.AddTransition(Activity, trigger: typeof(PmDone), external: true, guid: "ab064d48-011e-484d-9fd1-6bf95003c77b");
            PickOnAligner_G2.AddTransition(Activity, trigger: typeof(RobotDone), external: true, guid: "4c9f879f-a24f-405d-a95d-5d5dcbeae0df");
            RunClearPm1Activity_G1.AddTransition(Activity, trigger: typeof(PmDone), external: true, guid: "b6c1e5ea-bf1e-4cc4-b0b2-f789903aead4");
            InitialRequest.AddTransition(GetStatuses, external: true, guid: "068e7408-9dcf-44f4-9f3e-0964d678a854");
            PlaceToLP_G2.AddTransition(PlaceToLP_G1, trigger: typeof(RobotDone), guard: G1Occupied, external: true, guid: "cb350a11-6ef6-4b76-8495-ca3ba7395b85");
            PlaceToLP_G2.AddTransition(Activity, trigger: typeof(RobotDone), guard: G1Empty, external: true, guid: "00a4c35b-c3d9-4931-a26c-f844f34f1f9c");
            GetStatuses.AddTransition(PickOnAligner_G1, trigger: typeof(StatusReceived), guard: AlignerOccupied_G1Empty, external: true, guid: "40cc20b1-ad02-4eaf-89ff-cfa497a4ae0c");
            GetStatuses.AddTransition(RunClearPm1Activity_G2, trigger: typeof(StatusReceived), guard: PM1Occupied_G2Empty, external: true, guid: "c41e3f0d-2d90-4d45-85df-ace2da5cf424");
            GetStatuses.AddTransition(PlaceToLP_G2, trigger: typeof(StatusReceived), guard: IsCleanG2Allowed, external: true, guid: "ca2dd3a4-91f1-4ae5-8a32-81f2a2ad6894");
            GetStatuses.AddTransition(RunClearPm1Activity_G1, trigger: typeof(StatusReceived), guard: PM1Occupied_G2Occupied_G1Empty, external: true, guid: "d6553b86-1389-441a-aa04-3a266e6336da");
            GetStatuses.AddTransition(PickOnAligner_G2, trigger: typeof(StatusReceived), guard: AlignerOccupied_G1Occupied_G2Empty, external: true, guid: "6895bbe8-56fc-4b76-9b28-f49d33ceb3c8");
            GetStatuses.AddTransition(PlaceToLP_G1, trigger: typeof(StatusReceived), guard: G1Occupied_1SubstrateOnTool, external: true, guid: "b970a7d4-3723-45e6-b532-01511829361f");
            GetStatuses.AddTransition(RunClearPm2Activity_G2, trigger: typeof(StatusReceived), guard: PM2Occupied_G2Empty, external: true, guid: "a4383dce-5ba4-4f9a-aa76-8945c3de03a5");
            GetStatuses.AddTransition(RunClearPm2Activity_G1, trigger: typeof(StatusReceived), guard: PM2Occupied_G2Occupied_G1Empty, external: true, guid: "38949246-9368-4b10-ac1d-7e92e2293ec7");
            GetStatuses.AddTransition(RunClearPm3Activity_G2, trigger: typeof(StatusReceived), guard: PM3Occupied_G2Empty, external: true, guid: "08ce8d72-beee-423a-84a7-9a3b34c38d80");
            GetStatuses.AddTransition(RunClearPm3Activity_G1, trigger: typeof(StatusReceived), guard: PM3Occupied_G2Occupied_G1Empty, external: true, guid: "6a9bf1c0-1786-42aa-ac04-c9e9c4e6b914");
            PickOnAligner_G1.AddTransition(Activity, trigger: typeof(RobotDone), external: true, guid: "886383f9-a3d9-4e3c-9b0a-21d9ba393b44");
            RunClearPm1Activity_G2.AddTransition(Activity, trigger: typeof(PmDone), external: true, guid: "87d4a924-dcc5-47ff-aa43-80f7948e87c0");
            PlaceToLP_G1.AddTransition(Activity, trigger: typeof(RobotDone), external: true, guid: "77240a73-4bdd-489a-9d80-1f9cefda543d");
            Initial.AddTransition(Activity, effect: ActivityEntry, external: true, guid: "2c9ae3a3-3963-43e2-b786-b51e37db405d");
        }

        /// <summary>
        /// Start state machine thread
        /// </summary>
        public virtual void Start()
        {
            m_Clear.Start();
        }

        /// <summary>
        /// Stop state machine
        /// </summary>
        /// Clear eventQueue and stop thread
        public virtual void Stop()
        {
            m_Clear.Stop();
        }

        /// <summary>
        /// Stop state machine and dispose objects
        /// </summary>
        public virtual void Dispose()
        {
            m_Clear.Dispose();
        }

        /// <summary>
        /// Post event ans add it to queue
        /// </summary>
        /// <param name="evt"></param>
        public virtual void PostEvent(Event evt)
        {
            m_Clear.PostEvent(evt);
        }

        /// <summary>
        /// Fire an event synchronously to the state machine.
        /// </summary>
        /// <returns>return true when the event is used to fire a transition otherwise return false</returns>
        /// <param name="evt"> event sent to the state machine</param>
        public virtual bool FireEvent(Event evt)
        {
            return m_Clear.FireEvent(evt);
        }

        public event NotifyStateChanged.SateChangeEventHandler OnStateChanged
        {
            add
            {
                m_Clear.OnStateChanged += value;
            }
            remove
            {
                m_Clear.OnStateChanged -= value;
            }
        }

        public event NotifyStateChanged.TransitionChangeEventHandler OnTransitionChanged
        {
            add
            {
                m_Clear.OnTransitionChanged += value;
            }
            remove
            {
                m_Clear.OnTransitionChanged -= value;
            }
        }
    }
}