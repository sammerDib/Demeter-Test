//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Agileo StateMachine.
//     Version: 7.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Agileo.StateMachine;
using System.Collections.Generic;
using UnitySC.Equipment.Abstractions.Vendor.Devices.Activities;

namespace UnitySC.Equipment.Devices.Controller.Activities
{
    public partial class ProcessModuleClearActivity
    {
        private Agileo.StateMachine.StateMachine m_ProcessModuleClearActivity = null;

        public ProcessModuleClearActivity()
        {
            CreateStateMachine();
        }

        private void CreateStateMachine()
        {
            m_ProcessModuleClearActivity = new Agileo.StateMachine.StateMachine("ProcessModuleClearActivity");

            State FinalState = new State("FinalState", Agileo.StateMachine.State.PseudostateKind.Final, guid: "0e5a3137-5b50-435e-8ba9-41a7cf7eec96");
            m_ProcessModuleClearActivity.AddState(FinalState);
            State Initial = new State("Initial", Agileo.StateMachine.State.PseudostateKind.Initial, guid: "a9db9fcb-950a-45ad-adfa-b9a1b532a4b2");
            m_ProcessModuleClearActivity.AddState(Initial);
            State Activity = new State("Activity", Agileo.StateMachine.State.PseudostateKind.Composite, entry: ActivityEntry, exit: ActivityExit, guid: "87c6ff8e-7c4b-44a5-9445-12166d1cf0e9");
            m_ProcessModuleClearActivity.AddState(Activity);
            State PostTransferOnPm = new State("PostTransferOnPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PostTransferOnPmEntry, guid: "9eee37b8-eb5e-453b-851b-fd8f01aec164");
            Activity.Add(PostTransferOnPm);
            State PickOnPm = new State("PickOnPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PickOnPmEntry, guid: "c592afc1-815f-4eb5-b8a3-fd666273cd92");
            Activity.Add(PickOnPm);
            State WaitPmReadyToTransfer = new State("WaitPmReadyToTransfer", Agileo.StateMachine.State.PseudostateKind.Normal, entry: WaitPmReadyToTransferEntry, guid: "5c32324a-df25-4f63-8e21-af71cd3a4ab6");
            Activity.Add(WaitPmReadyToTransfer);
            State PrepareTransferOnPm = new State("PrepareTransferOnPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PrepareTransferOnPmEntry, guid: "33f56452-0266-4e8d-8268-753ec079eee1");
            Activity.Add(PrepareTransferOnPm);
            State GoInFrontOfPm = new State("GoInFrontOfPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: GoInFrontOfPmEntry, guid: "82f167d8-67a2-4057-ab36-f9105db09a22");
            Activity.Add(GoInFrontOfPm);
            State PreparePm = new State("PreparePm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PreparePmEntry, guid: "665a5582-794b-419a-8b3d-ec55be0c698a");
            Activity.Add(PreparePm);

            Initial.AddTransition(PreparePm, external: true, guid: "e7cbd892-c2f6-48b2-af77-9373f78cd10c");
            Activity.AddTransition(FinalState, trigger: typeof(ActivityDoneEvent), external: true, guid: "2e340c7b-2b14-4e48-8705-f65b5a91ac50");
            PostTransferOnPm.AddTransition(FinalState, trigger: typeof(PmDone), external: true, guid: "e17a2e66-5cad-45bc-9086-c3f7180164bc");
            PickOnPm.AddTransition(PostTransferOnPm, trigger: typeof(RobotDone), external: true, guid: "f6bdf0ab-1486-4a50-929a-38cdd71bbdfc");
            WaitPmReadyToTransfer.AddTransition(PrepareTransferOnPm, trigger: typeof(PmReadyToTransfer), external: true, guid: "11ff6c14-82fd-4b14-a095-3b6d63c6f731");
            PrepareTransferOnPm.AddTransition(WaitPmReadyToTransfer, trigger: typeof(PmNotReadyToTransfer), external: true, guid: "e5f97d1c-db0c-4b34-add4-47cd8d12f932");
            PrepareTransferOnPm.AddTransition(PickOnPm, trigger: typeof(PmReadyToTransfer), external: true, guid: "68af4314-cb9d-4516-be6e-863167b6b47d");
            GoInFrontOfPm.AddTransition(PrepareTransferOnPm, trigger: typeof(RobotDone), external: true, guid: "99700187-4caf-4349-ba18-21d27289b93e");
            PreparePm.AddTransition(GoInFrontOfPm, trigger: typeof(PmDone), external: true, guid: "402d235f-f403-457e-afe9-d33e998639a5");
        }

        /// <summary>
        /// Start state machine thread
        /// </summary>
        public virtual void Start()
        {
            m_ProcessModuleClearActivity.Start();
        }

        /// <summary>
        /// Stop state machine
        /// </summary>
        /// Clear eventQueue and stop thread
        public virtual void Stop()
        {
            m_ProcessModuleClearActivity.Stop();
        }

        /// <summary>
        /// Stop state machine and dispose objects
        /// </summary>
        public virtual void Dispose()
        {
            m_ProcessModuleClearActivity.Dispose();
        }

        /// <summary>
        /// Post event ans add it to queue
        /// </summary>
        /// <param name="evt"></param>
        public virtual void PostEvent(Event evt)
        {
            m_ProcessModuleClearActivity.PostEvent(evt);
        }

        /// <summary>
        /// Fire an event synchronously to the state machine.
        /// </summary>
        /// <returns>return true when the event is used to fire a transition otherwise return false</returns>
        /// <param name="evt"> event sent to the state machine</param>
        public virtual bool FireEvent(Event evt)
        {
            return m_ProcessModuleClearActivity.FireEvent(evt);
        }

        public event NotifyStateChanged.SateChangeEventHandler OnStateChanged
        {
            add
            {
                m_ProcessModuleClearActivity.OnStateChanged += value;
            }
            remove
            {
                m_ProcessModuleClearActivity.OnStateChanged -= value;
            }
        }

        public event NotifyStateChanged.TransitionChangeEventHandler OnTransitionChanged
        {
            add
            {
                m_ProcessModuleClearActivity.OnTransitionChanged += value;
            }
            remove
            {
                m_ProcessModuleClearActivity.OnTransitionChanged -= value;
            }
        }
    }
}