//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Agileo StateMachine.
//     Version: 7.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Agileo.StateMachine;
using System.Collections.Generic;
using UnitySC.Equipment.Abstractions.Vendor.Devices.Activities;

namespace UnitySC.Equipment.Devices.Controller.Activities
{
    internal partial class UnloadFromPm
    {
        private Agileo.StateMachine.StateMachine m_UnloadFromPm = null;

        public UnloadFromPm()
        {
            CreateStateMachine();
        }

        private void CreateStateMachine()
        {
            m_UnloadFromPm = new Agileo.StateMachine.StateMachine("UnloadFromPm");

            State Activity = new State("Activity", Agileo.StateMachine.State.PseudostateKind.Composite, entry: ActivityEntry, exit: ActivityExit, guid: "c046f9f5-14cf-4918-9220-1995727a9717");
            m_UnloadFromPm.AddState(Activity);
            State WaitReadyToTransfer = new State("WaitReadyToTransfer", Agileo.StateMachine.State.PseudostateKind.Normal, entry: WaitReadyToTransferEntry, guid: "f8bf1522-e35d-4c6c-8318-01979247eac5");
            Activity.Add(WaitReadyToTransfer);
            State PrepareTransferOnPm = new State("PrepareTransferOnPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PrepareTransferOnPmEntry, guid: "cf407012-6634-4662-a997-4b9d98521c86");
            Activity.Add(PrepareTransferOnPm);
            State GoInFrontOfPm = new State("GoInFrontOfPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: GoInFrontOfPmEntry, guid: "ab9174b1-d2c3-4158-a3b2-20319a563275");
            Activity.Add(GoInFrontOfPm);
            State PostTransfer = new State("PostTransfer", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PostTransferEntry, guid: "8e181b5f-7601-4563-9d89-60f9614dd0e0");
            Activity.Add(PostTransfer);
            State PrepareForTransfer = new State("PrepareForTransfer", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PrepareForTransferEntry, guid: "209d9db0-7415-4111-a1d3-04d13fd5318a");
            Activity.Add(PrepareForTransfer);
            State PlaceToLp = new State("PlaceToLp", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PlaceToLpEntry, guid: "ba815666-b63c-4171-8d31-e9e2159e6a9e");
            Activity.Add(PlaceToLp);
            State PickFromPm = new State("PickFromPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PickFromPmEntry, guid: "4e26246c-cb93-4162-832c-bbc0c4674b71");
            Activity.Add(PickFromPm);
            State FinalState = new State("FinalState", Agileo.StateMachine.State.PseudostateKind.Final, guid: "98d7c869-581c-4b7b-8bc8-b28f825dfd6b");
            m_UnloadFromPm.AddState(FinalState);
            State Initial = new State("Initial", Agileo.StateMachine.State.PseudostateKind.Initial, guid: "381ccc55-252c-479d-88e5-5a9128cce305");
            m_UnloadFromPm.AddState(Initial);

            Activity.AddTransition(FinalState, trigger: typeof(ActivityDoneEvent), external: true, guid: "4ac888bb-0e1e-4c19-bc1a-f7645468f47e");
            WaitReadyToTransfer.AddTransition(PrepareTransferOnPm, trigger: typeof(ReadyToTransfer), external: true, guid: "2cf1547b-8875-430e-8eb4-dc54073facee");
            PrepareTransferOnPm.AddTransition(PickFromPm, trigger: typeof(ReadyToTransfer), external: true, guid: "18f75568-9201-4d47-ae5e-aa31725c4fb1");
            PrepareTransferOnPm.AddTransition(WaitReadyToTransfer, trigger: typeof(NotReadyToTransfer), external: true, guid: "13211b9c-1bf3-4c8c-afed-6b0536e1fdb0");
            GoInFrontOfPm.AddTransition(PrepareTransferOnPm, trigger: typeof(RobotDone), external: true, guid: "c637ad58-ef1f-4ef3-9ed3-0b58e357ae7a");
            PostTransfer.AddTransition(PlaceToLp, trigger: typeof(PMDone), external: true, guid: "9ab8c0ea-ad9e-4b7b-bab6-7067cda0b9bd");
            PrepareForTransfer.AddTransition(GoInFrontOfPm, trigger: typeof(PMDone), external: true, guid: "a2e0f18c-8954-49d6-9647-3581d5229eae");
            PlaceToLp.AddTransition(FinalState, trigger: typeof(RobotDone), external: true, guid: "885e5746-91e5-4863-bae9-69f47df7970f");
            PickFromPm.AddTransition(PostTransfer, trigger: typeof(RobotDone), external: true, guid: "8a4104f1-2094-49d0-ac35-ba2be70603d2");
            Initial.AddTransition(PrepareForTransfer, external: true, guid: "186bcc32-eb7c-4729-a0c0-871c3d6317b4");
        }

        /// <summary>
        /// Start state machine thread
        /// </summary>
        public virtual void Start()
        {
            m_UnloadFromPm.Start();
        }

        /// <summary>
        /// Stop state machine
        /// </summary>
        /// Clear eventQueue and stop thread
        public virtual void Stop()
        {
            m_UnloadFromPm.Stop();
        }

        /// <summary>
        /// Stop state machine and dispose objects
        /// </summary>
        public virtual void Dispose()
        {
            m_UnloadFromPm.Dispose();
        }

        /// <summary>
        /// Post event ans add it to queue
        /// </summary>
        /// <param name="evt"></param>
        public virtual void PostEvent(Event evt)
        {
            m_UnloadFromPm.PostEvent(evt);
        }

        /// <summary>
        /// Fire an event synchronously to the state machine.
        /// </summary>
        /// <returns>return true when the event is used to fire a transition otherwise return false</returns>
        /// <param name="evt"> event sent to the state machine</param>
        public virtual bool FireEvent(Event evt)
        {
            return m_UnloadFromPm.FireEvent(evt);
        }

        public event NotifyStateChanged.SateChangeEventHandler OnStateChanged
        {
            add
            {
                m_UnloadFromPm.OnStateChanged += value;
            }
            remove
            {
                m_UnloadFromPm.OnStateChanged -= value;
            }
        }

        public event NotifyStateChanged.TransitionChangeEventHandler OnTransitionChanged
        {
            add
            {
                m_UnloadFromPm.OnTransitionChanged += value;
            }
            remove
            {
                m_UnloadFromPm.OnTransitionChanged -= value;
            }
        }
    }
}