//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Agileo StateMachine.
//     Version: 7.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Agileo.StateMachine;
using System.Collections.Generic;
using UnitySC.Equipment.Abstractions.Vendor.Devices.Activities;

namespace UnitySC.Equipment.Devices.Controller.Activities
{
    internal partial class Init
    {
        private Agileo.StateMachine.StateMachine m_Init = null;

        public Init()
        {
            CreateStateMachine();
        }

        private void CreateStateMachine()
        {
            m_Init = new Agileo.StateMachine.StateMachine("Init");

            State Initial = new State("Initial", Agileo.StateMachine.State.PseudostateKind.Initial, guid: "dad9bf20-8e9b-4595-8d79-b93bbfc3fa88");
            m_Init.AddState(Initial);
            State FinalState = new State("FinalState", Agileo.StateMachine.State.PseudostateKind.Final, guid: "1527d562-0f1c-4500-9e2a-15216efc96ec");
            m_Init.AddState(FinalState);
            State Activity = new State("Activity", Agileo.StateMachine.State.PseudostateKind.Composite, entry: ActivityEntry, exit: ActivityExit, guid: "75fc64e2-607d-4a45-ac52-73fd17ac9ba6");
            m_Init.AddState(Activity);
            State DIOs = new State("DIOs", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "6f6e5c73-26b1-4571-80c8-4a91c0d60b77");
            Activity.Add(DIOs);
            State InitializeDios = new State("InitializeDios", Agileo.StateMachine.State.PseudostateKind.Normal, entry: InitializeDiosEntry, guid: "f17954fe-e125-4a67-abd7-a62de142c1a9");
            DIOs.Add(InitializeDios);
            State DataFlowManager = new State("DataFlowManager", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "ecfa7195-ed60-4381-a443-fec2d8b0e628");
            Activity.Add(DataFlowManager);
            State StartInitDataFlowManager = new State("StartInitDataFlowManager", Agileo.StateMachine.State.PseudostateKind.Normal, entry: StartInitDataFlowManagerEntry, guid: "4781c14f-b61b-410a-8788-725f0f43c989");
            DataFlowManager.Add(StartInitDataFlowManager);
            State SynchronizeDevices = new State("SynchronizeDevices", Agileo.StateMachine.State.PseudostateKind.Normal, entry: SynchronizeDevicesEntry, guid: "91026d9e-6428-488b-804f-e889e7169967");
            Activity.Add(SynchronizeDevices);
            State FFU = new State("FFU", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "6483ab5a-d0ce-4b2b-921c-2c763e559743");
            Activity.Add(FFU);
            State StartInitFfu = new State("StartInitFfu", Agileo.StateMachine.State.PseudostateKind.Normal, entry: StartInitFfuEntry, guid: "952f9f28-faed-4cd3-8753-f9efcad4493f");
            FFU.Add(StartInitFfu);
            State CheckFfuInit = new State("CheckFfuInit", Agileo.StateMachine.State.PseudostateKind.Normal, guid: "d4503680-0d5f-42fd-b0a5-bbcb20700dd0");
            FFU.Add(CheckFfuInit);
            State SubstrateIdReaders = new State("SubstrateIdReaders", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "ae9e2508-e7da-4c3f-8fa7-b0f2bc9a39bc");
            Activity.Add(SubstrateIdReaders);
            State StartInitSubstrateIdReadersIfNeeded = new State("StartInitSubstrateIdReadersIfNeeded", Agileo.StateMachine.State.PseudostateKind.Normal, entry: StartInitSubstrateIdReadersIfNeededEntry, guid: "8cfe4ac2-8c50-40f8-9df3-d1aaa53f0bc0");
            SubstrateIdReaders.Add(StartInitSubstrateIdReadersIfNeeded);
            State ProcessModules = new State("ProcessModules", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "ff012798-7eac-45a5-a1e5-35fe5f935ea2");
            Activity.Add(ProcessModules);
            State StartInitProcessModulesIfNeeded = new State("StartInitProcessModulesIfNeeded", Agileo.StateMachine.State.PseudostateKind.Normal, entry: StartInitProcessModulesIfNeededEntry, guid: "573e3567-9e26-4f9b-aaf0-4a494fa3a2a8");
            ProcessModules.Add(StartInitProcessModulesIfNeeded);
            State StartInitLoadPortsIfNeeded = new State("StartInitLoadPortsIfNeeded", Agileo.StateMachine.State.PseudostateKind.Normal, entry: StartInitLoadPortsIfNeededEntry, guid: "4e4d4594-9d60-48d0-ac8d-1236523e7ada");
            Activity.Add(StartInitLoadPortsIfNeeded);
            State LoadPorts = new State("LoadPorts", Agileo.StateMachine.State.PseudostateKind.Normal, guid: "99638c24-059b-4cca-b52c-3156a33422c7");
            Activity.Add(LoadPorts);
            State StartInitAligner = new State("StartInitAligner", Agileo.StateMachine.State.PseudostateKind.Normal, entry: StartInitAlignerEntry, guid: "70316a87-9360-45a9-ab66-f4b0c533330e");
            Activity.Add(StartInitAligner);
            State Aligner = new State("Aligner", Agileo.StateMachine.State.PseudostateKind.Normal, guid: "033ece6a-c6c2-43a9-9e48-387134164e80");
            Activity.Add(Aligner);
            State Robot = new State("Robot", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "7cd0e66d-a40c-4d33-802d-841bdfa8e89a");
            Activity.Add(Robot);
            State InitRobot = new State("InitRobot", Agileo.StateMachine.State.PseudostateKind.Normal, entry: InitRobotEntry, guid: "72ab97e8-8287-4466-8f0f-1635b1ac4449");
            Robot.Add(InitRobot);
            State QuickInitRobot = new State("QuickInitRobot", Agileo.StateMachine.State.PseudostateKind.Normal, entry: QuickInitRobotEntry, guid: "96f3baf6-3825-42da-a0a9-a2155522bd6d");
            Robot.Add(QuickInitRobot);
            State CheckRobotInit = new State("CheckRobotInit", Agileo.StateMachine.State.PseudostateKind.Normal, guid: "d10ec4cf-47c8-4d7d-9ad5-357c7799f790");
            Robot.Add(CheckRobotInit);
            State LightTower = new State("LightTower", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "f3e5f5f9-0669-4c47-9f2f-8002e959668d");
            Activity.Add(LightTower);
            State InitLightTower = new State("InitLightTower", Agileo.StateMachine.State.PseudostateKind.Normal, entry: InitLightTowerEntry, guid: "bcf99214-7085-4b68-b887-4ec5ffc676c6");
            LightTower.Add(InitLightTower);
            State CheckLightTowerInitRequired = new State("CheckLightTowerInitRequired", Agileo.StateMachine.State.PseudostateKind.Normal, guid: "82325bef-7802-40b6-952a-798938459a58");
            LightTower.Add(CheckLightTowerInitRequired);
            State Connect = new State("Connect", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "37d3da39-6c1a-4425-aeb7-f4afc7454b34");
            Activity.Add(Connect);
            State WaitAllDevicesConnected = new State("WaitAllDevicesConnected", Agileo.StateMachine.State.PseudostateKind.Normal, entry: CheckAllDevicesConnectedEntry, guid: "821085a3-04b6-4503-a3e5-bc0d493afc5d");
            Connect.Add(WaitAllDevicesConnected);
            State ConnectAll = new State("ConnectAll", Agileo.StateMachine.State.PseudostateKind.Normal, entry: ConnectAllEntry, guid: "6f444f33-4a97-4a31-bbe8-c992d6f00396");
            Connect.Add(ConnectAll);

            Initial.AddTransition(ConnectAll, external: true, guid: "1f706df9-755a-4e90-8cf5-0b2ca758a2c1");
            Activity.AddTransition(FinalState, trigger: typeof(ActivityDoneEvent), external: true, guid: "fd6b4742-5932-4beb-beb2-176f843688c2");
            InitializeDios.AddTransition(CheckLightTowerInitRequired, trigger: typeof(DiosInitialized), external: true, guid: "d103045f-671d-4610-b861-4ee9a1428aef");
            StartInitDataFlowManager.AddTransition(StartInitProcessModulesIfNeeded, trigger: typeof(DataFlowManagerStarted), external: true, guid: "12b5eef6-fd20-45a7-98d3-3d87c3feae59");
            SynchronizeDevices.AddTransition(FinalState, trigger: typeof(AllDevicesInitialized), external: true, guid: "8fc73df4-de13-4ae8-a793-47a34178a173");
            StartInitFfu.AddTransition(SynchronizeDevices, trigger: typeof(FfuInitStarted), external: true, guid: "08e11ea4-fa92-4707-b58f-58ca62527dae");
            CheckFfuInit.AddTransition(StartInitFfu, guard: FfuInitRequired, external: true, guid: "a63e170b-ab87-4601-aae2-01399444fc6c");
            CheckFfuInit.AddTransition(SynchronizeDevices, guard: FfuInitNotRequired, external: true, guid: "53910c84-2561-47f9-994c-dacec177954d");
            StartInitSubstrateIdReadersIfNeeded.AddTransition(CheckFfuInit, trigger: typeof(AllSubstrateIdReaders), external: true, guid: "4c4a3a23-e3cf-49c1-984f-e801221f35a6");
            StartInitProcessModulesIfNeeded.AddTransition(StartInitSubstrateIdReadersIfNeeded, trigger: typeof(AllProcessModulesStarted), external: true, guid: "a8d87915-555d-4b2b-8b87-fd94f79e1edf");
            StartInitLoadPortsIfNeeded.AddTransition(StartInitDataFlowManager, trigger: typeof(AllLoadPortsStarted), external: true, guid: "16df742e-f03c-4202-8895-fb516a788e45");
            StartInitAligner.AddTransition(StartInitLoadPortsIfNeeded, trigger: typeof(AlignerStarted), external: true, guid: "d8313fe7-ea11-4836-9abc-e67e486f61d4");
            InitRobot.AddTransition(StartInitAligner, trigger: typeof(RobotDone), external: true, guid: "3ee710d4-4d6a-4058-b0ec-ad66d1100d5f");
            QuickInitRobot.AddTransition(InitRobot, trigger: typeof(RobotFailed), external: true, guid: "c3de21aa-4773-4654-a43a-a72146b805e5");
            QuickInitRobot.AddTransition(StartInitAligner, trigger: typeof(RobotDone), external: true, guid: "a39986c6-73e1-4c93-87f7-48dd08ee37fe");
            CheckRobotInit.AddTransition(QuickInitRobot, guard: RobotQuickInitRequired, external: true, guid: "98332be0-bf4c-4ac4-9820-53c21fceff5b");
            CheckRobotInit.AddTransition(InitRobot, guard: RobotCompleteInitRequired, external: true, guid: "1e26576f-ebd8-43bc-a200-dec827322c9a");
            InitLightTower.AddTransition(CheckRobotInit, trigger: typeof(LightTowerDone), external: true, guid: "2410fdb3-671c-4b44-8019-deeaa6c1dbfb");
            CheckLightTowerInitRequired.AddTransition(InitLightTower, guard: LightTowerInitRequired, external: true, guid: "776b4d68-14dd-495c-9ad3-58bc351ad8ec");
            CheckLightTowerInitRequired.AddTransition(CheckRobotInit, guard: LightTowerInitNotRequired, external: true, guid: "cf7e6758-ac32-4ec0-bf18-ee3874d9212a");
            WaitAllDevicesConnected.AddTransition(WaitAllDevicesConnected, trigger: typeof(AnyConnectionStateChanged), external: true, guid: "d43ef744-4253-44aa-9514-0f91ed335feb");
            WaitAllDevicesConnected.AddTransition(InitializeDios, trigger: typeof(AllDevicesConnected), external: true, guid: "cc832810-95bc-4b2a-a317-8487f043c840");
            ConnectAll.AddTransition(WaitAllDevicesConnected, trigger: typeof(ConnectAllStarted), external: true, guid: "968fc312-afc9-4236-90c7-00b34fbfbf69");
        }

        /// <summary>
        /// Start state machine thread
        /// </summary>
        public virtual void Start()
        {
            m_Init.Start();
        }

        /// <summary>
        /// Stop state machine
        /// </summary>
        /// Clear eventQueue and stop thread
        public virtual void Stop()
        {
            m_Init.Stop();
        }

        /// <summary>
        /// Stop state machine and dispose objects
        /// </summary>
        public virtual void Dispose()
        {
            m_Init.Dispose();
        }

        /// <summary>
        /// Post event ans add it to queue
        /// </summary>
        /// <param name="evt"></param>
        public virtual void PostEvent(Event evt)
        {
            m_Init.PostEvent(evt);
        }

        /// <summary>
        /// Fire an event synchronously to the state machine.
        /// </summary>
        /// <returns>return true when the event is used to fire a transition otherwise return false</returns>
        /// <param name="evt"> event sent to the state machine</param>
        public virtual bool FireEvent(Event evt)
        {
            return m_Init.FireEvent(evt);
        }

        public event NotifyStateChanged.SateChangeEventHandler OnStateChanged
        {
            add
            {
                m_Init.OnStateChanged += value;
            }
            remove
            {
                m_Init.OnStateChanged -= value;
            }
        }

        public event NotifyStateChanged.TransitionChangeEventHandler OnTransitionChanged
        {
            add
            {
                m_Init.OnTransitionChanged += value;
            }
            remove
            {
                m_Init.OnTransitionChanged -= value;
            }
        }
    }
}