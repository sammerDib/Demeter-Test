//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a Agileo StateMachine.
//     Version: 7.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Agileo.StateMachine;
using System.Collections.Generic;
using UnitySC.Equipment.Abstractions.Vendor.Devices.Activities;

namespace UnitySC.Equipment.Devices.Controller.Activities
{
    internal partial class LoadToPm
    {
        private Agileo.StateMachine.StateMachine m_LoadToPm = null;

        public LoadToPm()
        {
            CreateStateMachine();
        }

        private void CreateStateMachine()
        {
            m_LoadToPm = new Agileo.StateMachine.StateMachine("LoadToPm");

            State Activity = new State("Activity", Agileo.StateMachine.State.PseudostateKind.Composite, entry: ActivityEntry, exit: ActivityExit, guid: "dc21e096-21d3-4708-b443-390b3c639948");
            m_LoadToPm.AddState(Activity);
            State PrepareAlignerPick = new State("PrepareAlignerPick", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PrepareAlignerPickEntry, guid: "d10e7431-0d40-4817-85b0-d451aa0277f8");
            Activity.Add(PrepareAlignerPick);
            State PlaceToAligner = new State("PlaceToAligner", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PlaceToAlignerEntry, guid: "136a9916-00cc-4c4f-99fd-f57740b73796");
            Activity.Add(PlaceToAligner);
            State PrepareAlignerPlace = new State("PrepareAlignerPlace", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PrepareAlignerPlaceEntry, guid: "2d3458f8-8696-4c3e-bf48-27959265e50c");
            Activity.Add(PrepareAlignerPlace);
            State PickFromLoadPort = new State("PickFromLoadPort", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PickFromLoadPortEntry, guid: "abbfb069-711d-4671-be3f-411be1262724");
            Activity.Add(PickFromLoadPort);
            State TransferToPm = new State("TransferToPm", Agileo.StateMachine.State.PseudostateKind.Composite, guid: "7b4b6c5c-d7cd-4a81-aab6-b87f711ccc0e");
            Activity.Add(TransferToPm);
            State WaitReadyToTransfer = new State("WaitReadyToTransfer", Agileo.StateMachine.State.PseudostateKind.Normal, entry: WaitReadyToTransferEntry, guid: "d8cfeeb6-7ed9-4ac9-9b81-59dd4fe25059");
            TransferToPm.Add(WaitReadyToTransfer);
            State PostTransfer = new State("PostTransfer", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PostTransferEntry, guid: "d93acd45-da42-42bd-bead-3ac618e28250");
            TransferToPm.Add(PostTransfer);
            State PrepareTransferOnPm = new State("PrepareTransferOnPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PrepareTransferOnPmEntry, guid: "759cf494-e1dc-48ce-8a05-6e8b38e02d5b");
            TransferToPm.Add(PrepareTransferOnPm);
            State PrepareForTransfer = new State("PrepareForTransfer", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PrepareForTransferEntry, guid: "cdb1d99e-5e0d-419d-80f2-d5725ff89536");
            TransferToPm.Add(PrepareForTransfer);
            State PlaceToPm = new State("PlaceToPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PlaceToPmEntry, guid: "1ec2a693-7a2c-4273-aa9e-2fbce245a3ba");
            TransferToPm.Add(PlaceToPm);
            State GoInFrontOfPm = new State("GoInFrontOfPm", Agileo.StateMachine.State.PseudostateKind.Normal, entry: GoInFrontOfPmEntry, guid: "64f574ac-75f9-4395-ac4e-7c5fe6dcfe1b");
            TransferToPm.Add(GoInFrontOfPm);
            State PickFromAligner = new State("PickFromAligner", Agileo.StateMachine.State.PseudostateKind.Normal, entry: PickFromAlignerEntry, guid: "c8238b1e-9080-4e7a-a0bb-f3c72afb0854");
            TransferToPm.Add(PickFromAligner);
            State Align = new State("Align", Agileo.StateMachine.State.PseudostateKind.Normal, entry: AlignEntry, guid: "8b082c1c-e023-4468-8e8a-28e640a14ada");
            Activity.Add(Align);
            State FinalState = new State("FinalState", Agileo.StateMachine.State.PseudostateKind.Final, guid: "d4878a6b-ebb2-4630-986a-ec7a5a501f9d");
            m_LoadToPm.AddState(FinalState);
            State Initial = new State("Initial", Agileo.StateMachine.State.PseudostateKind.Initial, guid: "654a33e0-8cb1-4ce3-be2a-96bd0569410b");
            m_LoadToPm.AddState(Initial);

            Activity.AddTransition(FinalState, trigger: typeof(ActivityDoneEvent), external: true, guid: "1bc5d0ca-c672-4500-9b8b-39f4d1d1f964");
            PrepareAlignerPick.AddTransition(PickFromAligner, trigger: typeof(AlignerDone), external: true, guid: "84b62dab-b022-4829-a93f-3a2e63429ffe");
            PlaceToAligner.AddTransition(Align, trigger: typeof(RobotDone), external: true, guid: "eb95de4a-7a94-49cc-b5f2-7c4bace23541");
            PrepareAlignerPlace.AddTransition(PlaceToAligner, trigger: typeof(AlignerDone), external: true, guid: "f697edb5-c3a3-474f-8253-cb56882cc7ad");
            PickFromLoadPort.AddTransition(PrepareAlignerPlace, trigger: typeof(RobotDone), external: true, guid: "f1ee7547-b387-497c-869b-0bd0bace7d58");
            WaitReadyToTransfer.AddTransition(PrepareTransferOnPm, trigger: typeof(ReadyToTransfer), external: true, guid: "ef930dbd-3ba9-4b71-9bf4-be82a06d5eee");
            PostTransfer.AddTransition(FinalState, trigger: typeof(PMDone), external: true, guid: "467be932-4882-4b68-ab3b-94b5d121cc4b");
            PrepareTransferOnPm.AddTransition(PlaceToPm, trigger: typeof(ReadyToTransfer), external: true, guid: "f48dd863-bc64-4fae-9c3e-850cad2c02fb");
            PrepareTransferOnPm.AddTransition(WaitReadyToTransfer, trigger: typeof(NotReadyToTransfer), external: true, guid: "96d958c2-8805-4df4-97b4-0d18ec4b828c");
            PrepareForTransfer.AddTransition(GoInFrontOfPm, trigger: typeof(PMDone), external: true, guid: "a5656cc4-89ce-41db-9ee5-10d2419328cd");
            PlaceToPm.AddTransition(PostTransfer, trigger: typeof(RobotDone), external: true, guid: "676da3ec-feab-4809-936f-b35f8a793f89");
            GoInFrontOfPm.AddTransition(PrepareTransferOnPm, trigger: typeof(RobotDone), external: true, guid: "16c6c18f-faa9-4487-915a-4227273ac404");
            PickFromAligner.AddTransition(PrepareForTransfer, trigger: typeof(RobotDone), external: true, guid: "0ab341e6-0f43-4c3f-b674-dd9a0ae871c4");
            Align.AddTransition(PrepareAlignerPick, trigger: typeof(AlignerDone), external: true, guid: "663518db-adf1-4088-9ee0-84ab86185cf2");
            Initial.AddTransition(PickFromLoadPort, external: true, guid: "3dddd1ef-77c9-4d3e-b4c0-6ebe3102811a");
        }

        /// <summary>
        /// Start state machine thread
        /// </summary>
        public virtual void Start()
        {
            m_LoadToPm.Start();
        }

        /// <summary>
        /// Stop state machine
        /// </summary>
        /// Clear eventQueue and stop thread
        public virtual void Stop()
        {
            m_LoadToPm.Stop();
        }

        /// <summary>
        /// Stop state machine and dispose objects
        /// </summary>
        public virtual void Dispose()
        {
            m_LoadToPm.Dispose();
        }

        /// <summary>
        /// Post event ans add it to queue
        /// </summary>
        /// <param name="evt"></param>
        public virtual void PostEvent(Event evt)
        {
            m_LoadToPm.PostEvent(evt);
        }

        /// <summary>
        /// Fire an event synchronously to the state machine.
        /// </summary>
        /// <returns>return true when the event is used to fire a transition otherwise return false</returns>
        /// <param name="evt"> event sent to the state machine</param>
        public virtual bool FireEvent(Event evt)
        {
            return m_LoadToPm.FireEvent(evt);
        }

        public event NotifyStateChanged.SateChangeEventHandler OnStateChanged
        {
            add
            {
                m_LoadToPm.OnStateChanged += value;
            }
            remove
            {
                m_LoadToPm.OnStateChanged -= value;
            }
        }

        public event NotifyStateChanged.TransitionChangeEventHandler OnTransitionChanged
        {
            add
            {
                m_LoadToPm.OnTransitionChanged += value;
            }
            remove
            {
                m_LoadToPm.OnTransitionChanged -= value;
            }
        }
    }
}