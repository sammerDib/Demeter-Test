<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="C13336MppcWide" Id="{111a7122-6556-4c1a-aa0f-df797297d098}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK C13336MppcWide EXTENDS C13336Mppc
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	{attribute 'OPC.UA.DA' := '0'}
	_config : C13336MppcConfig;
	
	{attribute 'OPC.UA.DA' := '0'}
	_initDevice : BOOL;
	
	{attribute 'OPC.UA.DA.Access' := '0'}
    InputMppcWideStateSignal_1	AT %I* : BOOL;
	
	{attribute 'OPC.UA.DA.Access' := '0'}
    InputMppcWideStateSignal_2	AT %I* : BOOL;
	
	{attribute 'OPC.UA.DA' := '0'}
	_itemInit : INT;
	{attribute 'OPC.UA.DA' := '0'}
	_pulseGeneratorInit : TON;
	
	{attribute 'OPC.UA.DA' := '0'}
	_coeAccess : CoeAccess;
	{attribute 'OPC.UA.DA' := '0'}
	_initConfigSerialCom : BOOL;
	{attribute 'OPC.UA.DA' := '0'}
	_serialCom  : SerialCom(Prefix := Const.START_OF_TEXT, Suffix := Const.CARRIAGE_RETURN);
	{attribute 'OPC.UA.DA' := '0'}
	_refSerialCom : REFERENCE TO SerialCom(Prefix := Const.START_OF_TEXT, Suffix := Const.CARRIAGE_RETURN) := _serialCom;
		
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT _raiseProperties THEN
	GetStateSignals();
END_IF

// Init device
SUPER^.InitDevice();

IF InitConfigSerialCom AND MppcActivate THEN
	THIS^.Status := TExecutionState.Ready;
ELSE
    THIS^.Status := TExecutionState.Error;	
END_IF

IF THIS^.Status = TExecutionState.Ready THEN
	SUPER^(Conf := _config, SerialCom := _serialCom, RefSerialCom := _refSerialCom);
END_IF

IF SUPER^._initDeviceBase THEN	
	IF NOT InitConfigSerialCom THEN
		ConfigureSerialCom();
	ELSIF THIS^.Status = TExecutionState.Ready THEN						
		_refSerialCom(TxBuffer:= HardwareGlobalVariables.TxBufferMppcWide, 
					  RxBuffer:= HardwareGlobalVariables.RxBufferMppcWide);		

		// Start Mppc to off 
		IF NOT _initDevice THEN
			InitDevice();
		END_IF					
	END_IF
END_IF]]></ST>
    </Implementation>
    <Folder Name="Commands" Id="{bfc2ec1d-0b1f-426e-b808-03262d74be35}" />
    <Method Name="ConfigureSerialCom" Id="{9adc588c-5e96-4382-8bbc-cd26a3f7e2a9}">
      <Declaration><![CDATA[METHOD ConfigureSerialCom
VAR_INPUT
END_VAR

VAR
	Status: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _coeAccess.CoeOperation.Ready THEN
	_logger.Information(_message.Reset().Append('Start configuration com serial').ToString());
END_IF;	

_coeAccess.CoeOperation.Start();
_coeAccess(SerialCommunication := _config.SerialCommunication);
	
IF _coeAccess.CoeOperation.Done THEN
	_coeAccess.SetDone();
	
	_Logger.Information(_message.Reset().
							Append('{').Append(TO_STRING(THIS^.Family)).Append('} : ').
							Append(' - Status : ').Append(TO_STRING(_coeAccess.Status)).ToString());
	InitConfigSerialCom := TRUE;
END_IF
 
IF _coeAccess.CoeOperation.Error THEN	
	_coeAccess.SetError(0);
	
	_Logger.Error(_message.Reset().
							Append('{').Append(TO_STRING(THIS^.Family)).Append('} : ').
							Append(' - Status : ').Append(TO_STRING(_coeAccess.Status)).ToString());
	InitConfigSerialCom := TRUE;
END_IF

THIS^.Status := _coeAccess.Status;
State := _coeAccess.Status;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f74c4f58-0372-44ca-868c-74afb8e454fc}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Config : C13336MppcConfig;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Config.IsEnabled THEN
	_config := Config;
	
	SUPER^._mppcConfig.Name := Config.Name;
	SUPER^._mppcConfig.DeviceID := Config.DeviceID;
	SUPER^._mppcConfig.IsEnabled := Config.IsEnabled;
	SUPER^._mppcConfig.LogLevel := Config.LogLevel;
	
	SUPER^.Name := Config.Name;
	SUPER^.DeviceID := Config.DeviceID;	
	THIS^.Family := DeviceFamily.MPPC;
		
	_Logger.Information(_message.Reset().Append('Init ').
							Append('{').Append(TO_STRING(THIS^.Family)).Append('} - ').
							Append('{').Append(TO_STRING(Config.Name)).Append('}').ToString());																													
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetStateSignals" Id="{21bd8d63-62e7-47dc-bc22-a35c5e68d48a}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD GetStateSignals
VAR_INPUT
END_VAR
VAR
	{attribute 'OPC.UA.DA' := '0'}
	fibersCollector : STRING;
	{attribute 'OPC.UA.DA' := '0'}
	delimeter : STRING := ';';
	{attribute 'OPC.UA.DA' := '0'}
	stateSignal : STRING;	
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fibersCollector := CONCAT(TO_STRING(EMppcCollector.WIDE), delimeter);

IF NOT InputMppcWideStateSignal_1 AND NOT InputMppcWideStateSignal_2 THEN
	stateSignal := CONCAT(fibersCollector, TO_STRING(EMppcStateModule.UNRECOVERABLE_ERROR));
ELSIF NOT InputMppcWideStateSignal_1 AND InputMppcWideStateSignal_2 THEN
	stateSignal := CONCAT(fibersCollector, TO_STRING(EMppcStateModule.AWAITING_COOLING_TEMP_STABLE));
ELSIF InputMppcWideStateSignal_1 AND NOT InputMppcWideStateSignal_2 THEN
	stateSignal := CONCAT(fibersCollector, TO_STRING(EMppcStateModule.AWAITING_HIGH_VOLTAGE_POWER_SUPPLY_STABLE));
ELSE
	stateSignal := CONCAT(fibersCollector, TO_STRING(EMppcStateModule.MODULE_OPERATING_NORMAL));
END_IF

IF stateSignal <> SUPER^.StateSignalsMsg THEN	
	SUPER^.StateSignalsMsg := stateSignal;
	SUPER^.GetStateSignals();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="InitConfigSerialCom" Id="{dda66ed7-bbc2-4c9f-bede-22f6907d2a8e}">
      <Declaration><![CDATA[PROPERTY InitConfigSerialCom : BOOL]]></Declaration>
      <Get Name="Get" Id="{238b098a-aec8-4a3b-9a2f-ae612b6a1128}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InitConfigSerialCom := _initConfigSerialCom;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{47cf8940-4731-447b-9ac1-1d9391219386}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_initConfigSerialCom := InitConfigSerialCom;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="InitDevice" Id="{c76989ba-65de-433a-9d4a-4875c40437d7}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD InitDevice
VAR_INPUT
END_VAR
VAR	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _initDevice THEN			
	IF _pulseGeneratorInit.Q THEN
		_pulseGeneratorInit(IN := FALSE, PT := T#10MS);
			
		CASE _itemInit OF
			0:  _logger.Information(_message.Reset().
								Append(_config.Name).
								Append(' - Start to on').ToString());		
				_itemInit := 1;
				
			1:  _outputVoltageOn := TRUE;			
				_initDevice := TRUE;
				_itemInit := 0;
		END_CASE
	ELSE
		_pulseGeneratorInit(IN := TRUE, PT := T#500MS);	
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="C13336MppcWide">
      <LineId Id="351" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="276" Count="4" />
      <LineId Id="275" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="187" Count="1" />
      <LineId Id="176" Count="1" />
      <LineId Id="48" Count="2" />
      <LineId Id="163" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="181" Count="0" />
    </LineIds>
    <LineIds Name="C13336MppcWide.ConfigureSerialCom">
      <LineId Id="6" Count="10" />
      <LineId Id="34" Count="0" />
      <LineId Id="19" Count="7" />
      <LineId Id="36" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="56" Count="0" />
    </LineIds>
    <LineIds Name="C13336MppcWide.FB_init">
      <LineId Id="9" Count="6" />
      <LineId Id="17" Count="7" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="C13336MppcWide.GetStateSignals">
      <LineId Id="11" Count="10" />
      <LineId Id="5" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="37" Count="0" />
    </LineIds>
    <LineIds Name="C13336MppcWide.InitConfigSerialCom.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="C13336MppcWide.InitConfigSerialCom.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="C13336MppcWide.InitDevice">
      <LineId Id="60" Count="0" />
      <LineId Id="33" Count="3" />
      <LineId Id="98" Count="4" />
      <LineId Id="118" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="111" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>