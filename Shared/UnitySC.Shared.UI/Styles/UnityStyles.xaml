<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:controls="clr-namespace:UnitySC.Shared.UI.Controls"
                    xmlns:Themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ImageDictionary.xaml" />
        <ResourceDictionary Source="pack://application:,,,/UnitySC.Shared.UI;component/Converters/BasicConverter.xaml" />
        <ResourceDictionary Source="ZoomboxImageResources.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <Color x:Key="SelectedItem">#3299FF</Color>
    <SolidColorBrush x:Key="WindowBackground" Color="White" />
    <SolidColorBrush x:Key="MenuBackground" Color="#44587C" />
    <SolidColorBrush x:Key="PanelBorderColor">#FFDDDDDD</SolidColorBrush>
    <SolidColorBrush x:Key="PanelTitleBackground">#FFececed</SolidColorBrush>
    <SolidColorBrush x:Key="PanelBackground">White</SolidColorBrush>
    <SolidColorBrush x:Key="SplitterColor">LightGray</SolidColorBrush>

    <Color x:Key="LightGreyColor">#F1F1F1</Color>
    <Color x:Key="ExtremelyDarkGreyColor">#2A2A2A</Color>
    <Color x:Key="LittleLightGreyColor">#DEDEDE</Color>

    <SolidColorBrush x:Key="HeaderLeftBackgroundBrush" Color="{StaticResource LightGreyColor}" />
    <SolidColorBrush x:Key="HeaderLeftForegroundBrush" Color="{StaticResource ExtremelyDarkGreyColor}" />
    <SolidColorBrush x:Key="HeaderLeftBorderBrush" Color="{StaticResource LittleLightGreyColor}" />


    <SolidColorBrush x:Key="MainHeaderBackground">#FFE1E1E4</SolidColorBrush>
    <VisualBrush x:Key="MainMenuBackgound" TileMode="Tile" Viewbox="0,0,5,5" Viewport="0,0,5,5" ViewportUnits="Absolute" ViewboxUnits="Absolute">
        <VisualBrush.Visual>
            <Grid Background="#505D5C5C">
                <Path Data="M0,5L5,0" Stroke="#305D5C5C" />
                <Path Data="M0,0L5,5" Stroke="#305D5C5C" />
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <Style TargetType="TextBlock">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Arial" />
    </Style>

    <!--<Style TargetType="TextBox">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Arial" />
    </Style>-->

    <Style TargetType="controls:AlphaNumericTextBox">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Arial" />
    </Style>

    <Style TargetType="Label">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Arial" />
    </Style>

    <Style TargetType="TextBlock" x:Key="MainMenuTitle1">
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style TargetType="TextBlock" x:Key="MainMenuTitle2">
        <Setter Property="Margin" Value="0,0,0,5" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style TargetType="TextBlock" x:Key="MainMenuDescription">
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
    </Style>

    <Style x:Key="GraphGridStyle" TargetType="Grid">
        <Setter Property="Background" Value="{StaticResource MenuBackground}" />
        <Setter Property="Margin" Value="0" />
        <Style.Resources>
            <Style BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Margin" Value="10,5,10,5" />
                <Setter Property="Control.FontWeight" Value="Bold" />
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="1" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style BasedOn="{StaticResource {x:Static ToolBar.ComboBoxStyleKey}}" TargetType="ComboBox">
                <Setter Property="Background" Value="{StaticResource MenuBackground}" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Margin" Value="10,5,10,5" />
            </Style>
            <Style BasedOn="{StaticResource {x:Static ToolBar.MenuStyleKey}}" TargetType="Menu">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Margin" Value="10,5,10,5" />
            </Style>
        </Style.Resources>
    </Style>
    <Style x:Key="GraphMenuItemStyle" TargetType="MenuItem">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Margin" Value="0,0,15,0" />
        <Setter Property="Padding" Value="0,2,0,3" />
        <Style.Resources>
            <Style TargetType="Viewbox">
                <Setter Property="Height" Value="20" />
                <Setter Property="Stretch" Value="Uniform" />
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.4" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{StaticResource SplitterColor}" />
    </Style>

    <Style TargetType="{x:Type Window}" x:Key="MainWindow">
        <Setter Property="Background" Value="{StaticResource WindowBackground}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="BorderBrush" Value="{StaticResource WindowBackground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="WindowState" Value="Maximized" />
    </Style>

    <Style TargetType="Border" x:Key="BorderPanel">
        <Setter Property="Margin" Value="2" />
        <Setter Property="Background" Value="{StaticResource PanelBackground}" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="BorderBrush" Value="{StaticResource PanelBorderColor}" />
        <Setter Property="BorderThickness" Value="2" />
    </Style>
    <Style TargetType="TreeView">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                          Color="WhiteSmoke" />
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
                          Color="Black" />
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                          Color="WhiteSmoke" />
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}"
                          Color="Black" />
        </Style.Resources>
    </Style>

    <Style x:Key="ToggleAnimatedSwitch" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="#FAFAFB" />
        <Setter Property="BorderBrush" Value="#EAEAEB" />
        <Setter Property="Margin" Value="0,0,18,0" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Viewbox Stretch="Uniform">
                        <Canvas Name="Layer_1" Width="20" Height="20" Canvas.Left="10" Canvas.Top="0">
                            <Ellipse  Canvas.Left="0" Width="20" Height="20" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5" />
                            <Ellipse  Canvas.Left="15" Width="20" Height="20" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5" />
                            <Border Canvas.Left="10" Width="15" Height="20" Name="rect416927" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0.5" />
                            <Ellipse x:Name="ellipse"  Canvas.Left="0" Width="20" Height="20" Fill="White" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.3">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform X="0" Y="0" />
                                </Ellipse.RenderTransform>
                                <Ellipse.BitmapEffect>
                                    <DropShadowBitmapEffect Softness="0.1" ShadowDepth="0.7" Direction="270" Color="#BBBBBB" />
                                </Ellipse.BitmapEffect>
                            </Ellipse>
                        </Canvas>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#FF2186AA" Duration="0:0:0.2" />
                                        <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#FF2186AA" Duration="0:0:0.2" />
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.4" Value="15" KeySpline="0, 1, 0.6, 1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#FAFAFB" Duration="0:0:0.2" />
                                        <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#EAEAEB" Duration="0:0:0.2" />
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="15" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0" KeySpline="0, 0.5, 0.5, 1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Border" x:Key="HeaderBorder">
        <Setter Property="CornerRadius" Value="2,2,0,0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource PanelBorderColor}" />
        <Setter Property="Background" Value="{StaticResource PanelTitleBackground}" />
    </Style>

    <Style TargetType="GroupBox">
        <!-- These 2 setters make the GroupBox less blurry -->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Margin" Value="1" />
        <!-- Default Background colour -->
        <Setter Property="Background" Value="{StaticResource PanelBackground}" />
        <!-- Template of GroupBox -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.Resources>
                        </Grid.Resources>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Style="{StaticResource HeaderBorder}">
                            <!-- FontSize of the header is changed via the Templates "Tag" property -->
                            <Label HorizontalAlignment="Left" FontWeight="Bold" Margin="4,0">
                                <ContentPresenter Margin="0" ContentSource="Header" RecognizesAccessKey="True" />
                            </Label>
                        </Border>
                        <Border Grid.Row="1" CornerRadius="0,0,5,5" BorderThickness="1,0,1,1" BorderBrush="{StaticResource PanelBorderColor}" Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="4" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="Icon" TargetType="{x:Type Image}">
        <Setter Property="Height" Value="18" />
        <Setter Property="Margin" Value="2,0" />
    </Style>

    <Style
        x:Key="ButtonFocusVisual">
        <Setter
            Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="#EEEEEEEE" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="2" />
    </Style>

    <Style TargetType="{x:Type RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="#EEEEEEEE" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="2" />
    </Style>

    <Style TargetType="{x:Type xctk:DoubleUpDown}" BasedOn="{x:Null}" x:Key="DoubleUpDown">
        <Setter Property="Template" Value="{DynamicResource UpDown}" />
    </Style>
    <Style TargetType="{x:Type controls:DoubleUpDownTicks}" BasedOn="{x:Null}" x:Key="CtrlDoubleUpDown">
        <Setter Property="Template" Value="{DynamicResource UpDown}" />
    </Style>

    <Style TargetType="{x:Type xctk:IntegerUpDown}" BasedOn="{x:Null}" x:Key="IntUpDown">
        <Setter Property="Template" Value="{DynamicResource UpDown}" />
    </Style>

    <Style TargetType="Hyperlink" x:Key="NavigationHyperLink">
        <Setter Property="Foreground" Value="{StaticResource ImageMainColor}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="14" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="TextBlock.TextDecorations" Value="Underline" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Custom control style -->

    <!-- Image button-->
    <Style TargetType="{x:Type controls:ImageButton}"  BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="#EEEEEEEE" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Height" Value="33" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ImageButton}">
                    <Grid>
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <StackPanel Orientation="Horizontal"  Margin="{TemplateBinding Padding}" HorizontalAlignment="Center">
                            <Image Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}" x:Name="image" Margin="1" />
                            <ContentPresenter Margin="6,0,0,0"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True">
                                <ContentPresenter.Style>
                                    <Style TargetType="ContentPresenter">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Content, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type controls:ImageButton}}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBEE6FD" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBCDDEE" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#FFF4F4F4" />
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5" />
                            <Setter Property="Opacity" TargetName="image" Value="0.65" />
                            <Setter Property="Foreground" Value="#FF838383" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransparentImageButton" TargetType="{x:Type controls:ImageButton}" BasedOn="{StaticResource {x:Type controls:ImageButton}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="Height" Value="25" />
    </Style>

    <!--Image GroupBox -->
    <Style TargetType="{x:Type controls:ImageGroupBox}"  BasedOn="{x:Null}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Background" Value="{StaticResource PanelBackground}" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ImageGroupBox}">
                    <Grid>
                        <Grid.Resources>
                        </Grid.Resources>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" CornerRadius="2,2,0,0" BorderThickness="1" BorderBrush="{StaticResource PanelBorderColor}" Background="{StaticResource PanelTitleBackground}">
                            <!-- FontSize of the header is changed via the Templates "Tag" property -->
                            <Label HorizontalAlignment="Left" FontWeight="Bold" Margin="2,0">
                                <StackPanel Orientation="Horizontal"  Margin="{TemplateBinding Padding}">
                                    <Image Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}" Height="18" Margin="0,0,5,0" />
                                    <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center" />
                                </StackPanel>
                            </Label>
                        </Border>
                        <Border Grid.Row="1" CornerRadius="0,0,5,5" BorderThickness="1,0,1,1" BorderBrush="{StaticResource PanelBorderColor}" Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="4" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Text slider-->
    <SolidColorBrush x:Key="SliderThumb.Static.Foreground" Color="#FFE5E5E5" />
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#FFDCECFC" />
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="#FF7Eb4EA" />
    <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="#FFDAECFC" />
    <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="#FF569DE5" />
    <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#FFD9D9D9" />
    <SolidColorBrush x:Key="SliderThumb.Static.Background" Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="#FFACACAC" />
    <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="#FFD6D6D6" />
    <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="#FFE7EAEA" />
    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 z" Fill="{StaticResource SliderThumb.Static.Background}" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{StaticResource SliderThumb.Static.Border}" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type controls:TextSlider}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <controls:TextTickBar x:Name="TopTick" SnapsToDevicePixels="True" Grid.Row="0" Fill="{TemplateBinding Foreground}" Placement="Top" Height="5" Visibility="Collapsed" TickBarText="{Binding TickText, RelativeSource={RelativeSource TemplatedParent}}" />
                <controls:TextTickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="5" Placement="Bottom" Grid.Row="2" Visibility="Collapsed" TickBarText="{Binding TickText, RelativeSource={RelativeSource TemplatedParent}}" />
                <Border x:Name="TrackBackground" BorderBrush="{StaticResource SliderThumb.Track.Border}" BorderThickness="1" Background="{StaticResource SliderThumb.Track.Background}" Height="4.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="11" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}" />
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}" />
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type controls:TextSlider}" BasedOn="{x:Null}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource SliderThumb.Static.Foreground}" />
        <Setter Property="Template" Value="{StaticResource SliderHorizontal}" />
        <Setter Property="Margin" Value="20,4,20,24" />
    </Style>

    <ControlTemplate x:Key="UpDown" TargetType="{x:Type Control}">
        <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ButtonSpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="Stretch" Style="{DynamicResource ButtonSpinnerStyle1}">
            <xctk:WatermarkTextBox x:Name="PART_TextBox" AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}" AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}" AcceptsReturn="False" BorderThickness="0" Background="Transparent" ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="True" IsUndoEnabled="True" MinWidth="20" MaxLength="{Binding MaxLength, RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="NoWrap" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}" />
        </xctk:ButtonSpinner>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
            </DataTrigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ButtonSpinnerStyle1" TargetType="{x:Type xctk:ButtonSpinner}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ButtonSpinner}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="firstContentColumn" Width="*" />
                                <ColumnDefinition x:Name="secondContentColumn" Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Content}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Grid x:Name="gridContent" Grid.Column="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.Visibility>
                                    <TemplateBinding Property="ShowButtonSpinner">
                                        <TemplateBinding.Converter>
                                            <BooleanToVisibilityConverter />
                                        </TemplateBinding.Converter>
                                    </TemplateBinding>
                                </Grid.Visibility>
                                <RepeatButton x:Name="PART_DecreaseButton" IsTabStop="{TemplateBinding IsTabStop}">
                                    <RepeatButton.ContentTemplate>
                                        <DataTemplate>
                                            <Rectangle HorizontalAlignment="Center" VerticalAlignment="Center" Height="2" Width="10" Fill="Black" Margin="2" />
                                        </DataTemplate>
                                    </RepeatButton.ContentTemplate>
                                </RepeatButton>
                                <RepeatButton x:Name="PART_IncreaseButton" IsTabStop="{TemplateBinding IsTabStop}" Grid.Column="1">
                                    <RepeatButton.ContentTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Rectangle HorizontalAlignment="Center" VerticalAlignment="Center" Height="2" Width="10" Fill="Black" Margin="2" />
                                                <Rectangle HorizontalAlignment="Center" VerticalAlignment="Center" Height="2" Width="10" Fill="Black" Margin="2" RenderTransformOrigin="0.5,0.5">
                                                    <Rectangle.RenderTransform>
                                                        <TransformGroup>
                                                            <ScaleTransform />
                                                            <SkewTransform />
                                                            <RotateTransform Angle="90" />
                                                            <TranslateTransform />
                                                        </TransformGroup>
                                                    </Rectangle.RenderTransform>
                                                </Rectangle>
                                            </Grid>
                                        </DataTemplate>
                                    </RepeatButton.ContentTemplate>
                                </RepeatButton>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlDisabledBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="PART_IncreaseButton" Value="False">
                            <Setter Property="ContentTemplate" TargetName="PART_IncreaseButton">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Grid>
                                            <Rectangle HorizontalAlignment="Center" VerticalAlignment="Center" Height="2" Width="10" Fill="LightGray" Margin="2" />
                                            <Rectangle HorizontalAlignment="Center" VerticalAlignment="Center" Height="2" Width="10" Fill="LightGray" Margin="2" RenderTransformOrigin="0.5,0.5">
                                                <Rectangle.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform />
                                                        <SkewTransform />
                                                        <RotateTransform Angle="90" />
                                                        <TranslateTransform />
                                                    </TransformGroup>
                                                </Rectangle.RenderTransform>
                                            </Rectangle>
                                        </Grid>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="PART_DecreaseButton" Value="False">
                            <Setter Property="ContentTemplate" TargetName="PART_DecreaseButton">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Rectangle HorizontalAlignment="Center" VerticalAlignment="Center" Height="2" Width="10" Fill="LightGray" Margin="2" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ButtonSpinnerLocation" Value="Left">
                            <Setter Property="Width" TargetName="firstContentColumn" Value="Auto" />
                            <Setter Property="Width" TargetName="secondContentColumn" Value="*" />
                            <Setter Property="Grid.Column" TargetName="contentPresenter" Value="1" />
                            <Setter Property="Grid.Column" TargetName="gridContent" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Grid}" x:Key="FormGrid">
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="FontWeight" Value ="Bold" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="4" />
            </Style>
            <Style TargetType="ListBox">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="4" />
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="controls:AlphaNumericTextBox">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Height" Value="Auto"></Setter>
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="FontWeight" Value="Normal" />
                    </Style>
                </Style.Resources>
            </Style>
            <Style TargetType="PasswordBox">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

        

            <Style TargetType="RadioButton">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="4" />
            </Style>

            <Style TargetType="xctk:IntegerUpDown" BasedOn="{StaticResource IntUpDown}">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Left" />
            </Style>

            <Style TargetType="xctk:DoubleUpDown" BasedOn="{StaticResource DoubleUpDown}">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Left" />
            </Style>

            <Style TargetType="controls:DoubleUpDownTicks" BasedOn="{StaticResource CtrlDoubleUpDown}">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Left" />
            </Style>

            <Style TargetType="xctk:DateTimePicker" BasedOn="{StaticResource {x:Type xctk:DateTimePicker}}">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Left" />
                <Setter Property="Height" Value="Auto"></Setter>
            </Style>

            <Style TargetType ="DatePicker">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="Expander">
                <Setter Property="Margin" Value="4" />
            </Style>
            <Style TargetType="{x:Type xctk:DropDownButton}" BasedOn="{StaticResource {x:Type xctk:DropDownButton}}">
                <Setter Property="Margin"  Value="4"></Setter>
                <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>
                <Setter Property="Height" Value="Auto"></Setter>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type controls:Navigation}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:Navigation">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"></RowDefinition>
                            <RowDefinition Height="*"></RowDefinition>
                        </Grid.RowDefinitions>

                        <!-- Header -->
                        <Grid Visibility="{Binding CurrentPage, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}" Background="{StaticResource PanelTitleBackground}">
                            <StackPanel Orientation="Horizontal">
                                <controls:ImageButton Image="{StaticResource Previous}" HorizontalAlignment="Right" Command="{Binding BackCommand}" Style="{StaticResource TransparentImageButton}" Margin="4" VerticalAlignment="Center" />
                                <!-- Navigation paths -->
                                <Border VerticalAlignment="Center" Margin="0,0,10,0">
                                    <StackPanel Orientation="Horizontal" Margin="4,2">
                                        <TextBlock VerticalAlignment="Center">
                                        <Hyperlink Command="{Binding NavigateCommand}" CommandParameter="{x:Null}" Style="{StaticResource NavigationHyperLink}" IsEnabled="{Binding CurrentPage.CanNavigate}">
                                            <Run Text="{Binding PageName, Mode=OneWay}" />
                                        </Hyperlink>
                                        </TextBlock>
                                        <ItemsControl ItemsSource="{Binding Pages}" VerticalAlignment="Center">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Horizontal" />
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate>
                                                    <StackPanel Orientation="Horizontal">
                                                        <Image Source="{StaticResource NavigationSeparator}" Style="{StaticResource Icon}" x:Name="separator" />
                                                        <TextBlock VerticalAlignment="Center">
                                                    <Hyperlink Command="{Binding DataContext.NavigateCommand,  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}" CommandParameter="{Binding}" Style="{StaticResource NavigationHyperLink}">
                                                        <Run Text="{Binding PageName, Mode=OneWay}" />
                                                    </Hyperlink>
                                                        </TextBlock>
                                                    </StackPanel>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>
                                    </StackPanel>
                                </Border>

                                <Grid DataContext="{Binding CurrentPage}" VerticalAlignment="Center">
                                    <ItemsControl ItemsSource="{Binding MenuItems}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <controls:ImageButton Image="{Binding ImageResourceKey, Converter={StaticResource StringToResourceConverter}}" ToolTip="{Binding Tooltip}" Command="{Binding ExecuteCommand}" Visibility="{Binding IsVisible,Converter={StaticResource BooleanToVisibilityConverter}}" Content="{Binding Content}" Style="{StaticResource TransparentImageButton}" Margin="4" VerticalAlignment="Center" />
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </Grid>
                            </StackPanel>
                        </Grid>

                        <!-- Main content : Default dsiplay -->
                        <ContentControl Content="{TemplateBinding Content}" Grid.Row="1" Visibility="{Binding CurrentPage, Converter={StaticResource InvertedNullToVisibilityConverter}}" />

                        <!-- Navigation Content-->
                         <ContentPresenter Content="{Binding CurrentPage}"  Grid.Row="1" Visibility="{Binding DataContext.CurrentPage, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type controls:Navigation}}, Converter={StaticResource NullToVisibilityConverter}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:FormWithHelp}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:FormWithHelp">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="6*" MinHeight="30" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="1*" MinHeight="30" />
                        </Grid.RowDefinitions>
                        <ContentControl x:Name="Part_Content" Content="{TemplateBinding Content}" />
                        <GridSplitter Grid.Row="1" Height="5" HorizontalAlignment="Stretch" />
                        <controls:HelpDisplay x:Name="Part_Help" Grid.Row="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!---Image Spinner-->
    <Storyboard x:Key="SpinnerImgAnimation">
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle"
                        From="0"
                        To="360"
                        Duration="0:0:10"
                        RepeatBehavior="Forever" />
    </Storyboard>
    <Style x:Key="ImageSpinner" TargetType="Image">
        <Setter Property="Image.RenderTransform">
            <Setter.Value>
                <RotateTransform />
            </Setter.Value>
        </Setter>
        <Setter Property="Image.RenderTransformOrigin">
            <Setter.Value>
                <Point X="0.5" Y="0.5" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource SpinnerImgAnimation}" x:Name="SpinnerImgAnim" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard  BeginStoryboardName="SpinnerImgAnim" />
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--- shaking image -->
    <Storyboard x:Key="ShakingImgAnimation">
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle"
                        From="-15"
                        To="15"
                        Duration="0:0:0.2"
                        AutoReverse="True"
                        RepeatBehavior="Forever" />
    </Storyboard>
    <Style x:Key="ImageShaking" TargetType="Image">
        <Setter Property="Image.RenderTransform">
            <Setter.Value>
                <RotateTransform />
            </Setter.Value>
        </Setter>
        <Setter Property="Image.RenderTransformOrigin">
            <Setter.Value>
                <Point X="0.5" Y="0.5" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource ShakingImgAnimation}" x:Name="ShakingImgAnim" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard  BeginStoryboardName="ShakingImgAnim" />
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="xctk:ColorPicker">
        <Setter Property="DropDownBackground" Value="{StaticResource PanelTitleBackground}" />
        <Setter Property="Foreground" Value="Black" />
    </Style>

    <Style TargetType="{x:Type ListView}" x:Key="ListViewInfos">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{StaticResource SelectedItem}" />
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{StaticResource SelectedItem}" />
        </Style.Resources>
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="AliceBlue" />
    </Style>
</ResourceDictionary>