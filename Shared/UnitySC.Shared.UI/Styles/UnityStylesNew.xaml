<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:controls="clr-namespace:UnitySC.Shared.UI.Controls"
                    xmlns:converters="clr-namespace:UnitySC.Shared.UI.Converters"
                    xmlns:sharedExtensions="clr-namespace:UnitySC.Shared.UI.Extensions">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DefaultStyles.xaml"/>
        <ResourceDictionary Source="ImageGeometries.xaml" />
        <ResourceDictionary Source="GridView.xaml" />
        <ResourceDictionary Source="ZoomboxImageResources.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region Colors -->
    <Color x:Key="WhiteColor">White</Color>
    <Color x:Key="BlackColor">Black</Color>

    <Color x:Key="ExtremelyDarkGreyColor">#2A2A2A</Color>
    <Color x:Key="VeryDarkGreyColor">#A8A8A8</Color>
    <Color x:Key="DarkGreyColor">#BFBFBF</Color>
    <Color x:Key="LittleDarkGreyColor">#CFCFCF</Color>
    <Color x:Key="LittleLightGreyColor">#DEDEDE</Color>
    <Color x:Key="LightGreyColor">#F1F1F1</Color>
    <Color x:Key="VeryLightGreyColor">#F6F6F6</Color>
    <Color x:Key="ExtremelyLightGreyColor">#F8F8F8</Color>

    <Color x:Key="VeryDarkHighlightColor">#2A9564</Color>
    <Color x:Key="DarkHighlightColor">#3CAD79</Color>
    <Color x:Key="LightHighlightColor">#44BE86</Color>
    <Color x:Key="VeryLightHighlightColor">#53EDA6</Color>
    <Color x:Key="ExtremelyLightHighlightColor">#C7ECDB</Color>
    <Color x:Key="HighlightBrightColor">#7ED0AA</Color>

    <Color x:Key="SelectionColor">#1E89AF</Color>
    <Color x:Key="WarningColor">#E65252</Color>
    <Color x:Key="ErrorColor">#FFD61B1B</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>

    <Color x:Key="GreenColor">#4b866c</Color>
    
    <Color x:Key="LightBrownColor">#AC956E</Color>
    <Color x:Key="ScanDirectionColor">#97004d</Color>
    <Color x:Key="LightBlueColor">#0467b2</Color>
    <Color x:Key="LightGreenColor">#4f963b</Color>
    <Color x:Key="LightPinkColor">#e8308e</Color>    
    <!--#endregion-->

    <!--#region MeasureInfoView items-->
    <SolidColorBrush x:Key="LightBrownMeasureInfoBrush" Color="{StaticResource LightBrownColor}" />
    <SolidColorBrush x:Key="ScanDirectionMeasureInfoBrush" Color="{StaticResource ScanDirectionColor}" />
    <SolidColorBrush x:Key="LightBlueMeasureInfoBrush" Color="{StaticResource LightBlueColor}" />
    <SolidColorBrush x:Key="LightGreenMeasureInfoBrush" Color="{StaticResource LightGreenColor}" />
    <SolidColorBrush x:Key="LightPinkMeasureInfoBrush" Color="{StaticResource LightPinkColor}" />
    <!--#endregion-->

    <!--#region Wizard -->
    <SolidColorBrush x:Key="WizardSelectionUnderlineBrush" Color="{StaticResource SelectionColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="WizardSelectionTextBrush" Color="{StaticResource SelectionColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="WizardMeasureHoverBorderBrush" Color="{StaticResource DarkGreyColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="WizardMeasurePressedBorderBrush" Color="{StaticResource DarkGreyColor}"></SolidColorBrush>
    <LinearGradientBrush x:Key="WizardMeasureBackgroundBrush" StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource WhiteColor}" Offset="0" />
        <GradientStop Color="{StaticResource LittleLightGreyColor }" Offset="0.033" />
        <GradientStop Color="{StaticResource LittleDarkGreyColor}" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="WizardMeasureHoverBrush" StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource WhiteColor}" Offset="0" />
        <GradientStop Color="{StaticResource LightGreyColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource LittleLightGreyColor}" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="WizardMeasurePressedBrush" StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource WhiteColor}" Offset="0" />
        <GradientStop Color="{StaticResource LittleDarkGreyColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource LittleLightGreyColor}" Offset="1" />
    </LinearGradientBrush>
    <!--#endregion-->

    <SolidColorBrush x:Key="HighLightBrush" Color="{StaticResource DarkHighlightColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="IconsColor" Color="{StaticResource SelectionColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="IconsErrorColor" Color="{StaticResource ErrorColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="IconsDisabledColor" Color="{StaticResource DarkGreyColor}"></SolidColorBrush>
    
    <SolidColorBrush x:Key="HeaderLeftBackgroundBrush" Color="{StaticResource LightGreyColor}" />
    <SolidColorBrush x:Key="HeaderLeftForegroundBrush" Color="{StaticResource ExtremelyDarkGreyColor}" />
    <SolidColorBrush x:Key="HeaderLeftBorderBrush" Color="{StaticResource LittleLightGreyColor}" />

    <!--LeftPanel-->
    <SolidColorBrush x:Key="LeftPaneBackgroundBrush" Color="{StaticResource ExtremelyLightGreyColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="LeftPaneBorderBrush" Color="{StaticResource VeryDarkGreyColor}"></SolidColorBrush>

    <SolidColorBrush x:Key="GreenBrush" Color="{StaticResource GreenColor}"></SolidColorBrush>

    <!--#region Layout -->
    <!--Window-->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="{StaticResource ExtremelyLightGreyColor}"></SolidColorBrush>
    <!--MainMenu-->
    <VisualBrush x:Key="MainMenuBackground" TileMode="Tile" Viewbox="0,0,5,5" Viewport="0,0,5,5" ViewportUnits="Absolute" ViewboxUnits="Absolute">
        <VisualBrush.Visual>
            <Grid Background="#505D5C5C">
                <Path Data="M0,5L5,0" Stroke="#305D5C5C" />
                <Path Data="M0,0L5,5" Stroke="#305D5C5C" />
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>
    <!--Panel-->
    <SolidColorBrush x:Key="PanelTitleBackgroundBrush" Color="{StaticResource LightGreyColor}" />
    <SolidColorBrush x:Key="PanelBorderColorBrush" Color="{StaticResource LittleLightGreyColor}" />
    <SolidColorBrush x:Key="PanelBackgroundBrush" Color="{StaticResource ExtremelyLightGreyColor}" />
    <SolidColorBrush x:Key="PanelBorderBrush" Color="{StaticResource VeryDarkGreyColor}" />
    <!--#endregion-->

    <!--#region Buttons -->
    <!-- Brushes Button-->
    <LinearGradientBrush x:Key="ButtonBackgroundBrush"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource WhiteColor}" Offset="0" />
        <GradientStop Color="{StaticResource VeryLightGreyColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource LittleLightGreyColor}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ButtonBackgroundBrushHover"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource WhiteColor}" Offset="0" />
        <GradientStop Color="{StaticResource VeryLightGreyColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource LightGreyColor}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ButtonBackgroundBrushPressed"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource WhiteColor}" Offset="0" />
        <GradientStop Color="{StaticResource LittleLightGreyColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource LightGreyColor}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ButtonBackgroundBrushChecked"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource WhiteColor}" Offset="0" />
        <GradientStop Color="{StaticResource LittleLightGreyColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource LightGreyColor}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ButtonBackgroundBrushDisabled"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource LittleLightGreyColor}" Offset="0" />
        <GradientStop Color="{StaticResource LightGreyColor}" Offset="1" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ButtonBorderBrush" Color="{StaticResource VeryDarkGreyColor}" />
    <SolidColorBrush x:Key="ButtonForegroundBrush" Color="{StaticResource ExtremelyDarkGreyColor}" />
    <SolidColorBrush x:Key="ButtonBorderBrushHover" Color="{StaticResource VeryDarkGreyColor}" />
    <SolidColorBrush x:Key="ButtonForegroundBrushHover" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="ButtonBorderBrushPressed" Color="{StaticResource DarkGreyColor}" />
    <SolidColorBrush x:Key="ButtonForegroundBrushPressed" Color="{StaticResource ExtremelyDarkGreyColor}" />
    <SolidColorBrush x:Key="ButtonBorderBrushChecked" Color="{StaticResource DarkGreyColor}" />
    <SolidColorBrush x:Key="ButtonForegroundBrushChecked" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="ButtonBorderBrushDisabled" Color="{StaticResource DarkGreyColor}" />
    <SolidColorBrush x:Key="ButtonForegroundBrushDisabled" Color="{StaticResource VeryDarkGreyColor}" />
    <SolidColorBrush x:Key="ToggleButtonCheckedImageBrush" Color="{StaticResource SelectionColor}" />

    <!-- Brushes HighlightButton-->
    <LinearGradientBrush x:Key="HighlightButtonBackgroundBrush"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource HighlightBrightColor}" Offset="0" />
        <GradientStop Color="{StaticResource LightHighlightColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource DarkHighlightColor}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HighlightButtonBackgroundBrushHover"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource HighlightBrightColor}" Offset="0" />
        <GradientStop Color="{StaticResource VeryLightHighlightColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource LightHighlightColor}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HighlightButtonBackgroundBrushPressed"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource HighlightBrightColor}" Offset="0" />
        <GradientStop Color="{StaticResource LightHighlightColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource VeryLightHighlightColor}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HighlightButtonBackgroundBrushChecked"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource HighlightBrightColor}" Offset="0" />
        <GradientStop Color="{StaticResource LightHighlightColor}" Offset="0.033" />
        <GradientStop Color="{StaticResource VeryLightHighlightColor}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HighlightButtonBackgroundBrushDisabled"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource ExtremelyLightHighlightColor}" Offset="0" />
        <GradientStop Color="{StaticResource ExtremelyLightHighlightColor}" Offset="1" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="HighlightButtonBorderBrush" Color="{StaticResource DarkHighlightColor}" />
    <SolidColorBrush x:Key="HighlightButtonForegroundBrush" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="HighlightButtonBorderBrushHover" Color="{StaticResource DarkHighlightColor}" />
    <SolidColorBrush x:Key="HighlightButtonForegroundBrushHover" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="HighlightButtonBorderBrushPressed" Color="{StaticResource DarkHighlightColor}" />
    <SolidColorBrush x:Key="HighlightButtonForegroundBrushPressed" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="HighlightButtonBorderBrushChecked" Color="{StaticResource DarkHighlightColor}" />
    <SolidColorBrush x:Key="HighlightButtonForegroundBrushChecked" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="HighlightButtonBorderBrushDisabled" Color="{StaticResource ExtremelyLightHighlightColor}" />
    <SolidColorBrush x:Key="HighlightButtonForegroundBrushDisabled" Color="{StaticResource WhiteColor}" />

    <Style TargetType="{x:Type ButtonBase}">
        <Setter Property="Padding" Value="5 5" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushHover}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushPressed}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushPressed}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushPressed}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border"  Value="{StaticResource ButtonBackgroundBrushChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushChecked}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushChecked}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushDisabled}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushDisabled}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NormalButton"  TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}" />

    <Style x:Key="HighlightedButton"  TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Background" Value="{StaticResource HighlightButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource HighlightButtonBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource HighlightButtonBackgroundBrushHover}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightButtonBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource HighlightButtonBackgroundBrushPressed}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightButtonBorderBrushPressed}" />
                            <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrushPressed}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border"  Value="{StaticResource HighlightButtonBackgroundBrushChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightButtonBorderBrushChecked}" />
                            <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrushChecked}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource HighlightButtonBackgroundBrushDisabled}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightButtonBorderBrushDisabled}" />
                            <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrushDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ButtonBase}}" />

    <Style x:Key="ButtonChromelessStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderThickness="0">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButtonChromelessStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderThickness="0">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}" />

    <Style TargetType="{x:Type controls:ImageButton}"  BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Padding" Value="3 5" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="ImageGeometryBrush" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}" Padding="{TemplateBinding Padding}">
                        <Grid  HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding LeftImageColumnWidth, RelativeSource={RelativeSource TemplatedParent}}" />
                                <ColumnDefinition Width="{Binding ContentColumnWidth, RelativeSource={RelativeSource TemplatedParent}}" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" x:Name="contentWidth">
                                <Image Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}" x:Name="image" Margin="2,0,2,0" MaxWidth="{Binding ElementName=contentWidth,Path=ActualHeight}" Visibility="{Binding Image, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image Margin="2,0,2,0" x:Name="imageGeometry" Opacity="1" MaxWidth="{Binding ElementName=contentWidth,Path=ActualHeight}"
                                       Visibility="{Binding ImageGeometry, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometry, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}" />
                            </Grid>
                            <ContentPresenter Grid.Column="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" Margin="5,0" >
                                <ContentPresenter.Style>
                                    <Style TargetType="{x:Type ContentPresenter}">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                            <Grid Grid.Column="2">
                                <Image Source="{Binding ImageRight, RelativeSource={RelativeSource TemplatedParent}}" x:Name="imageRight" Margin="2,0,2,0" MaxWidth="{Binding ElementName=contentWidth,Path=ActualHeight}" Visibility="{Binding ImageRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image Margin="2,0,2,0" x:Name="imageGeometryRight" MaxWidth="{Binding ElementName=contentWidth,Path=ActualHeight}"
                                       Visibility="{Binding ImageGeometryRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometryRight, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryRightBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}" />
                            </Grid>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushHover}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushPressed}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushPressed}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushPressed}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border"  Value="{StaticResource ButtonBackgroundBrushChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushChecked}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushChecked}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushDisabled}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushDisabled}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />
                            <Setter Property="Opacity" TargetName="imageGeometry"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="image"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageRight"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageGeometryRight"  Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NormalImageButton"  TargetType="{x:Type controls:ImageButton}" BasedOn="{StaticResource {x:Type controls:ImageButton}}" />

    <Style x:Key="ImageButtonWithoutBorder"  TargetType="{x:Type controls:ImageButton}"  BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="ImageGeometryBrush" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="Transparent" BorderThickness="0" Background="Transparent" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <StackPanel Orientation="Horizontal"  Margin="{TemplateBinding Padding}" HorizontalAlignment="Center">
                            <Grid x:Name="contentWidth" MaxWidth="500">
                                <Image Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}" x:Name="image" Margin="2,0,2,0" Visibility="{Binding Image, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image Margin="2,0,2,0" x:Name="imageGeometry" Opacity="1" MaxWidth="{Binding ElementName=contentWidth,Path=ActualHeight}"
                                       Visibility="{Binding ImageGeometry, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometry, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}" />
                            </Grid>
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" Margin="5,0">
                                <ContentPresenter.Style>
                                    <Style TargetType="{x:Type ContentPresenter}">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                            <Grid>
                                <Image Source="{Binding ImageRight, RelativeSource={RelativeSource TemplatedParent}}" x:Name="imageRight" Margin="2,0,2,0" Visibility="{Binding ImageRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image Margin="2,0,2,0" x:Name="imageGeometryRight" MaxWidth="{Binding ElementName=contentWidth,Path=ActualHeight}"
                                       Visibility="{Binding ImageGeometryRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometryRight, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryRightBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}" />
                            </Grid>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">

                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushPressed}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushChecked}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />
                            <Setter Property="Cursor" Value="Arrow" />
                            <Setter Property="Opacity" TargetName="imageGeometry"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="image"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageRight"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageGeometryRight"  Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:ImageRepeatButton}" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Padding" Value="3 5" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="ImageGeometryBrush" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <StackPanel Orientation="Horizontal"  Margin="{TemplateBinding Padding}" HorizontalAlignment="Center">
                            <Grid>
                                <Image Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}" x:Name="image" Margin="2,0,2,0" Visibility="{Binding Image, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image Margin="2,0,2,0" x:Name="imageGeometry" Opacity="1"
                                       Visibility="{Binding ImageGeometry, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageRepeatButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometry, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageRepeatButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageRepeatButton}, Mode=FindAncestor}}" />
                            </Grid>
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" Margin="5,0">
                                <ContentPresenter.Style>
                                    <Style TargetType="{x:Type ContentPresenter}">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageRepeatButton}, Mode=FindAncestor}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                            <Grid>
                                <Image Source="{Binding ImageRight, RelativeSource={RelativeSource TemplatedParent}}" x:Name="imageRight" Margin="2,0,2,0" Visibility="{Binding ImageRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image Margin="2,0,2,0" x:Name="imageGeometryRight"
                                       Visibility="{Binding ImageGeometryRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageRepeatButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometryRight, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageRepeatButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryRightBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageRepeatButton}, Mode=FindAncestor}}" />
                            </Grid>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushHover}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushPressed}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushPressed}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushPressed}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border"  Value="{StaticResource ButtonBackgroundBrushChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushChecked}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushChecked}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushDisabled}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushDisabled}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />
                            <Setter Property="Opacity" TargetName="imageGeometry"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="image"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageRight"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageGeometryRight"  Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    

    <Style TargetType="{x:Type controls:ImageToggleButton}"  BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Padding" Value="3 5" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="ImageGeometryBrush" Value="{Binding ForegroundUncheckedBrush, RelativeSource={RelativeSource Self}}"  />
        <Setter Property="ImageGeometryUncheckedBrush" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="ImageGeometryCheckedBrush" Value="{StaticResource ToggleButtonCheckedImageBrush}" />
        <Setter Property="ImageGeometryRightBrush" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="ImageGeometryRightCheckedBrush" Value="{StaticResource ToggleButtonCheckedImageBrush}" />
        <Setter Property="ForegroundCheckedBrush" Value="{StaticResource ToggleButtonCheckedImageBrush}" />
        <Setter Property="ForegroundUncheckedBrush" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="Foreground" Value="{Binding ForegroundUncheckedBrush, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ImageToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <StackPanel Orientation="Horizontal"  Margin="{TemplateBinding Padding}" HorizontalAlignment="Center">
                            <Grid>
                                <Image Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}" x:Name="image" Margin="2,0,2,0" Visibility="{Binding Image, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Grid x:Name="imageGeometry" Margin="2,0,2,0" Visibility="{Binding ImageGeometry, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}">
                                    <Image Visibility="{Binding IsChecked, Converter={converters:InvertedBooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"

                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometry, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" />
                                    <Image Visibility="{Binding IsChecked, Converter={converters:BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"

                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageCheckedGeometry, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryCheckedBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" />
                                </Grid>
                            </Grid>
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" Margin="5,0">
                                <ContentPresenter.Style>
                                    <Style TargetType="{x:Type ContentPresenter}">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                            <Grid>
                                <Image Source="{Binding ImageRight, RelativeSource={RelativeSource TemplatedParent}}" x:Name="imageRight" Margin="2,0,2,0" Visibility="{Binding ImageRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Grid Margin="2,0,2,0" Visibility="{Binding ImageGeometryRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}">
                                    <Image x:Name="imageGeometryRight" Visibility="{Binding IsChecked, Converter={converters:InvertedBooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                                                              sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometryRight, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryRightBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" />
                                    <Image Visibility="{Binding IsChecked, Converter={converters:BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                                                              sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometryRight, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryRightCheckedBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" />
                                </Grid>
                            </Grid>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushHover}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushHover}" />
                            <Setter Property="ImageGeometryBrush" Value="{StaticResource ButtonForegroundBrushHover}" />
                            <Setter Property="ImageGeometryRightBrush" Value="{StaticResource ButtonForegroundBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushPressed}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushPressed}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushPressed}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border"  Value="{StaticResource ButtonBackgroundBrushChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushChecked}" />
                            <Setter Property="Foreground" Value="{Binding ForegroundCheckedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        <!--<Trigger Property="IsChecked" Value="False">
              
                            <Setter Property="Foreground" Value="{Binding ForegroundUncheckedBrush, RelativeSource={RelativeSource Self}}" />
                          
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ButtonBackgroundBrushDisabled}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ButtonBorderBrushDisabled}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />
                            <Setter Property="Opacity" TargetName="imageGeometry"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="image"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageRight"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageGeometryRight"  Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImageToggleButtonChromeLessStyle" TargetType="{x:Type controls:ImageToggleButton}"  BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="ImageGeometryBrush" Value="{Binding ForegroundUncheckedBrush, RelativeSource={RelativeSource Self}}"  />
        <Setter Property="ImageGeometryUncheckedBrush" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="ImageGeometryCheckedBrush" Value="{StaticResource ToggleButtonCheckedImageBrush}" />
        <Setter Property="ImageGeometryRightBrush" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="ImageGeometryRightCheckedBrush" Value="{StaticResource ToggleButtonCheckedImageBrush}" />
        <Setter Property="ForegroundCheckedBrush" Value="{StaticResource ToggleButtonCheckedImageBrush}" />
        <Setter Property="ForegroundUncheckedBrush" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="Foreground" Value="{Binding ForegroundUncheckedBrush, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{Binding ForegroundUncheckedBrush, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ImageToggleButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <StackPanel Orientation="Horizontal"  Margin="{TemplateBinding Padding}" HorizontalAlignment="Center">
                            <Grid>
                                <Image Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}" x:Name="image" Margin="2,0,2,0" Visibility="{Binding Image, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Grid x:Name="imageGeometry" Margin="2,0,2,0" Visibility="{Binding ImageGeometry, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}">
                                    <Image Visibility="{Binding IsChecked, Converter={converters:InvertedBooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"

                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometry, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" />
                                    <Image Visibility="{Binding IsChecked, Converter={converters:BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"

                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageCheckedGeometry, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryCheckedBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" />
                                </Grid>
                            </Grid>
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" Margin="5,0">
                                <ContentPresenter.Style>
                                    <Style TargetType="{x:Type ContentPresenter}">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                            <Grid>
                                <Image Source="{Binding ImageRight, RelativeSource={RelativeSource TemplatedParent}}" x:Name="imageRight" Margin="2,0,2,0" Visibility="{Binding ImageRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Grid Margin="2,0,2,0" Visibility="{Binding ImageGeometryRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}">
                                    <Image x:Name="imageGeometryRight" Visibility="{Binding IsChecked, Converter={converters:InvertedBooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                                                              sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometryRight, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryRightBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" />
                                    <Image Visibility="{Binding IsChecked, Converter={converters:BooleanToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                                                              sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometryRight, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryRightCheckedBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageToggleButton}, Mode=FindAncestor}}" />
                                </Grid>
                            </Grid>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
        
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushHover}" />
                            <Setter Property="ImageGeometryBrush" Value="{StaticResource ButtonForegroundBrushHover}" />
                            <Setter Property="ImageGeometryRightBrush" Value="{StaticResource ButtonForegroundBrushHover}" />
                        </Trigger>
                        <!--<Trigger Property="IsPressed" Value="True">
         
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushPressed}" />
                        </Trigger>-->
                        <Trigger Property="IsChecked" Value="True">
  
                            <Setter Property="Foreground" Value="{Binding ForegroundCheckedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        <!--<Trigger Property="IsChecked" Value="False">
              
                            <Setter Property="Foreground" Value="{Binding ForegroundUncheckedBrush, RelativeSource={RelativeSource Self}}" />
                          
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
   
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />
                            <Setter Property="Opacity" TargetName="imageGeometry"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="image"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageRight"  Value="0.4" />
                            <Setter Property="Opacity" TargetName="imageGeometryRight"  Value="0.4" />
                            <Setter Property="Cursor" Value="Arrow" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="HighlightedImageButton"  TargetType="{x:Type controls:ImageButton}"  BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Background" Value="{StaticResource HighlightButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource HighlightButtonBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrush}" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">

                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <StackPanel Orientation="Horizontal"  Margin="{TemplateBinding Padding}" HorizontalAlignment="Center">
                            <Grid Margin="1">
                                <Image Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}" x:Name="image" Margin="0,0,6,0" Width="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" Visibility="{Binding Image, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image Margin="0,0,6,0" Width="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"
                                       Visibility="{Binding ImageGeometry, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometry, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                        sharedExtensions:ImageExt.GeometryBrush="{Binding Foreground, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}" />
                            </Grid>
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True">
                                <ContentPresenter.Style>
                                    <Style TargetType="{x:Type ContentPresenter}">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                            <Grid Margin="1">
                                <Image Source="{Binding ImageRight, RelativeSource={RelativeSource TemplatedParent}}" x:Name="imageRight" Margin="6,0,0,0" Width="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}" Visibility="{Binding ImageRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image Margin="6,0,0,0" Width="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"
                                       Visibility="{Binding ImageGeometryRight, Converter={converters:NullToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                       sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometryRight, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}"
                                    sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryRightBrush, FallbackValue={x:Null}, RelativeSource={RelativeSource AncestorType={x:Type controls:ImageButton}, Mode=FindAncestor}}" />
                            </Grid>
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource HighlightButtonBackgroundBrushHover}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightButtonBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource HighlightButtonBackgroundBrushPressed}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightButtonBorderBrushPressed}" />
                            <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrushPressed}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border"  Value="{StaticResource HighlightButtonBackgroundBrushChecked}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightButtonBorderBrushChecked}" />
                            <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrushChecked}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource HighlightButtonBackgroundBrushDisabled}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource HighlightButtonBorderBrushDisabled}" />
                            <Setter Property="Foreground" Value="{StaticResource HighlightButtonForegroundBrushDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:ImageButton}" x:Key="LeftImageButton" BasedOn="{StaticResource {x:Type controls:ImageButton}}">
        <Setter Property="Border.CornerRadius" Value="3,0,0,3" />
    </Style>

    <Style TargetType="{x:Type controls:ImageButton}" x:Key="RightImageButton" BasedOn="{StaticResource {x:Type controls:ImageButton}}">
        <Setter Property="Border.CornerRadius" Value="0,3,3,0" />
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="LeftButton" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Border.CornerRadius" Value="3,0,0,3" />
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="RightButton" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Border.CornerRadius" Value="0,3,3,0" />
    </Style>

    <Style TargetType="{x:Type RepeatButton}" x:Key="LeftRepeatButton" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Border.CornerRadius" Value="3,0,0,3" />
    </Style>

    <Style TargetType="{x:Type RepeatButton}" x:Key="RightRepeatButton" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Border.CornerRadius" Value="0,3,3,0" />
    </Style>

    <Style TargetType="{x:Type controls:ImageRepeatButton}" x:Key="LeftImageRepeatButton" BasedOn="{StaticResource {x:Type controls:ImageRepeatButton}}">
        <Setter Property="Border.CornerRadius" Value="3,0,0,3" />
    </Style>

    <Style TargetType="{x:Type controls:ImageRepeatButton}" x:Key="RightImageRepeatButton" BasedOn="{StaticResource {x:Type controls:ImageRepeatButton}}">
        <Setter Property="Border.CornerRadius" Value="0,3,3,0" />
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="LeftToggleButton" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Border.CornerRadius" Value="3,0,0,3" />
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="RightToggleButton" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="Border.CornerRadius" Value="0,3,3,0" />
    </Style>

    <!--#endregion-->

    <!--#region TextBoxes -->
    <SolidColorBrush x:Key="TextboxBorderBrush" Color="{StaticResource VeryDarkGreyColor}" />
    <SolidColorBrush x:Key="TextboxTextBrush" Color="{StaticResource ExtremelyDarkGreyColor}" />
    <SolidColorBrush x:Key="TextboxBorderBrushFocused" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="TextboxTextBrushFocused" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="TextboxBorderBrushHover" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="TextboxTextBrushHover" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="TextboxUnitBrush" Color="{StaticResource VeryDarkGreyColor}" />

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextboxBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource TextboxTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Border.CornerRadius" Value="3" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="Height" Value="30" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextboxBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource TextboxTextBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextboxBorderBrushFocused}" />
                            <Setter Property="Foreground" Value="{StaticResource TextboxTextBrushFocused}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxNotRounded" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Border.CornerRadius" Value="0" />
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="LeftTextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Border.CornerRadius" Value="3,0,0,3" />
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="RightTextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Border.CornerRadius" Value="3,0,0,3" />
    </Style>

    <Style TargetType="{x:Type controls:TextBoxUnit}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:TextBoxUnit}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Grid Cursor="IBeam">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                            <TextBlock Grid.Column="1" Foreground="{StaticResource TextboxUnitBrush}" Margin="3,0,10,0" Text="{TemplateBinding Unit}" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextboxBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource TextboxTextBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextboxBorderBrushFocused}" />
                            <Setter Property="Foreground" Value="{StaticResource TextboxTextBrushFocused}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type controls:TextBoxUnit}" x:Key="TextBoxUnitNotRounded" BasedOn="{StaticResource {x:Type controls:TextBoxUnit}}">
        <Setter Property="Border.CornerRadius" Value="0" />
    </Style>

    <Style TargetType="{x:Type controls:TextBoxAngleUnit}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:TextBoxAngleUnit}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Grid Cursor="IBeam">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                            <TextBlock Grid.Column="1" Foreground="{StaticResource TextboxUnitBrush}" Margin="3,0,10,0" Text="{TemplateBinding Unit}" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextboxBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource TextboxTextBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextboxBorderBrushFocused}" />
                            <Setter Property="Foreground" Value="{StaticResource TextboxTextBrushFocused}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type controls:LabelUnit}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment"
          Value="Left" />
        <Setter Property="VerticalContentAlignment"
          Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:LabelUnit}">
                    <Border>
                        <Grid Cursor="IBeam">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                            <TextBlock Grid.Column="1" Margin="3,0,10,0" Text="{TemplateBinding Unit}" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                   Value="false">
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource DisabledForegroundColor}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region ToggleSwitch -->
    <LinearGradientBrush x:Key="ThumbBrush"  StartPoint="0.5,0.01" EndPoint="0.5,1">
        <GradientStop Color="{StaticResource WhiteColor}" Offset="0" />
        <GradientStop Color="{StaticResource LightGreyColor}" Offset="0.15" />
        <GradientStop Color="{StaticResource LittleDarkGreyColor}" Offset="1" />
    </LinearGradientBrush>

  
    <SolidColorBrush x:Key="ToggleSwitchActiveBrush" Color="{StaticResource LightHighlightColor}" />
    <Style x:Key="ToggleAnimatedSwitchNew" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="Opacity" Value="1" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Viewbox Stretch="Uniform">
                        <Canvas x:Name="Layer_1" Width="36" Height="19" Canvas.Left="10" Canvas.Top="0">
                            <!--<Ellipse  Canvas.Left="4" Canvas.Top="3" Width="14" Height="14" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5" />
                            <Ellipse  Canvas.Left="15" Canvas.Top="3" Width="14" Height="14" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5" />-->
                            <Border Canvas.Left="0" Width="36" Height="19" x:Name="rect416927" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="9" />
                            <Ellipse x:Name="ellipse"  Canvas.Left="3" Canvas.Top="2"  Width="15" Height="15" Fill="{StaticResource ThumbBrush}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform X="0" Y="0" />
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Canvas>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="Background.Color" To="{StaticResource LightHighlightColor}" Duration="0:0:0.2" />

                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.4" Value="15" KeySpline="0, 1, 0.6, 1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="Background.Color" To="White" Duration="0:0:0.2" />
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="15" />
                                            <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0" KeySpline="0, 0.5, 0.5, 1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">

                            <!--<Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushDisabled}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />-->
                            <Setter Property="Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleAnimatedSwitchThreeState" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="Opacity" Value="1" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Viewbox Stretch="Uniform">
                            <Canvas x:Name="Layer_1" Width="36" Height="19" Canvas.Left="10" Canvas.Top="0">
                                <Border Canvas.Left="0" Width="36" Height="19" x:Name="rect416927" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="9" />
                                <Ellipse x:Name="ellipse"  Canvas.Left="3" Canvas.Top="2"  Width="15" Height="15" Fill="{StaticResource ThumbBrush}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1">
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform X="0" Y="0" />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Canvas>
                        </Viewbox>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                                GeneratedDuration="0"
                                                To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                        Storyboard.TargetName="ellipse"
                                                        Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame
                                                            KeyTime="0"
                                                            Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                                GeneratedDuration="0"
                                                To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                        Storyboard.TargetName="ellipse"
                                                        Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame
                                                            KeyTime="0"
                                                            Value="15" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                                GeneratedDuration="0"
                                                To="Indeterminate">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                        Storyboard.TargetName="ellipse"
                                                        Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame
                                                            KeyTime="0"
                                                            Value="7.5" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                                From="Unchecked"
                                                To="Checked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="rect416927" Storyboard.TargetProperty="Background.Color" From="{StaticResource WhiteColor}"  To="{StaticResource LightHighlightColor}" Duration="0:0:0.3" />
                                            <DoubleAnimationUsingKeyFrames
                                                        Storyboard.TargetName="ellipse"
                                                        Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame
                                                            KeyTime="0"
                                                            Value="0" />
                                                <EasingDoubleKeyFrame
                                                            KeyTime="0:0:0.3"
                                                            Value="15" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                                GeneratedDuration="0"
                                                From="Checked"
                                                To="Unchecked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="rect416927" Storyboard.TargetProperty="Background.Color" From="{StaticResource LightHighlightColor}"  To="{StaticResource WhiteColor}" Duration="0:0:0.3" />
                                            <DoubleAnimationUsingKeyFrames
                                                        Storyboard.TargetName="ellipse"
                                                        Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame
                                                            KeyTime="0"
                                                            Value="15" />
                                                <EasingDoubleKeyFrame
                                                            KeyTime="0:0:0.3"
                                                            Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                                GeneratedDuration="0"
                                                From="Indeterminate"
                                                To="Unchecked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="rect416927" Storyboard.TargetProperty="Background.Color" From="{StaticResource VeryLightHighlightColor}"  To="{StaticResource WhiteColor}" Duration="0:0:0.15" />
                                            <DoubleAnimationUsingKeyFrames
                                                        Storyboard.TargetName="ellipse"
                                                        Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame
                                                            KeyTime="0"
                                                            Value="7.5" />
                                                <EasingDoubleKeyFrame
                                                            KeyTime="0:0:0.15"
                                                            Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                        GeneratedDuration="0"
                                        From="Indeterminate"
                                        To="Checked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetName="ellipse"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame
                                                    KeyTime="0"
                                                    Value="7.5" />
                                                <EasingDoubleKeyFrame
                                                    KeyTime="0:0:0.15"
                                                    Value="15" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                        GeneratedDuration="0"
                                        From="Unchecked"
                                        To="Indeterminate">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetName="ellipse"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame
                                                    KeyTime="0"
                                                    Value="0" />
                                                <EasingDoubleKeyFrame
                                                    KeyTime="0:0:0.15"
                                                    Value="7.5" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition
                                        GeneratedDuration="0"
                                        From="Checked"
                                        To="Indeterminate">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="rect416927" Storyboard.TargetProperty="Background.Color" From="{StaticResource LightHighlightColor}"  To="{StaticResource VeryLightHighlightColor}" Duration="0:0:0.15" />
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetName="ellipse"
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame
                                                    KeyTime="0"
                                                    Value="15" />
                                                <EasingDoubleKeyFrame
                                                    KeyTime="0:0:0.15"
                                                    Value="7.5" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="rect416927" Storyboard.TargetProperty="Background.Color" To="{StaticResource LightHighlightColor}" Duration="0:0:1" />
                                        <DoubleAnimationUsingKeyFrames
                                                    Storyboard.TargetName="ellipse"
                                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame
                                                        KeySpline="0, 1, 0.6, 1"
                                                        KeyTime="0:0:0.3"
                                                        Value="15" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="rect416927" Storyboard.TargetProperty="Background.Color" To="{StaticResource WhiteColor}" Duration="0:0:1" />
                                        <DoubleAnimationUsingKeyFrames
                                                    Storyboard.TargetName="ellipse"
                                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame
                                                        KeySpline="0, 0.5, 0.5, 1"
                                                        KeyTime="0:0:0.3"
                                                        Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="rect416927" Storyboard.TargetProperty="Background.Color" To="{StaticResource VeryLightHighlightColor}" Duration="0:0:1" />
                                        <DoubleAnimationUsingKeyFrames
                                                    Storyboard.TargetName="ellipse"
                                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                            <SplineDoubleKeyFrame
                                                        KeySpline="0, 1, 0.6, 1"
                                                        KeyTime="0:0:0.3"
                                                        Value="7.5" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    
                    <ControlTemplate.Triggers>
                        
                        <Trigger Property="IsEnabled" Value="False">

                            <!--<Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushDisabled}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />-->
                            <Setter Property="Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Hyperlink -->
    <SolidColorBrush x:Key="HyperlinkForeGroundDisabledBrush" Color="{StaticResource LittleLightGreyColor}" />
    <SolidColorBrush x:Key="HyperlinkForeGroundBrush" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="HyperlinkForeGroundHoverBrush" Color="{StaticResource LightHighlightColor}" />

    <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{StaticResource HyperlinkForeGroundBrush}" />
        <Setter Property="TextDecorations" Value="Underline" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource HyperlinkForeGroundHoverBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource HyperlinkForeGroundDisabledBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region Tab Controls -->
    <SolidColorBrush x:Key="TabItem.Static.Background" Color="{StaticResource LightGreyColor}" />
    <SolidColorBrush x:Key="TabItem.Static.Border" Color="{StaticResource LittleLightGreyColor}" />
    <SolidColorBrush x:Key="TabItem.Static.Foreground" Color="{StaticResource ExtremelyDarkGreyColor}" />
    <SolidColorBrush x:Key="TabItem.MouseOver.Background" Color="{StaticResource LightGreyColor}" />
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="{StaticResource LittleLightGreyColor}" />
    <SolidColorBrush x:Key="TabItem.MouseOver.Foreground" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="{StaticResource LightGreyColor}" />
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="{StaticResource LittleLightGreyColor}" />
    <SolidColorBrush x:Key="TabItem.Disabled.Foreground" Color="{StaticResource VeryDarkGreyColor}" />
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="{StaticResource ExtremelyLightGreyColor}" />
    <SolidColorBrush x:Key="TabItem.Selected.Foreground" Color="{StaticResource SelectionColor}" />

    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground" Value="{StaticResource TabItem.Static.Foreground}" />
        <Setter Property="Background" Value="{StaticResource TabItem.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="6,2,6,2" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" BorderBrush="{StaticResource TabItem.Static.Border}" BorderThickness="0,0,0,2" Background="{StaticResource TabItem.Static.Background}"  Opacity="1" MinWidth="{Binding Path=(sharedExtensions:TabControlExt.MinTabWidth), RelativeSource={RelativeSource  Mode=FindAncestor,AncestorType={x:Type TabControl}}}" />
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                            <!--<Setter Property="Foreground" Value="{StaticResource TabItem.MouseOver.Foreground}" />-->
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource TabItem.MouseOver.Foreground}" />

                            <Setter Property="Margin" Value="0,-2,0,2" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,0,2,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                            <!--<Setter Property="Foreground" Value="{StaticResource TabItem.MouseOver.Foreground}" />-->
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource TabItem.MouseOver.Foreground}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                            <!--<Setter Property="Foreground" Value="{StaticResource TabItem.Disabled.Foreground}" />-->
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource TabItem.Disabled.Foreground}" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,0,2,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />-->
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                            <!--<Setter Property="Foreground" Value="{StaticResource TabItem.Disabled.Foreground}" />-->
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource TabItem.Disabled.Foreground}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Margin" Value="0,-2,0,2" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,0,2,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Selected.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Selected.Border}" />
                            <!--<Setter Property="Foreground" Value="{StaticResource TabItem.Selected.Foreground}" />-->
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource TabItem.Selected.Foreground}" />
                            <Setter Property="Margin" Value="0,-2,0,2" />
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,0,2,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Selected.Background}" />
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Selected.Border}" />
                            <!--<Setter Property="Foreground" Value="{StaticResource TabItem.Selected.Foreground}" />-->
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource TabItem.Selected.Foreground}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabControlTopStyle" TargetType="{x:Type TabControl}">
        <Style.Resources>
            <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource TabItemStyle}" />
        </Style.Resources>
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="BorderThickness" Value="1" />
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <StackPanel Orientation="Horizontal" x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="TabControlTopUniformStyle" TargetType="{x:Type TabControl}">
        <Style.Resources>
            <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource TabItemStyle}" />
        </Style.Resources>
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="BorderThickness" Value="1" />
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <UniformGrid Rows="1" x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabControlLeftStyle" TargetType="{x:Type TabControl}">
        <Style.Resources>
            <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource TabItemStyle}" />
        </Style.Resources>
        <Setter Property="Padding" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="TabStripPlacement" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <Border BorderThickness="0,0,2,0" BorderBrush="{StaticResource TabItem.Static.Border}" Grid.Column="0" Grid.Row="0" />
                        <TabPanel x:Name="headerPanel" Grid.Column="0" Grid.Row="0" Background="Transparent" IsItemsHost="true" Margin="0"  KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource TabControlTopUniformStyle}"/>

    <!--#endregion-->

    <!--#region Separator -->
    <SolidColorBrush x:Key="SeparatorBrush" Color="{StaticResource LittleLightGreyColor}" />
    <SolidColorBrush x:Key="SeparatorLightBrush" Color="{StaticResource LightGreyColor}" />

    <Style TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{StaticResource SeparatorBrush}" />
    </Style>
    <!--#endregion-->

    <!--#region Lists -->
    <SolidColorBrush x:Key="ListItemStaticBackgroundColor" Color="{StaticResource LightGreyColor}" />
    <SolidColorBrush x:Key="ListItemStaticBorderColor" Color="Transparent" />
    <SolidColorBrush x:Key="ListItemHoverBackgroundColor" Color="{StaticResource ExtremelyLightGreyColor}" />
    <SolidColorBrush x:Key="ListItemHoverBorderColor" Color="Transparent" />
    <SolidColorBrush x:Key="ListItemSelectedBackgroundColor" Color="{StaticResource ExtremelyLightGreyColor}" />
    <SolidColorBrush x:Key="ListItemSelectedBorderColor" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="ListItemDisabledBackgroundColor" Color="{StaticResource ExtremelyLightGreyColor}" />
    <SolidColorBrush x:Key="ListItemDisabledBorderColor" Color="Transparent" />
    <SolidColorBrush x:Key="ListItemDisabledForegroundColor" Color="{StaticResource LittleDarkGreyColor}" />


    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border" SnapsToDevicePixels="true" Background="{StaticResource ListItemStaticBackgroundColor}" CornerRadius="5" Margin="0,2" BorderThickness="2" BorderBrush="{StaticResource ListItemStaticBorderColor}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ListItemSelectedBackgroundColor}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ListItemSelectedBorderColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource ListItemDisabledBackgroundColor}" />
                            <Setter Property="Foreground" Value="{StaticResource ListItemDisabledForegroundColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ListItemHoverBackgroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxItemWithoutSelectionStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border" SnapsToDevicePixels="true" Background="{StaticResource ListItemStaticBackgroundColor}" CornerRadius="5" Margin="0,2" BorderThickness="2" BorderBrush="{StaticResource ListItemStaticBorderColor}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ListItemDisabledBackgroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxItemStepsStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <DockPanel LastChildFill="True">
                        <!--<Rectangle x:Name="Separator" DockPanel.Dock="Top" Fill="#dedede" Height="1" SnapsToDevicePixels="True" />-->
                        <Separator x:Name="Separator" DockPanel.Dock="Top" Background="{StaticResource SeparatorBrush}" Visibility="Collapsed" />
                        <Border x:Name="Border" SnapsToDevicePixels="true" DockPanel.Dock="Top">
                            <ContentPresenter VerticalAlignment="Center" />
                        </Border>
                        <Separator x:Name="SeparatorBottom" DockPanel.Dock="Bottom" Background="{StaticResource SeparatorBrush}" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Separator" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}" />
        <Setter Property="Padding" Value="-1" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="ListBoxForComboBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border" SnapsToDevicePixels="true" Background="White" CornerRadius="0" Margin="0,2" BorderThickness="2" Padding="15,3"  BorderBrush="{StaticResource ListItemStaticBorderColor}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ListItemSelectedBackgroundColor}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ListItemSelectedBorderColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ListItemDisabledBackgroundColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ListItemSelectedBorderColor}" />
                            <Setter Property="Foreground" Value="{StaticResource ListItemDisabledBackgroundColor}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxForComboBox"  TargetType="{x:Type ListBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxForComboBoxItemStyle}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="ListBoxWithoutSelection" TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemWithoutSelectionStyle}" />
    </Style>

    <Style x:Key="ListBoxStepsStyle"  TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStepsStyle}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <!--#endregion-->

    <!--#region GroupBox -->
    <SolidColorBrush x:Key="GroupBoxBackgroundBrush" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="GroupBoxBorderBrush" Color="{StaticResource VeryDarkGreyColor}" />
    <SolidColorBrush x:Key="GroupBoxHeaderBackgroundBrush" Color="{StaticResource LittleLightGreyColor}" />
    <SolidColorBrush x:Key="GroupBoxHeaderForegroundBrush" Color="{StaticResource ExtremelyDarkGreyColor}" />

    <!-- I must use here the converter throw a static resource, if I use the MarkupExtension it breaks the designer  -->
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />

    <Style TargetType="{x:Type GroupBox}">
        <!-- These 2 setters make the GroupBox less blurry -->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Margin" Value="1" />
        <!-- Default Background colour -->
        <Setter Property="Background" Value="{StaticResource GroupBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource GroupBoxHeaderForegroundBrush}" />
        <!-- Template of GroupBox -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" BorderBrush="{StaticResource GroupBoxBorderBrush}" BorderThickness="1" CornerRadius="3,3,0,0" Background="{StaticResource GroupBoxHeaderBackgroundBrush}">
                            <Grid>
                                <Label Grid.Column="1" HorizontalAlignment="Left" Margin="4,0" Foreground="{TemplateBinding Foreground}">
                                    <ContentPresenter Margin="0" ContentSource="Header" RecognizesAccessKey="True" />
                                </Label>
                            </Grid>
                        </Border>
                        <Border Grid.Row="1" CornerRadius="0,0,5,5" BorderThickness="1,0,1,1" BorderBrush="{StaticResource GroupBoxBorderBrush}" Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="4" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:ImageGroupBox}"  BasedOn="{StaticResource {x:Type GroupBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" BorderBrush="{StaticResource GroupBoxBorderBrush}" BorderThickness="1" CornerRadius="3,3,0,0" Background="{StaticResource GroupBoxHeaderBackgroundBrush}" Padding="0,2">
                            <Grid Margin="{TemplateBinding Padding}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Image Height="16" Width="16" Margin="5,0,0,0"
                                       Source="{Binding Image, RelativeSource={RelativeSource TemplatedParent}}"
                                      Visibility="{Binding Image, Converter={StaticResource NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Image Height="16" Width="16" Margin="5,0,0,0"
                                        sharedExtensions:ImageExt.SourceGeometry="{Binding ImageGeometry, RelativeSource={RelativeSource TemplatedParent}}"
                                        sharedExtensions:ImageExt.GeometryBrush="{Binding ImageGeometryBrush, RelativeSource={RelativeSource TemplatedParent}}"
                                       Visibility="{Binding ImageGeometry, Converter={StaticResource NullToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBlock Grid.Column="1" HorizontalAlignment="Left" Margin="4,0" Foreground="{TemplateBinding Foreground}">
                                    <ContentPresenter Margin="0" ContentSource="Header" RecognizesAccessKey="True" />
                                </TextBlock>
                            </Grid>
                        </Border>
                        <Border Grid.Row="1" CornerRadius="0,0,5,5" BorderThickness="1,0,1,1" BorderBrush="{StaticResource GroupBoxBorderBrush}" Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="4" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region CheckBox -->

    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="{StaticResource VeryDarkGreyColor}" />
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="{StaticResource LightGreyColor}" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121" />
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121" />
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="4">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None" />
                                <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}" />
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}" />
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Label -->
    <SolidColorBrush x:Key="Label.Foreground" Color="{StaticResource VeryDarkGreyColor}" />
    <SolidColorBrush x:Key="Label.Background.Level1" Color="{StaticResource LightGreyColor}" />
    <SolidColorBrush x:Key="Label.Foreground.Level1" Color="{StaticResource ExtremelyDarkGreyColor}" />
    <SolidColorBrush x:Key="Label.Foreground.Level2" Color="{StaticResource VeryDarkGreyColor}" />

    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource Label.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
    </Style>

    <Style x:Key="LabelForm"  TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource Label.Foreground.Level1}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0,0,10,0" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ContentStringFormat" Value="{}{0}:" />
    </Style>
    <Style x:Key="TextForm"  TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource Label.Foreground.Level1}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="TitleLevel1"  TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource Label.Foreground.Level1}" />
        <Setter Property="Background" Value="{StaticResource Label.Background.Level1}" />
        <Setter Property="Padding" Value="5,5,5,5" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="TitleLevel2"  TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource Label.Foreground.Level2}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <!--#endregion-->

    <!--#region States Display -->
    <SolidColorBrush x:Key="StepStateImage.NotDoneImage.Background" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="StepStateImage.DoneImage.Foreground" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="WarningBrush" Color="{StaticResource WarningColor}" />

    <Storyboard x:Key="SpinnerFastImgAnimation">
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle"
                        From="0"
                        To="360"
                        Duration="0:0:2"
                        RepeatBehavior="Forever" />
    </Storyboard>
    <Style x:Key="ImageSpinnerVisible" TargetType="{x:Type Image}">
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform />
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransformOrigin">
            <Setter.Value>
                <Point X="0.5" Y="0.5" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource SpinnerFastImgAnimation}" x:Name="SpinnerImgAnim" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <StopStoryboard  BeginStoryboardName="SpinnerImgAnim" />
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type controls:StepStateImage}">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:StepStateImage}">
                    <Grid DataContext="{Binding ., RelativeSource={RelativeSource TemplatedParent}}">
                        <!--<Border x:Name="NotDoneImage"
                                                CornerRadius="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
                                                Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
                                BorderThickness="2" BorderBrush="{StaticResource ButtonBorderBrush}" Background="{StaticResource StepStateImage.NotDoneImage.Background}" />-->
                        <Image x:Name="NotDoneImage" sharedExtensions:ImageExt.SourceGeometry="{StaticResource CheckCircleUncheckedGeometry}" sharedExtensions:ImageExt.GeometryBrush="{StaticResource StepStateImage.DoneImage.Foreground}" />

                        <Image x:Name="DoneImage" sharedExtensions:ImageExt.SourceGeometry="{StaticResource CheckCircleSolidGeometry}" sharedExtensions:ImageExt.GeometryBrush="{StaticResource StepStateImage.DoneImage.Foreground}"  Visibility="Collapsed" />
                        <Image x:Name="InProgressImage" Source="/UnitySC.Shared.UI;component/Controls/Status/ProgressGradient.png" Visibility="Collapsed" Style="{StaticResource ImageSpinnerVisible}" />
                        <Image x:Name="ErrorImage" sharedExtensions:ImageExt.SourceGeometry="{StaticResource ErrorGeometry}" sharedExtensions:ImageExt.GeometryBrush="{StaticResource WarningBrush}"    Visibility ="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="StepState" Value="Done">
                            <Setter TargetName="NotDoneImage" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="DoneImage" Property="Visibility" Value="Visible" />
                            <Setter TargetName="InProgressImage" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ErrorImage" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="StepState" Value="InProgress">
                            <Setter TargetName="NotDoneImage" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="DoneImage" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="InProgressImage" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ErrorImage" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="StepState" Value="Error">
                            <Setter TargetName="NotDoneImage" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="DoneImage" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="InProgressImage" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ErrorImage" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region UpDown -->
    <Style TargetType="{x:Type controls:DoubleUpDown}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="InputMask" Value="Decimal" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:DoubleUpDown}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <controls:ImageRepeatButton x:Name="Part_DownButton" Style="{StaticResource LeftImageRepeatButton}" ImageGeometry="{TemplateBinding ImageGeometryDown}" ImageGeometryBrush="{TemplateBinding ImageGeometryBrushDown}" Image="{TemplateBinding ImageDown}" Height="{TemplateBinding Height}"/>
                        <controls:TextBoxUnit Grid.Column="1" x:Name="Part_TextBox" Unit="{TemplateBinding Unit}"
                                                       Style="{StaticResource TextBoxUnitNotRounded}"
                                                       sharedExtensions:TextBoxMaskExt.Mask="{TemplateBinding InputMask}"
                                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                       sharedExtensions:TextBoxExt.OnEnterAndEscUpdate="True"
                                                       MaxLength="{TemplateBinding MaxLength}" Height="{TemplateBinding Height}"/>

                        <controls:ImageRepeatButton Grid.Column="2" x:Name="Part_UpButton" Style="{StaticResource RightImageRepeatButton}" ImageGeometry="{TemplateBinding ImageGeometryUp}" ImageGeometryBrush="{TemplateBinding ImageGeometryBrushUp}" Image="{TemplateBinding ImageUp}" Height="{TemplateBinding Height}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="Part_TextBox" Value="{Binding ElementName=Part_TextBox}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:IntegerUpDown}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="InputMask" Value="Integer" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IntegerUpDown}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <controls:ImageRepeatButton x:Name="Part_DownButton" Style="{StaticResource LeftImageRepeatButton}" ImageGeometry="{TemplateBinding ImageGeometryDown}" ImageGeometryBrush="{TemplateBinding ImageGeometryBrushDown}" Image="{TemplateBinding ImageDown}" Height="{TemplateBinding Height}"/>
                        <controls:TextBoxUnit Grid.Column="1" x:Name="Part_TextBox" Unit="{TemplateBinding Unit}"
                                                       Style="{StaticResource TextBoxUnitNotRounded}"
                                                       sharedExtensions:TextBoxMaskExt.Mask="{TemplateBinding InputMask}"
                                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                       sharedExtensions:TextBoxExt.OnEnterAndEscUpdate="True"
                                                       MaxLength="{TemplateBinding MaxLength}" Height="{TemplateBinding Height}"/>

                        <controls:ImageRepeatButton Grid.Column="2" x:Name="Part_UpButton" Style="{StaticResource RightImageRepeatButton}" ImageGeometry="{TemplateBinding ImageGeometryUp}" ImageGeometryBrush="{TemplateBinding ImageGeometryBrushUp}" Image="{TemplateBinding ImageUp}" Height="{TemplateBinding Height}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="Part_TextBox" Value="{Binding ElementName=Part_TextBox}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ToolTip -->
    <!--This will hide all the empty tooltips-->
    <Style TargetType="{x:Type ToolTip}">
        <Style.Triggers>
            <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion ToolTip -->

    <!--#region ComboBox -->

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ButtonBase}}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Border x:Name="splitBorder" Width="20" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1,0,0,0" BorderBrush="Transparent" CornerRadius="0,2,2,0">
                            <Path x:Name="arrow" VerticalAlignment="Center" Margin="0,0" HorizontalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="{StaticResource CaretBottomGeometry}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ButtonBackgroundBrush}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ButtonBorderBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ButtonForegroundBrushHover}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ButtonBackgroundBrushHover}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ButtonBorderBrushHover}" />
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushHover}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ButtonBackgroundBrushHover}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ButtonBorderBrushHover}" />
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ButtonBackgroundBrushHover}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ButtonBorderBrushHover}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ButtonForegroundBrushPressed}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ButtonBackgroundBrushPressed}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ButtonBorderBrushPressed}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ButtonBackgroundBrushPressed}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ButtonBorderBrushPressed}" />
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource  ButtonBackgroundBrushPressed}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ButtonBorderBrushPressed}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ButtonForegroundBrushDisabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ButtonBackgroundBrushDisabled}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ButtonBorderBrushDisabled}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ButtonBackgroundBrushDisabled}" />
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ButtonBorderBrushDisabled}" />
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ButtonBackgroundBrushDisabled}" />
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ButtonBorderBrushDisabled}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}" />
            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5" />
                <Setter Property="Color" TargetName="shadow" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF" />
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}" />
            <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="2,2,4,2">
                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5" />
                <Setter Property="Color" TargetName="shadow" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region DropDownButton-->
    <Style TargetType="{x:Type xctk:DropDownButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />

        <Setter Property="DropDownContentBackground">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFF0F0F0" Offset="0" />
                    <GradientStop Color="#FFE5E5E5" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DropDownButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <ToggleButton x:Name="PART_DropDownButton" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.IsHitTestVisible>
                                <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <xctk:InverseBoolConverter />
                                    </Binding.Converter>
                                </Binding>
                            </ToggleButton.IsHitTestVisible>
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" />
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <Grid>
                                <ToggleButton x:Name="ToggleButtonChrome" Height="Auto" Padding="1" HorizontalContentAlignment="Stretch" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                        <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="1,3">
                                            <Path x:Name="Arrow" VerticalAlignment="Center" Margin="0,0" HorizontalAlignment="Center" Fill="{Binding ElementName=ToggleButtonChrome, Path=Foreground}" Data="{StaticResource CaretBottomGeometry}" />
                                        </Grid>
                                    </Grid>
                                </ToggleButton>
                            </Grid>
                        </ToggleButton>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}" Placement="{TemplateBinding DropDownPosition}" StaysOpen="False" ToolTip="" VerticalOffset="1">
                            <Popup.Resources>
                                <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Border BorderBrush="#FFABADB3" BorderThickness="1" Background="{TemplateBinding DropDownContentBackground}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                                    <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            <Setter Property="Foreground" TargetName="ToggleButtonChrome" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="BottomRightAlignedStyle"  TargetType="{x:Type xctk:DropDownButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="DropDownPosition" Value="Left" />
        <Setter Property="IsOpen" Value="False" />
   
        <Setter Property="DropDownContentBackground">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFF0F0F0" Offset="0" />
                    <GradientStop Color="#FFE5E5E5" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="3" />
       
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DropDownButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <ToggleButton x:Name="PART_DropDownButton" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.IsHitTestVisible>
                                <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <xctk:InverseBoolConverter />
                                    </Binding.Converter>
                                </Binding>
                            </ToggleButton.IsHitTestVisible>
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" />
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <Grid>
                                <ToggleButton x:Name="ToggleButtonChrome" Height="Auto" Padding="1" HorizontalContentAlignment="Stretch" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                        <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="1,3">
                                            <Path x:Name="Arrow" VerticalAlignment="Center" Margin="0,0" HorizontalAlignment="Center" Fill="{Binding ElementName=ToggleButtonChrome, Path=Foreground}" Data="{StaticResource CaretBottomGeometry}" />
                                        </Grid>
                                    </Grid>
                                </ToggleButton>
                            </Grid>
                        </ToggleButton>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}" Placement="{TemplateBinding DropDownPosition}" StaysOpen="False" ToolTip="" VerticalOffset="{TemplateBinding ActualHeight}" 
       HorizontalOffset="{TemplateBinding ActualWidth}">
                            <Popup.Resources>
                                <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Border BorderBrush="#FFABADB3" BorderThickness="1" Background="{TemplateBinding DropDownContentBackground}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                                    <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <Border Visibility="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={converters:BooleanToVisibilityConverter}}" Background="Transparent"></Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            <Setter Property="Foreground" TargetName="ToggleButtonChrome" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
           
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

     
    </Style>

    <!--#endregion-->

    <!--#region DateTimePicker-->
    <Style TargetType="{x:Type xctk:DateTimePicker}">
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1,1,0,1" />

        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="TimeWatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="WatermarkTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="CalendarWidth" Value="178" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DateTimePicker}">
                    <Border>
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3,0,0,3" Padding="2">
                                    <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}"  BorderThickness="0" ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" VerticalContentAlignment="Stretch">
                                        <xctk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" Background="Transparent" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="True" IsUndoEnabled="True" MinWidth="20" Padding="{TemplateBinding Padding}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="{TemplateBinding TabIndex}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}" />
                                    </xctk:ButtonSpinner>
                                </Border>
                                <ToggleButton x:Name="_calendarToggleButton" Background="White" Grid.Column="1" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.IsHitTestVisible>
                                        <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xctk:InverseBoolConverter />
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsHitTestVisible>
                                    <ToggleButton.IsEnabled>
                                        <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <xctk:InverseBoolConverter />
                                            </Binding.Converter>
                                        </Binding>
                                    </ToggleButton.IsEnabled>
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Grid SnapsToDevicePixels="True">
                                                            <ToggleButton x:Name="ToggleButtonChrome" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}" IsEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}" Style="{StaticResource RightToggleButton}" Padding="0">
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="*" />
                                                                        <ColumnDefinition Width="Auto" />
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch" />
                                                                    <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="2">
                                                                        <Path x:Name="Arrow" VerticalAlignment="Center" Margin="0,0" HorizontalAlignment="Center" Fill="{Binding ElementName=ToggleButtonChrome, Path=Foreground}" Data="{StaticResource CaretBottomGeometry}" />
                                                                    </Grid>
                                                                </Grid>
                                                            </ToggleButton>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                    <ToggleButton.Visibility>
                                        <TemplateBinding Property="ShowDropDownButton">
                                            <TemplateBinding.Converter>
                                                <BooleanToVisibilityConverter />
                                            </TemplateBinding.Converter>
                                        </TemplateBinding>
                                    </ToggleButton.Visibility>
                                </ToggleButton>
                            </Grid>
                            <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False" ToolTip="">
                                <Popup.Resources>
                                    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border BorderBrush="#FFABADB3" BorderThickness="1" Padding="3">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#FFF0F0F0" Offset="0" />
                                            <GradientStop Color="#FFE5E5E5" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar" BorderThickness="0" DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" DisplayDate="2021-02-17">
                                            <Calendar.Template>
                                                <ControlTemplate TargetType="{x:Type Calendar}">
                                                    <Viewbox Width="{Binding CalendarWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}">
                                                        <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                                                            <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}" />
                                                        </StackPanel>
                                                    </Viewbox>
                                                </ControlTemplate>
                                            </Calendar.Template>
                                        </Calendar>
                                        <xctk:TimePicker x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding TimePickerAllowSpin}" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" FormatString="{TemplateBinding TimeFormatString}" Format="{TemplateBinding TimeFormat}" IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}" Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}" ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}" Step="{TemplateBinding Step}" Text="" Visibility="{TemplateBinding TimePickerVisibility}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}" Watermark="{TemplateBinding TimeWatermark}" />
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushHover}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="PART_TextBox" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushHover}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowButtonSpinner" Value="False" />
                                <Condition Property="ShowDropDownButton" Value="False" />
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="BorderThickness" TargetName="PART_Spinner">
                                <Setter.Value>
                                    <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <xctk:BorderThicknessConverter />
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>
                            </Setter>-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Expander-->

    <SolidColorBrush x:Key="ExpanderHeaderBackgroundBrush" Color="{StaticResource LittleLightGreyColor}" />
    <SolidColorBrush x:Key="ExpanderHeaderForegroundBrush" Color="{StaticResource ExtremelyDarkGreyColor}" />
    <SolidColorBrush x:Key="ExpanderHeaderForegroundBrushDisabled" Color="{StaticResource VeryDarkGreyColor}" />
    <SolidColorBrush x:Key="ExpanderBackgroundBrush" Color="{StaticResource WhiteColor}" />
    <SolidColorBrush x:Key="ExpanderBorderBrush" Color="{StaticResource VeryDarkGreyColor}" />

    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Path
									x:Name="arrow"
									Width="8"
									Margin="0,8"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Data="m 8.2148438,17.855468 1.5,1.5 6.0703122,-6.070312 -6.0703122,-6.0703122 -1.5,1.5 4.5703122,4.5703122 z"
									Fill="{TemplateBinding Foreground}"
									SnapsToDevicePixels="false"
									Stretch="Uniform" />
                            <ContentPresenter
									Grid.Row="1"
									HorizontalAlignment="Center"
									VerticalAlignment="Top"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Data" Value="m 15.785156,8.7148438 -1.5,-1.5 -6.0703122,6.0703122 6.0703122,6.070312 1.5,-1.5 -4.570312,-4.570312 z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinHeight" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Path
									x:Name="arrow"
									Height="8"
									Margin="8,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Data="m 16.570312,17.070312 1.5,-1.5 L 12,9.5 l -6.0703125,6.070312 1.5,1.5 L 12,12.5 Z"
									Fill="{TemplateBinding Foreground}"
									SnapsToDevicePixels="false"
									Stretch="Uniform" />
                            <ContentPresenter
									Grid.Column="1"
									Margin="0"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Data" Value="M7.4296875 9.5L5.9296875 11L12 17.070312L18.070312 11L16.570312 9.5L12 14.070312L7.4296875 9.5 z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Path
									x:Name="arrow"
									Width="8"
									Margin="0,8"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Data="m 15.785156,8.7148438 -1.5,-1.5 -6.0703122,6.0703122 6.0703122,6.070312 1.5,-1.5 -4.570312,-4.570312 z"
									Fill="{TemplateBinding Foreground}"
									SnapsToDevicePixels="false"
									Stretch="Uniform" />
                            <ContentPresenter
									Grid.Row="1"
									HorizontalAlignment="Center"
									VerticalAlignment="Top"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Data" Value="m 8.2148438,17.855468 1.5,1.5 6.0703122,-6.070312 -6.0703122,-6.0703122 -1.5,1.5 4.5703122,4.5703122 z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinHeight" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Path
									x:Name="arrow"
									Height="8"
									Margin="8,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Data="M7.4296875 9.5L5.9296875 11L12 17.070312L18.070312 11L16.570312 9.5L12 14.070312L7.4296875 9.5 z"
									Fill="{TemplateBinding Foreground}"
									SnapsToDevicePixels="false"
									Stretch="Uniform" />
                            <ContentPresenter
									Grid.Column="1"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Data" Value="m 16.570312,17.070312 1.5,-1.5 L 12,9.5 l -6.0703125,6.070312 1.5,1.5 L 12,12.5 Z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="{StaticResource ExpanderBackgroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="{StaticResource ExpanderBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="3"
							SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton
									x:Name="HeaderSite"
									Padding="{TemplateBinding Padding}"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									Background="{StaticResource ExpanderHeaderBackgroundBrush}"
									Content="{TemplateBinding Header}"
									ContentTemplate="{TemplateBinding HeaderTemplate}"
									ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
									DockPanel.Dock="Top"
									FontFamily="{TemplateBinding FontFamily}"
									FontSize="{TemplateBinding FontSize}"
									FontStretch="{TemplateBinding FontStretch}"
									FontStyle="{TemplateBinding FontStyle}"
									FontWeight="{TemplateBinding FontWeight}"
									Foreground="{StaticResource ExpanderHeaderForegroundBrush}"
									IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
									Style="{StaticResource ExpanderDownHeaderStyle}" />
                            <ContentPresenter
									x:Name="ExpandSite"
									Margin="{TemplateBinding Padding}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									DockPanel.Dock="Bottom"
									Focusable="false"
									Visibility="Collapsed" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderRightHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderUpHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource ExpanderLeftHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="HeaderSite" Property="Foreground" Value="{StaticResource ExpanderHeaderForegroundBrushDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Expander-->
    
    <!--#region RadioButton-->

    <SolidColorBrush x:Key="RadioButtonGlyphCheckedBrush" Color="{StaticResource SelectionColor}" />
    <SolidColorBrush x:Key="RadioButtonGlyphUncheckedBrush" Color="{StaticResource ExtremelyDarkGreyColor}" />

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{StaticResource RadioButtonGlyphUncheckedBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid
							x:Name="templateRoot"
							Background="Transparent"
							SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Path
								x:Name="RadioPath"
								Width="16"
								Height="16"
								Margin="3"
								VerticalAlignment="Center"
								Data="M 12,2 C 6.4889971,2 2,6.4889971 2,12 2,17.511003 6.4889971,22 12,22 17.511003,22 22,17.511003 22,12 22,6.4889971 17.511003,2 12,2 Z m 0,2 c 4.430123,0 8,3.5698774 8,8 0,4.430123 -3.569877,8 -8,8 C 7.5698774,20 4,16.430123 4,12 4,7.5698774 7.5698774,4 12,4 Z"
								Fill="{TemplateBinding Background}"
								Stretch="Uniform" />
                        <ContentPresenter
								x:Name="contentPresenter"
								Grid.Column="1"
								Margin="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Focusable="False"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,0,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="RadioPath" Property="Fill" Value="{StaticResource RadioButtonGlyphCheckedBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="RadioPath" Property="Data" Value="M12 2C6.4889971 2 2 6.4889971 2 12C2 17.511003 6.4889971 22 12 22C17.511003 22 22 17.511003 22 12C22 6.4889971 17.511003 2 12 2 z M 12 4C16.430123 4 20 7.5698774 20 12C20 16.430123 16.430123 20 12 20C7.5698774 20 4 16.430123 4 12C4 7.5698774 7.5698774 4 12 4 z M 12 6 A 6 6 0 0 0 6 12 A 6 6 0 0 0 12 18 A 6 6 0 0 0 18 12 A 6 6 0 0 0 12 6 z" />
                            <Setter TargetName="RadioPath" Property="Fill" Value="{StaticResource RadioButtonGlyphCheckedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion RadioButton-->

    <!--#region OverlayContentControl-->
    <Style TargetType="{x:Type controls:OverlayedContentControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:OverlayedContentControl}">
                    <Grid x:Name="MainContainer">

                        <ContentPresenter
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        <ContentPresenter
							x:Name="OverlayContentControl"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Overlay}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="OverlayIsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard>
                                            <DoubleAnimation
												Storyboard.TargetName="OverlayContentControl"
												Storyboard.TargetProperty="Opacity"
												To="1"
												Duration="0:0:0.30" />
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <BeginStoryboard.Storyboard>
                                        <Storyboard>
                                            <DoubleAnimation
												Storyboard.TargetName="OverlayContentControl"
												Storyboard.TargetProperty="Opacity"
												To="0"
												Duration="0:0:0.30" />
                                        </Storyboard>
                                    </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion OverlayContentControl-->

    <!--#region ToleranceDisplayer-->

    <SolidColorBrush x:Key="ToleranceStrokeBrush" Color="#292929" Opacity=".8" />

    <Style TargetType="{x:Type controls:ToleranceDisplayer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ToleranceDisplayer}">
                    <DockPanel>
                        <Path
							x:Name="Path"
							Width="14"
							Height="14"
							Margin="0,0,5,0"
                            Stroke="{StaticResource ToleranceStrokeBrush}"
                            StrokeThickness="0.6"
							DockPanel.Dock="Left"
							Stretch="Uniform" />
                        <TextBlock
							VerticalAlignment="Center"
							Text="{TemplateBinding Value}" />
                    </DockPanel>
                    <ControlTemplate.Triggers>

                        <Trigger Property="Value" Value="{x:Null}">
                            <Setter TargetName="Path" Property="Margin" Value="0" />
                        </Trigger>

                        <Trigger Property="Tolerance" Value="None">
                            <Setter TargetName="Path" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Tolerance" Value="Bad">
                            <Setter TargetName="Path" Property="Data" Value="{StaticResource ResMeasureErrorGeometry}" />
                            <Setter TargetName="Path" Property="Fill" Value="{x:Static controls:ToleranceDisplayer.BadColorBrush}" />
                            <Setter TargetName="Path" Property="ToolTip" Value="Bad" />
                        </Trigger>
                        <Trigger Property="Tolerance" Value="Warning">
                            <Setter TargetName="Path" Property="Data" Value="{StaticResource ResMeasureWarningGeometry}" />
                            <Setter TargetName="Path" Property="Fill" Value="{x:Static controls:ToleranceDisplayer.WarningColorBrush}" />
                            <Setter TargetName="Path" Property="ToolTip" Value="Warning" />
                        </Trigger>
                        <Trigger Property="Tolerance" Value="Good">
                            <Setter TargetName="Path" Property="Data" Value="{StaticResource ResMeasureSuccessedGeometry}" />
                            <Setter TargetName="Path" Property="Fill" Value="{x:Static controls:ToleranceDisplayer.GoodColorBrush}" />
                            <Setter TargetName="Path" Property="ToolTip" Value="Good" />
                        </Trigger>
                        <Trigger Property="Tolerance" Value="NotMeasured">
                            <Setter TargetName="Path" Property="Data" Value="{StaticResource ResNotMeasuredGeometry}" />
                            <Setter TargetName="Path" Property="Fill" Value="{x:Static controls:ToleranceDisplayer.NotMeasuredColorBrush}" />
                            <Setter TargetName="Path" Property="ToolTip" Value="Not Measured" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion ToleranceDisplayer-->

    <!--#region DataGrid-->
    <Style x:Key="DataGridHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Padding" Value="5 5" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Margin" Value="-1,0,0,0" />
    </Style>
    <!--#endregion DataGrid-->

    <!--#region Grid-->
    <Style TargetType="{x:Type Grid}" x:Key="FormGrid">
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="FontWeight" Value ="Bold" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="4" />
            </Style>
            <Style TargetType="ListBox">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="4" />
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="controls:AlphaNumericTextBox">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Height" Value="Auto"></Setter>
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="FontWeight" Value="Normal" />
                    </Style>
                </Style.Resources>
            </Style>
            <Style TargetType="PasswordBox">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="RadioButton">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="4" />
            </Style>
            <Style TargetType="xctk:IntegerUpDown" BasedOn="{StaticResource {x:Type xctk:IntegerUpDown}}">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Left" />
            </Style>
            <Style TargetType="xctk:DoubleUpDown" BasedOn="{StaticResource {x:Type xctk:DoubleUpDown}}">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Left" />
            </Style>
            <Style TargetType="controls:DoubleUpDownTicks">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Left" />
            </Style>
            <Style TargetType="xctk:DateTimePicker" BasedOn="{StaticResource {x:Type xctk:DateTimePicker}}">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextAlignment" Value="Left" />
                <Setter Property="Height" Value="Auto"></Setter>
            </Style>
            <Style TargetType ="DatePicker">
                <Setter Property="Margin" Value="4" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="Expander">
                <Setter Property="Margin" Value="4" />
            </Style>
            <Style TargetType="{x:Type xctk:DropDownButton}" BasedOn="{StaticResource {x:Type xctk:DropDownButton}}">
                <Setter Property="Margin"  Value="4"></Setter>
                <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>
                <Setter Property="Height" Value="Auto"></Setter>
            </Style>
        </Style.Resources>
    </Style>
    <!--#endregion Grid-->

    <!--#region TextSlider-->
    <Style x:Key="RegularTextSlider" TargetType="controls:TextSlider">
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="TickTextColor" Value="{StaticResource TextboxTextBrush}" />
    </Style>
    <!--#endregion TextSlider-->
    
    <!--#region Icon-->
    <Style x:Key="Icon" TargetType="{x:Type Image}">
        <Setter Property="Height" Value="18" />
        <Setter Property="Margin" Value="2,0" />
    </Style>
    <!--#endregion Icon-->

</ResourceDictionary>