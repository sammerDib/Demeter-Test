using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using UnitySCSharedAlgosOpenCVWrapper;

namespace SharedOpenCV.WrapperTests
{
    [TestClass]
    public class UnitTestDetectDies
    {
        /// <summary>
        /// Loads the files generated by the manual test `manual_draw_save_sublayout` in the OpenCV Nuget
        /// </summary>
        /// <param name="waferImgNoExt">Path to the wafer image without extension.</param>
        /// <returns>The dies to detect</returns>
        private static List<DieKindDetails> LoadDieDetails(string waferImgNoExt)
        {
            var theoreticalDies = new List<DieKindDetails>();
            var diePositions = new List<Point2i>();
            int dieKindIndex = 0;
            foreach (var line in File.ReadAllLines(waferImgNoExt + ".dies_positions"))
            {
                if (line == "#newDie")
                {
                    if (!diePositions.Any())
                    {
                        continue;
                    }

                    theoreticalDies.Add(new DieKindDetails()
                    {
                        ReferenceDie = Helpers.CreateImageDataFromFile(waferImgNoExt + $".refdie{dieKindIndex}.tif"),
                        theoreticalPositions = diePositions.ToArray(),
                    });
                    dieKindIndex++;
                    diePositions = new List<Point2i>();
                    continue;
                }

                string[] split = line.Split(';');
                string[] pos = split[0].Split(',');
                string[] size = split[1].Split('x');
                diePositions.Add(new Point2i(int.Parse(pos[0].Trim()),
                    int.Parse(pos[1].Trim())
                ));
            }

            theoreticalDies.Add(new DieKindDetails()
            {
                ReferenceDie = Helpers.CreateImageDataFromFile(waferImgNoExt + $".refdie{dieKindIndex}.tif"),
                theoreticalPositions = diePositions.ToArray(),
            });
            return theoreticalDies;
        }

        /// <summary>
        /// Saves the result of the flow, readable by the manual test `manual_draw_flow_results` in the OpenCV Nuget
        /// </summary>
        /// <param name="resFileName"></param>
        /// <param name="detected"></param>
        /// <param name="missing"></param>
        private static void SaveResults(string resFileName, List<DieResult> detected, List<MissingDie> missing)
        {
            using (var outputFile = new StreamWriter(resFileName))
            {
                foreach (var die in detected)
                {
                    outputFile.WriteLine($"DetectedDie(pos:{die.DetectedROI.X},{die.DetectedROI.Y};" +
                                         $"theo:{die.TheoreticalROI.X},{die.TheoreticalROI.Y};" +
                                         $"size:{die.DetectedROI.Width}x{die.DetectedROI.Height};" +
                                         $"angle:{die.AngleConfidence};" +
                                         $"pos_conf:{die.PosConfidence};" +
                                         $"angle_conf:{die.AngleConfidence};" +
                                         $"pass:{die.passNb})");
                }

                foreach (var die in missing)
                {
                    outputFile.WriteLine($"MissingDie(theo:{die.TheoreticalROI.X},{die.TheoreticalROI.Y};)");
                }
            }
        }

        const string IMG_PATH_NO_EXTENSION = @"<wafer image without extension>";

        const string IMG_EXTENSION = "tif";

        [TestMethod]
        [Ignore]
        public void manual_die_grid_detection()
        {
            var img_path = IMG_PATH_NO_EXTENSION + "." + IMG_EXTENSION;
            var detection_res = IMG_PATH_NO_EXTENSION + ".detected_positions";

            var waferImg = Helpers.CreateImageDataFromFile(img_path);
            var dies_layout = LoadDieDetails(IMG_PATH_NO_EXTENSION);

            var waferMask = new ImageData(waferImg.Width, waferImg.Height);
            waferMask.fill(255);

            int nbOfDownsamplingSteps = 2;
            double confidenceThreshold = 0.60;
            
            var detectedDies = new List<DieResult>();
            var missingDies = new List<MissingDie>();

            DieDetector.DetectDies(
                waferImg,
                waferMask,
                dies_layout.ToArray(),
                new DieDetectionSettings
                {
                    NbOfDownsamplingSteps = nbOfDownsamplingSteps,
                    Gamma = 0.7,
                    UseHighResolutionPrecision = false,
                    Pass1PositionConfidenceThreshold = confidenceThreshold,
                    Pass1AngleConfidenceThreshold = confidenceThreshold,
                    DieCallback = (detectedDie) =>
                    {
                        detectedDies.Add(detectedDie);
                    },
                    MissingDiesCallback = (missing) =>
                    {
                        missingDies.Add(missing);
                    },
                });

            SaveResults(detection_res, detectedDies, missingDies);
        }
    }
}
