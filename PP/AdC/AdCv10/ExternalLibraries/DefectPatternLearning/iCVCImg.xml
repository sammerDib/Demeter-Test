<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iCVCImg</name>
    </assembly>
    <members>
        <member name="T:Stemmer.Cvb.ImgLib">
            <summary>
            Internal class holding the method specifications and types for p/invoke.
            </summary>
        </member>
        <member name="T:Cvb.Image">
            <summary>
            Is used for opening and saving image files as well as for checking and 
            changing the image properties and for creating new ones and deleting
            old ones. 
            </summary>
        </member>
        <member name="M:Cvb.Image.ToCvbIMG(System.Int32)">
            <summary>
            Creates new IMG object from given integer.
            </summary><param name="obj">
            32 Bit integer to be converted to IMG object.
            </param><returns>
            New IMG object.
            </returns>
        </member>
        <member name="M:Cvb.Image.ToCvbIMG(Cvb.Image.OBJ)">
            <summary>
            Creates new IMG object from given OBJ object.
            </summary><param name="obj">
            3OBJ object.
            </param><returns>
            New IMG object.
            </returns>
        </member>
        <member name="M:Cvb.Image.ToCvbIMG(Cvb.Image.IMG)">
            <summary>
            Creates new IMG object from given IMG object.
            </summary><param name="obj">
            IMG object.
            </param><returns>
            New IMG object.
            </returns>
        </member>
        <member name="M:Cvb.Image.ToCvbOBJ(System.Int32)">
            <summary>
            Creates new OBJ object from given integer.
            </summary><param name="obj">
            32 Bit integer to be converted to OBJ object.
            </param><returns>
            New OBJ object.
            </returns>
        </member>
        <member name="M:Cvb.Image.ToCvbOBJ(Cvb.Image.OBJ)">
            <summary>
            Creates new OBJ object from given OBJ object.
            </summary><param name="obj">
            OBJ object.
            </param><returns>
            New OBJ object.
            </returns>
        </member>
        <member name="M:Cvb.Image.ToCvbOBJ(Cvb.Image.IMG)">
            <summary>
            Creates new OBJ object from given IMG object.
            </summary><param name="obj">
            IMG object.
            </param><returns>
            New OBJ object.
            </returns>
        </member>
        <member name="M:Cvb.Image.ToCvbOBJ(Cvb.Image.PIXELLIST)">
            <summary>
            Creates new OBJ object from given PIXELLIST object.
            </summary><param name="obj">
            PIXELLIST object.
            </param><returns>
            New OBJ object.
            </returns>
        </member>
        <member name="M:Cvb.Image.GetImageVPA(Cvb.Image.IMG,System.Int32,System.IntPtr@,System.IntPtr@)">
            <summary>
            Allows access to the virtual pixel access table (VPA). The VPA 
            tables allow read and write access to all pixels using the base 
            address, the tables for the offset of the lines, and the table for 
            the pixel offset within a line.
            It is possible to modify the tables because they are passed by 
            reference, however changes to the tables should be made with the 
            greatest caution as many other functions rely on them.
            </summary><param name="img">
            Image object handle.
            </param><param name="index">
            Image plane index in the range 0...ImageDimension(Img) - 1.
            </param><param name="pBase">
            Reference to variable to contain the address of the image plane 
            base pointer.
            </param><param name="addrVPAT">
            Reference to variable to contain the address of the VPA table for 
            specified plane.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.UpdateLicenses">
            <summary>
            Update the local license snapshot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.GetLicenseCount">
            <summary>
            Get the number of licenses available according to the current snapshot
            of the license state (use <seealso cref="M:Cvb.Image.UpdateLicenses"/> to update
            the snapshot).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.GetLicenseInfoEx(System.Int32,System.Int32@,System.Boolean@)">
            <summary>
            Get a license from the current snapshot  (use 
            <seealso cref="M:Cvb.Image.UpdateLicenses"/> to update the snapshot whenever it
            seems appropriate)
            </summary>
            <param name="index">index of the license to be accessed</param>
            <param name="serialNumber">serial number of the license</param>
            <param name="isFoundation">foundation license state</param>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.GetSerialNumber">
            <summary>
            Returns the serial number of the protection device, if no protection 
            device is attached the value 0 is returned.
            </summary><returns>
            Protection device Number.
            </returns>
        </member>
        <member name="M:Cvb.Image.GetLicenseInfo">
            <summary>
            Indicates whether Common Vision Blox has been licensed, the return 
            value indicates the type of protection device installed.
            </summary><returns>
            See TLicenseInfo.
            </returns>
        </member>
        <member name="M:Cvb.Image.UpdateLicensesDeep">
             <summary>
             UpdateLicensesDeep updates a snapshot of the full set of licensing 
             information currently provided by the Common Vision Blox License 
             infrastructure, also including Magic Number information. 
             
             Unlike UpdateLicenses, which just performs a quick query of the set of 
             currently available serial numbers, this call also updates the Magic 
             Number information.
             
             Please note that although both functions, 
             <see cref="M:Cvb.Image.UpdateLicensesDeep"/> and <see cref="M:Cvb.Image.UpdateLicenses"/>
             serve a similar purpose, a call to UpdateLicensesDeep can take 
             considerably more time to process than a call to 
             <see cref="M:Cvb.Image.UpdateLicenses"/> due to the higher amount of data that 
             needs to be transferred. This is because <see cref="M:Cvb.Image.UpdateLicenses"/>
             (together with <see cref="M:Cvb.Image.GetLicenseCount"/> plus 
             <see cref="M:Cvb.Image.GetLicenseInfoEx(System.Int32,System.Int32@,System.Boolean@)"/>) only updates a very limited set of 
             information and has been specifically tailored to being called 
             frequently (whenever the caller wants to verify that a dongle is is 
             still available).
             
             Apart from updating the Magic Number information, a call to 
             UpdateLicensesDeep has the same effect as <see cref="M:Cvb.Image.UpdateLicenses"/>, 
             i.e. it will also update the information returned by 
             <see cref="M:Cvb.Image.GetLicenseCount"/> and <see cref="M:Cvb.Image.GetLicenseInfoEx(System.Int32,System.Int32@,System.Boolean@)"/>.
            
             When to use <see cref="M:Cvb.Image.UpdateLicenses"/> and when to use 
             <see cref="M:Cvb.Image.UpdateLicensesDeep"/>? You are probably familiar with the 
             approach Common Vision Blox takes for licensing tools like e.g. Minos: 
             A Common Vision Blox serial number is paired with a Common Vision Blox 
             Magic Number, and during runtime the tool verifies - through an 
             undisclosed hashing algorithm - whether the serial number and the 
             Magic Number match, outputting a message and/or limiting its 
             functionality if they don't.
             
             The same approach may be used by programs using Common Vision Blox, 
             making use of the infrastructure provided by Common Vision Blox. All 
             you need in order to implement this is a hashing algorithm. Enter your 
             Magic Number into the License.ini file (e.g. through the Management 
             Console) under a tool ID chosen by you (make sure it doesn't collide 
             with one of the IDs that are already in use). When your tool 
             initializes, use the functions GetToolMagicNumberCount and 
             GetToolMagicNumber to query the available Magic Numbers for your 
             algorithm (note that there may be more than one of them available!) 
             and use GetLicenseCount and GetLicenseInfoEx to retrieve the set of 
             available serial numbers. Once you have gathered that data, check if 
             there is a match between one of the serial numbers and one of the 
             Magic Numbers, and if there is, memorize the serial number for which 
             the match was made. After that, whenever restricted functionality is 
             being called you can simply use <see cref="M:Cvb.Image.UpdateLicenses"/> and 
             <see cref="M:Cvb.Image.IsSerialNumberAvailable(System.Int32)"/> (both operate with only little 
             latency) to make sure that the license (dongle) with the matching 
             serial number is still present.
             </summary>
             <returns>0 or greater if the update was successful.</returns>
        </member>
        <member name="M:Cvb.Image.GetMagicNumber(System.Int32,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            Retrieve a Magic Number data set. The data GetMagicNumber works on may 
            be updated using the function <see cref="M:Cvb.Image.UpdateLicensesDeep"/>. The 
            available Magic Number count may be queried using 
            <see cref="M:Cvb.Image.GetMagicNumberCount"/>.
            </summary>
            <param name="index">Index of the Magic Number entry to be retrieved. 
            Must fall into the range 0 ... <see cref="M:Cvb.Image.GetMagicNumberCount"/>()-1.
            </param>
            <param name="providerName">String that receives the string identifying 
            the Magic Number provider from which this entry comes.</param>
            <param name="toolID">String that receives the tool ID string for this 
            Magic Number entry.</param>
            <param name="magicNumber">String that receives the Magic Number string 
            for this Magic Number entry</param>
            <param name="serialNumber">Serial number associated with this Magic 
            Number entry. For some Magic Number providers like the WIBU CodeMeter 
            keys it is possible to tell for which Common Vision Blox serial number 
            a Magic Number is intended - in that case the serial number matching 
            this Magic Number entry will be returned in the serialNumber
            parameter. In all other cases, the return value of serialNumber will
            be 0. </param>
            <returns>0 or greater if the operation was successful.</returns>
        </member>
        <member name="M:Cvb.Image.GetMagicNumberCount">
            <summary>
            Returns the total number of Magic Numbers currently availably on your 
            system. Individual Magic Numbers can be queried using the functions 
            listed under 'Related Topics'. The data GetMagicNumberCount works on 
            can be updated (e.g. when there is the possibility that the available
            set of Magic Numbers might have changed) using UpdateLicensesDeep. 
            For a more extensive description on the use case(s) of this function, 
            please refer to the documentation of <see cref="M:Cvb.Image.UpdateLicensesDeep"/>.
            </summary>
            <returns>The number of Magic Numbers currently available on this 
            system.</returns>
        </member>
        <member name="M:Cvb.Image.GetToolMagicNumber(System.String,System.Int32,System.String@,System.String@,System.Int32@)">
            <summary>
            Retrieve a Magic Number data set for a specific tool ID. 
            The data GetMagicNumber works on may 
            be updated using the function <see cref="M:Cvb.Image.UpdateLicensesDeep"/>. The 
            available Magic Number count may be queried using 
            <see cref="M:Cvb.Image.GetMagicNumberCount"/>.
            </summary>
            <param name="index">Index of the Magic Number entry to be retrieved. 
            Must fall into the range 0 ... <see cref="M:Cvb.Image.GetMagicNumberCount"/>()-1.
            </param>
            <param name="providerName">String that receives the string identifying 
            the Magic Number provider from which this entry comes.</param>
            <param name="toolID">Tool ID for which to query a Magic Number.
            </param>
            <param name="magicNumber">String that receives the Magic Number string 
            for this Magic Number entry</param>
            <param name="serialNumber">Serial number associated with this Magic 
            Number entry. For some Magic Number providers like the WIBU CodeMeter 
            keys it is possible to tell for which Common Vision Blox serial number 
            a Magic Number is intended - in that case the serial number matching 
            this Magic Number entry will be returned in the serialNumber
            parameter. In all other cases, the return value of serialNumber will
            be 0. </param>
            <returns>0 or greater if the update was successful.</returns>
        </member>
        <member name="M:Cvb.Image.GetToolMagicNumberCount(System.String)">
            <summary>
            Returns the total number of Magic Numbers 
            currently availably on your system for the given tool ID. The data 
            GetToolMagicNumberCount works on can be updated (e.g. when there is 
            the possibility that the available set of Magic Numbers might have 
            changed) using <see cref="M:Cvb.Image.UpdateLicensesDeep"/>. 
            </summary>
            <param name="toolID">Tool ID for which to query the number of 
            available Magic Numbers</param>
            <returns>The number of Magic Numbers currently available on this 
            system for the tool ID specified in the szToolID parameter.</returns>
        </member>
        <member name="M:Cvb.Image.IsSerialNumberAvailable(System.Int32)">
            <summary>
            Allows for a quick check if a given Common Vision Blox serial number 
            is (still) available on this system. Individual serial numbers can be 
            queried using the function <see cref="M:Cvb.Image.GetLicenseCount"/> and 
            <see cref="M:Cvb.Image.GetLicenseInfoEx(System.Int32,System.Int32@,System.Boolean@)"/>. The data IsSerialNumberAvailable works 
            on can be updated (e.g. when there is the possibility that the 
            available set of Magic Numbers might have changed) using 
            <see cref="M:Cvb.Image.UpdateLicenses"/> or (slower!) 
            <see cref="M:Cvb.Image.UpdateLicensesDeep"/>. 
            For a more extensive description on the use case(s) of this function, 
            please refer to the documentation of <see cref="M:Cvb.Image.UpdateLicenses"/> and 
            <see cref="M:Cvb.Image.UpdateLicensesDeep"/>.
            </summary>
            <param name="serialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.IsToolMagicNumberAvailable(System.String,System.Boolean)">
            <summary>
            Allows for a quick check if there is Magic Number information 
            available at all for the given tool ID. Individual Magic Numbers can
            be queried using the functions listed under 'Related Topics'. The data
            IsToolMagicNumberAvailable works on can be updated (e.g. when there is
            the possibility that the available set of Magic Numbers might have 
            changed) using <see cref="M:Cvb.Image.UpdateLicensesDeep"/>. 
            </summary>
            <param name="toolID">Tool ID for which to query the number of 
            available Magic Numbers.</param>
            <param name="ignoreSerial999">With this flag set to TRUE it is 
            possible to ignore those Magic Numbers that are intended for use with 
            the trial licenses. Those trial licenses are using the Common Vision 
            Blox serial number 999, and if the license infrastructure is running 
            properly, the Magic Numbers matching serial number 999 is always 
            present for those tools published by Stemmer Imaging, so it usually 
            makes sense to filter them out when trying to find out whether or not 
            a Magic Number for a specific tool has been entered/is available.
            </param>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.CreateMatrixTransformedImage(Cvb.Image.IMG,Cvb.Image.TMatrix,Cvb.Image.IMG@)">
            <summary>
            Creates a new output image based on a transformation of an input image 
            with Matrix. The coordinate system is also transformed.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Input image object handle.
            </param><param name="matrix">
            Transformation matrix.
            </param><param name="imgOut">
            Reference to variable to contain the output image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateAffineTransformedImage(Cvb.Image.IMG,Cvb.Image.TCoordinateMap,Cvb.Image.IMG@)">
            <summary>
            Creates a new output image based on a transformation of an input image 
            with a coordinate system. The coordinate system is also transformed.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Input image object handle.
            </param><param name="coordinateMap">
            Affine tranformation matrix.
            </param><param name="imgOut">
            Reference to variable to contain the output image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateAreaAffineTransformedImage(Cvb.Image.IMG,Cvb.Image.TCoordinateMap,Cvb.Image.TArea,Cvb.Image.IMG@)">
            <summary>
            Creates a new output image based on a transformation of an input image 
            with a coordinate system. The coordinate system is also transformed.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Input image object handle.
            </param><param name="coordinateMap">
            Affine transformation matrix.
            </param><param name="area">
            Area of image to transform.
            </param><param name="imgOut">
            Reference to variable to contain the output image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateMatrixTransformedImage(Cvb.Image.IMG,Cvb.Image.TMatrix,Cvb.SharedImg@)">
            <summary>
            Creates a new output image based on a transformation of an input image 
            with Matrix. The coordinate system is also transformed.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Input image object handle.
            </param><param name="matrix">
            Transformation matrix.
            </param><param name="imgOut">
            Reference to variable to contain the output image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateAffineTransformedImage(Cvb.Image.IMG,Cvb.Image.TCoordinateMap,Cvb.SharedImg@)">
            <summary>
            Creates a new output image based on a transformation of an input image 
            with a coordinate map. The coordinate system is also transformed.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Input image object handle.
            </param><param name="coordinateMap">
            Transformation matrix.
            </param><param name="imgOut">
            Reference to variable to contain the output image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateAreaAffineTransformedImage(Cvb.Image.IMG,Cvb.Image.TCoordinateMap,Cvb.Image.TArea,Cvb.SharedImg@)">
            <summary>
            Creates a new output image based on a transformation of an input image 
            with a coordinate map. The coordinate system is also transformed.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Input image object handle.
            </param><param name="coordinateMap">
            Transformation matrix.
            </param><param name="area">
            Area of image to transform.
            </param><param name="imgOut">
            Reference to variable to contain the output image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateMatrixTransformedImageEx(Cvb.Image.IMG,Cvb.Image.TMatrix,Cvb.Image.IMG@)">
            <summary>
            Creates a new output image based on a transformation of an input image 
            with Matrix. The coordinate system is NOT transformed.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Input image object handle.
            </param><param name="matrix">
            Transformation matrix.
            </param><param name="imgOut">
            Reference to variable to contain the output image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateMatrixTransformedImageEx(Cvb.Image.IMG,Cvb.Image.TMatrix,Cvb.SharedImg@)">
            <summary>
            Creates a new output image based on a transformation of an input image 
            with Matrix. The coordinate system is NOT transformed.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Input image object handle.
            </param><param name="matrix">
            Transformation matrix.
            </param><param name="imgOut">
            Reference to variable to contain the output image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateSubImage(Cvb.Image.IMG,Cvb.Image.TArea,Cvb.Image.IMG@)">
            <summary>
            Creates a new image with the dimensions of the smallest possible 
            rectangle enclosing the selected area of interest, the data in 
            the source image if copied.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Source image object handle.
            </param><param name="area">
            Area of interest.
            </param><param name="imgOut">
            Reference to variable to contain the output image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateSubImage(Cvb.Image.IMG,Cvb.Image.TArea,Cvb.SharedImg@)">
            <summary>
            Creates a new image with the dimensions of the smallest possible 
            rectangle enclosing the selected area of interest, the data in 
            the source image if copied.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="img">
            Source image object handle.
            </param><param name="area">
            Area of interest.
            </param><param name="imgOut">
            Reference to variable to contain the output image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreatePolarImage(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.Image.IMG@)">
            <summary>
            Transforms an image using the polar coordinates and generates an 
            output image.
            </summary><param name="img">
            Image object handle.
            </param><param name="cX">
            X coordinates of transformation center.
            </param><param name="cY">
            Y coordinates of transformation center.
            </param><param name="alpha0">
            Angle to define the start of polar image.
            </param><param name="rMin">
            Minimum radius of transformation.
            </param><param name="rMax">
            Maximum radius of transformation.
            </param><param name="imgOut">
            Reference to variable to contain a handle to the transformed image 
            object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreatePolarImage(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.SharedImg@)">
            <summary>
            Transforms an image using the polar coordinates and generates an 
            output image.
            </summary><param name="img">
            Image object handle.
            </param><param name="cX">
            X coordinates of transformation center.
            </param><param name="cY">
            Y coordinates of transformation center.
            </param><param name="alpha0">
            Angle to define the start of polar image.
            </param><param name="rMin">
            Minimum radius of transformation.
            </param><param name="rMax">
            Maximum radius of transformation.
            </param><param name="imgOut">
            Reference to variable to contain a handle to the transformed image esult =
            object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreatePolarImageEx(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.Image.IMG@)">
            <summary>
            Identical to CreatePolarImage except it is possible to specify the 
            radial angle of transformation. This can be used for transforming 
            either a wedge of less than 360 degrees, or transforming over 360 
            degrees to include a subtended fiducial.
            </summary><param name="img">
            Image object handle.
            </param><param name="cX">
            X coordinates of transformation center.
            </param><param name="cY">
            Y coordinates of transformation center.
            </param><param name="alpha0">
            Angle to define the start of polar image.
            </param><param name="alphaTotal">
            Total radial angle to transform.
            </param><param name="rMin">
            Minimum radius of transformation.
            </param><param name="rMax">
            Maximum radius of transformation.
            </param><param name="imgOut">
            Variable to contain a handle to the transformed image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreatePolarImageEx(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.SharedImg@)">
            <summary>
            Identical to CreatePolarImage except it is possible to specify the 
            radial angle of transformation. This can be used for transforming 
            either a wedge of less than 360 degrees, or transforming over 360 
            degrees to include a subtended fiducial.
            </summary><param name="img">
            Image object handle.
            </param><param name="cX">
            X coordinates of transformation center.
            </param><param name="cY">
            Y coordinates of transformation center.
            </param><param name="alpha0">
            Angle to define the start of polar image.
            </param><param name="alphaTotal">
            Total radial angle to transform.
            </param><param name="rMin">
            Minimum radius of transformation.
            </param><param name="rMax">
            Maximum radius of transformation.
            </param><param name="imgOut">
            Variable to contain a handle to the transformed image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateInversePolarImage(Cvb.Image.IMG,System.Double,System.Double,Cvb.Image.IMG@)">
            <summary>
            Calculates the inverse of the transformation performed by 
            <see cref="M:Cvb.Image.CreatePolarImage(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.Image.IMG@)"/> and 
            <see cref="M:Cvb.Image.CreatePolarImageEx(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.Image.IMG@)"/>. It transforms the content of a 
            rectangular image into a ring or partialring in an otherwise 
            uninitialized image.
            </summary>
            <param name="img">Image containing the data to be transformed.</param>
            <param name="alpha0">Start angle for the transformation in 
            degrees.</param>
            <param name="rMin">Minimum radius for the transformation.</param>
            <param name="imgOut">Image that receives the transformed data.</param>
            <returns>true if the function succeeded, false otherwise</returns>
        </member>
        <member name="M:Cvb.Image.CreateInversePolarImage(Cvb.Image.IMG,System.Double,System.Double,Cvb.SharedImg@)">
            <summary>
            Calculates the inverse of the transformation performed by 
            <see cref="M:Cvb.Image.CreatePolarImage(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.Image.IMG@)"/> and <see cref="M:Cvb.Image.CreatePolarImageEx(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.Image.IMG@)"/>. It
            transforms the content of a rectangular image into a ring or partial
            ring in an otherwise uninitialized image.
            </summary>
            <param name="img">Image containing the data to be transformed.</param>
            <param name="alpha0">Start angle for the transformation in 
            degrees.</param>
            <param name="rMin">Minimum radius for the transformation.</param>
            <param name="imgOut">Image that receives the transformed data.</param>
            <returns>true if the function succeeded, false otherwise</returns>
        </member>
        <member name="M:Cvb.Image.InversePolarTransform(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,Cvb.Image.IMG)">
            <summary>
            Calculates the inverse of the transformation performed by 
            <see cref="M:Cvb.Image.CreatePolarImage(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.Image.IMG@)"/> and <see cref="M:Cvb.Image.CreatePolarImageEx(Cvb.Image.IMG,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.Image.IMG@)"/>.
            </summary>
            <param name="src">Image containing the data to be transformed.</param>
            <param name="cx">x coordinate of transformation center.</param>
            <param name="cy">y coordinate of transformation center.</param>
            <param name="alpha0">Start angle for the transformation in 
            degrees.</param>
            <param name="rMin">Minimum radius for the transformation.</param>
            <param name="dst">Image that receives the transformed data.</param>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.Argument(System.Double,System.Double)">
            <summary>
            Returns the angle, in degrees, of the vector based on ADX and ADY. The 
            angle is calculated clockwise from the positive x-axis.
            </summary><param name="aDX">
            X coordinate of the distance describing the angle.
            </param><param name="aDY">
            Y coordinate of the distance describing the angle.
            </param><returns>
            The angle of the vector based o aDX and aDY.
            </returns>
        </member>
        <member name="M:Cvb.Image.SetArea(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Cvb.Image.TArea@)">
            <summary>
            Creates a TArea structure from 6 individual points i.e. a rectangle 
            with possible rotation.
            </summary><param name="x0">
            X coordinate of P0.
            </param><param name="y0">
            Y coordinate of P0.
            </param><param name="x1">
            X coordinate of P1.
            </param><param name="y1">
            Y coordinate of P1.
            </param><param name="x2">
            X coordinate of P2.
            </param><param name="y2">
            Y coordinate of P2.
            </param><param name="area">
            Reference to variable to contain the TArea structure.
            </param>
        </member>
        <member name="M:Cvb.Image.SetRectArea(System.Double,System.Double,System.Double,System.Double,Cvb.Image.TArea@)">
            <summary>
            Creates a TArea structure from 4 individual points i.e. a rectangle 
            with NO possible rotation.
            </summary><param name="left">
            Left coordinate of area.
            </param><param name="top">
            Top coordinate of area.
            </param><param name="right">
            Right coordinate of area.
            </param><param name="bottom">
            Bottom coordinate of area.
            </param><param name="area">
            Reference to variable to contain the TArea structure.
            </param>
        </member>
        <member name="M:Cvb.Image.SetMatrix(System.Double,System.Double,System.Double,System.Double,Cvb.Image.TMatrix@)">
            <summary>
            Creates a TMatrix structure from individual values.
            </summary><param name="b11">
            Top left element of matrix.
            </param><param name="b12">
            Top right element of matrix.
            </param><param name="b21">
            Bottom left element of matrix.
            </param><param name="b22">
            Bottom right element of matrix.
            </param><param name="matrix">
            Reference to variable to contain the TMatrix structure.
            </param>
        </member>
        <member name="M:Cvb.Image.MatrixDeterminant(Cvb.Image.TMatrix)">
            <summary>
            Calculates the determinant of the matrix m.
            </summary><param name="m">
            Matrix handle.
            </param><returns>
            Determinant of the matrix m.
            </returns>
        </member>
        <member name="M:Cvb.Image.InverseMatrix(Cvb.Image.TMatrix,Cvb.Image.TMatrix@)">
            <summary>
            Computes the inverse of matrix . 
            </summary><param name="m">
            Input matrix.
            </param><param name="mInverse">
            Reference to variable to contain inverse matrix.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.RotationMatrix(System.Double,Cvb.Image.TMatrix@)">
            <summary>
            Creates a rotation matrix from a provided angle in degrees.
            </summary><param name="angle">
            Rotation angle.
            </param><param name="m">
            Reference to variable to contain the rotation matrix.
            </param>
        </member>
        <member name="M:Cvb.Image.MultiplyMatrices(Cvb.Image.TMatrix,Cvb.Image.TMatrix,Cvb.Image.TMatrix@)">
            <summary>
            Multiply two matrices.
            </summary>
            <param name="lhs">left matrix for multiplication</param>
            <param name="rhs">right matrix for multiplication</param>
            <param name="res">resulting matrix</param>
        </member>
        <member name="M:Cvb.Image.MatrixRTransform(System.Double,System.Double,Cvb.Image.TMatrix,System.Double@,System.Double@)">
            <summary>
            Calculates the transformation for the input vector (Xin,Yin) based on 
            the matrix M. The result is written in Xout, Yout.
            </summary><param name="xIn">
            X coordinate of input vector.
            </param><param name="yIn">
            Y coordinate of input vector.
            </param><param name="m">
            Transform matrix.
            </param><param name="xOut">
            Reference to variable to contain X coordinate of output vector.
            </param><param name="yOut">
            Reference to variable to contain Y coordinate of output vector.
            </param>
        </member>
        <member name="M:Cvb.Image.MatrixITransform(System.Int32,System.Int32,Cvb.Image.TMatrix,System.Int32@,System.Int32@)">
            <summary>
            Identical to MatrixRTransform how it used but uses values.
            </summary><param name="xIn">
            X coordinate of input vector.
            </param><param name="yIn">
            Y coordinate of input vector.
            </param><param name="m">
            Transform matrix.
            </param><param name="xOut">
            Reference to variable to contain X coordinate of output vector.
            </param><param name="yOut">
            Reference to variable to contain Y coordinate of output vector.
            </param>
        </member>
        <member name="M:Cvb.Image.MatrixTransformArea(Cvb.Image.TArea,Cvb.Image.TMatrix,Cvb.Image.TArea@)">
            <summary>
            Performs a matrix transformation on an area and generates AreaOut, 
            each element of TArea is transformed.
            </summary><param name="areaIn">
            Input area.
            </param><param name="m">
            Transformation matrix.
            </param><param name="areaOut">
            Variable to contain the transformed area.
            </param>
        </member>
        <member name="M:Cvb.Image.CoordinateMapTransform(System.Double,System.Double,Cvb.Image.TCoordinateMap,System.Double@,System.Double@)">
            <summary>
            Transforms a coordinate point using the specified coordinate system. 
            </summary><param name="xI">
            X component of coordinate point.
            </param><param name="yI">
            Y component of coordinate point.
            </param><param name="cs">
            Coordinate system.
            </param><param name="xP">
            Reference to variable to contain X component of transformed point.
            </param><param name="yP">
            Reference to variable to contain Y component of transformed point.
            </param>
        </member>
        <member name="M:Cvb.Image.CoordinateMapInverseTransform(System.Double,System.Double,Cvb.Image.TCoordinateMap,System.Double@,System.Double@)">
            <summary>
            Inverse transformation of a coordinate point using the specified coordinate system.
            </summary><param name="xI">
            X component of coordinate point.
            </param><param name="yI">
            Y component of coordinate point.
            </param><param name="cs">
            Coordinate system.
            </param><param name="xP">
            Reference to variable to contain X component of transformed point.
            </param><param name="yP">
            Reference to variable to contain Y component of transformed point.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.InitCoordinateMap(Cvb.Image.TCoordinateMap@)">
            <summary>
            Initializes a coordinate system with its origin located in the upper 
            left corner (0,0) of the image with a standard matrix.
            </summary><param name="cm">
            Reference to CoordinateMap for initialisation.
            </param>
        </member>
        <member name="M:Cvb.Image.InverseCoordinateMap(Cvb.Image.TCoordinateMap,Cvb.Image.TCoordinateMap@)">
            <summary>
            Creates the transformation inverse to CSIn.
            </summary><param name="csIn">
            Input CoordinateMap.
            </param><param name="csOut">
            Reference to variable to contain the transformed CoordinateMap.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CoordinateMapTransformArea(Cvb.Image.TArea,Cvb.Image.TCoordinateMap,Cvb.Image.TArea@)">
            <summary>
            Transforms a TArea structure using the specified coordinate system, 
            each component of the structure is transformed. 
            </summary><param name="areaIn">
            TArea structure to be transformed.
            </param><param name="cs">
            Coordinate system.
            </param><param name="areaOut">
            Reference to variable to contain transformed TArea.
            </param>
        </member>
        <member name="M:Cvb.Image.CoordinateMapInverseTransformArea(Cvb.Image.TArea,Cvb.Image.TCoordinateMap,Cvb.Image.TArea@)">
            <summary>
            Inverse transformation of a TArea structure using the specified coordinate system.
            </summary><param name="areaIn">
            TArea structure to be transformed.
            </param><param name="cs">
            Coordinate system.
            </param><param name="areaOut">
            Reference to variable to contain transformed TArea.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.ComposeCoordinateMaps(Cvb.Image.TCoordinateMap,Cvb.Image.TCoordinateMap,Cvb.Image.TCoordinateMap@)">
            <summary>
            Computes a combination of two coordinate systems according to the 
            following formula: CSOut(X,Y) = CS2(CS1(X,Y))
            </summary><param name="cs1">
            First input coordinate system.
            </param><param name="cs2">
            Second input coordinate system.
            </param><param name="csOut">
            Reference to variable to contain resultant coordinate system.
            </param>
        </member>
        <member name="M:Cvb.Image.CoordinateMapIsTranslation(Cvb.Image.TCoordinateMap)">
            <summary>
            Confirms whether the coordinate system CS describes only a translation 
            of the origin and therefore represents a standard matrix.
            </summary><param name="cs">
            Coordinate system for inspection.
            </param><returns>
            True if Matrix is a standard matrix and describes a translation of 
            the origin; false if Matrix is NOT standard matrix.
            </returns>
        </member>
        <member name="M:Cvb.Image.BoundingRectangle(Cvb.Image.TArea,Cvb.Image.TCoordinateMap,Cvb.Image.TDRect@)">
            <summary>
            Calculates the smallest bounding rectangle for an Area taking the 
            coordinate system into consideration.
            Equivalent to calling the CoordinateMapTransformArea function followed 
            by determination of the smallest bounding rectangle of the target area.
            </summary><param name="area">
            Area defining P0..P2.
            </param><param name="cs">
            Coordinate system structure.
            </param><param name="outRect">
            Reference to variable to contain the bounding rectangle.
            </param>
        </member>
        <member name="M:Cvb.Image.ImageDimension(Cvb.Image.IMG)">
            <summary>
            Returns the number of planes in an image. 
            </summary><param name="img">
            Image object handle.
            </param><returns>
            Number of image planes.
            </returns>
        </member>
        <member name="M:Cvb.Image.ImageDatatype(Cvb.Image.IMG,System.Int32)">
            <summary>
            Returns the data type of the specified plane of an image.
            The number of bits/pixel relates only to a plane of the image.
            </summary><param name="img">
            Image object handle.
            </param><param name="index">
            Image plane index.
            </param><returns>
            Image datatype.
            </returns>
        </member>
        <member name="M:Cvb.Image.BytesPerPixel(System.Int32)">
            <summary>
            Gets the number of bytes a pixel with the given 
            <paramref name="dataType"/> occupies in memory.
            </summary><param name="dataType">
            Data type of the pixel.
            </param><returns>
            Number of bytes a pixel with the given <paramref name="dataType"/>
            occupies in memory.
            </returns>
        </member>
        <member name="M:Cvb.Image.BitsPerPixel(System.Int32)">
            <summary>
            Gets the number of value bits of the given 
            <paramref name="dataType"/>.
            </summary><param name="dataType">
            Data type of the pixel. 
            </param><returns>
            Number of bits which are used for the pixel value.
            </returns>
        </member>
        <member name="M:Cvb.Image.ImageWidth(Cvb.Image.IMG)">
            <summary>
            Returns the width of image in pixels.
            </summary><param name="img">
            Image object handle.
            </param><returns>
            Width of image in pixels.
            </returns>
        </member>
        <member name="M:Cvb.Image.ImageHeight(Cvb.Image.IMG)">
            <summary>
            Returns the height of an image in lines.
            </summary><param name="img">
            Image object handle.
            </param><returns>
            Height of image in lines.
            </returns>
        </member>
        <member name="M:Cvb.Image.MaxImageArea(Cvb.Image.IMG,Cvb.Image.TArea@)">
            <summary>
            Initializes a TArea variable with the image size.
            </summary><param name="img">
            Image object handle.
            </param><param name="area">
            Reference to variable to contain the image size.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.IsOverlayImage(Cvb.Image.IMG)">
            <summary>
            Checks whether the image is overlay capable. If an image is overlay 
            capable the least significat bit of the image data is reserved for 
            the overlay. The overlay is shown in blue.
            </summary><param name="img">
            Image object handle.
            </param><returns>
            True if image is overlay capable; false if image is NOT overlay 
            capable.
            </returns>
        </member>
        <member name="M:Cvb.Image.HasOverlay(Cvb.Image.IMG)">
            <summary>
            Checks for the presence of overlays in an image.
            </summary><param name="img">
            Image object handle.
            </param><returns>
            True if at least one overlay pixel is set; false if no overlay pixels 
            are set.
            </returns>
        </member>
        <member name="M:Cvb.Image.IsAll8Bit(Cvb.Image.IMG)">
            <summary>
            Checks whether all the image planes are 8 bit planes.
            </summary><param name="img">
            Image object handle.
            </param><returns>
            True if all planes are 8 bit; false othewise.
            </returns>
        </member>
        <member name="M:Cvb.Image.MapTo8Bit(Cvb.Image.IMG,System.Boolean,Cvb.Image.IMG@)">
            <summary>
            Generates an 8-bit image from a source image with more than 8 bit 
            planes. Generates a gain factor ranging from 0 to the maximum gray 
            value in the image, each pixel is multiplied by this factor. The 
            factor can be calculated jointly for all planes of an image, 
            CollectiveNormalization = TRUE, or separately for each plane 
            CollectiveNormalization = FALSE. 
            </summary><param name="img">
            Image object handle.
            </param><param name="collectiveNormalization">
            True if same gain is used for all planes; false if individual gain 
            is used for each plane.
            </param><param name="imgOut">
            Reference to variable to contain an 8 bit image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.MapTo8Bit(Cvb.Image.IMG,System.Boolean,Cvb.SharedImg@)">
            <summary>
            Generates an 8-bit image from a source image with more than 8 bit 
            planes. Generates a gain factor ranging from 0 to the maximum gray 
            value in the image, each pixel is multiplied by this factor. The 
            factor can be calculated jointly for all planes of an image, 
            CollectiveNormalization = TRUE, or separately for each plane 
            CollectiveNormalization = FALSE. 
            </summary><param name="img">
            Image object handle.
            </param><param name="collectiveNormalization">
            True if same gain is used for all planes; false if individual gain 
            is used for each plane.
            </param><param name="imgOut">
            Reference to variable to contain an 8 bit image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.PixelToImageCoordinates(Cvb.Image.IMG,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Transforms a pixel location, relative to the top left corner of the 
            image, without scaling or rotation into image coordinates. The image 
            coordinate system is taken into consideration when performing the 
            transformation.
            </summary><param name="img">
            Image object handle.
            </param><param name="xP">
            X component of pixel location.
            </param><param name="yP">
            Y component of pixel location
            </param><param name="xI">
            Reference to variable to contain X component of transformed point.
            </param><param name="yI">
            Reference to variable to contain Y component of transformed point.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.ImageToPixelCoordinates(Cvb.Image.IMG,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Transforms a pixel location relative to the origin of the image into 
            pixel coordinates. The image coordinate system is taken into 
            consideration when performing the transformation.
            </summary><param name="img">
            Image object handle.
            </param><param name="xI">
            X component of pixel location.
            </param><param name="yI">
            Y component of pixel location.
            </param><param name="xP">
            Reference to variable to contain X component of transformed pixel.
            </param><param name="yP">
            Reference to variable to contain Y component of transformed pixel.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.GetImageOrigin(Cvb.Image.IMG,System.Double@,System.Double@)">
            <summary>
            Returns the current origin of the coordinate system defined by an 
            image object. 
            </summary><param name="img">
            Image object handle.
            </param><param name="orgX">
            Reference to variable to contain the X component of the origin.
            </param><param name="orgY">
            Reference to variable to contain the Y component of the origin.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.SetImageOrigin(Cvb.Image.IMG,System.Double,System.Double)">
            <summary>
            Sets the image origin to the passed coordinates.
            </summary><param name="img">
            Image object handle.
            </param><param name="orgX">
            X component for new origin.
            </param><param name="orgY">
            Y component for new origin.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.GetImageCoordinates(Cvb.Image.IMG,Cvb.Image.TCoordinateMap@)">
            <summary>
            Returns the current coordinate system in use by an image object.
            </summary><param name="img">
            Image object handle.
            </param><param name="cs">
            Reference to variable to contain the current CS.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.SetImageCoordinates(Cvb.Image.IMG,Cvb.Image.TCoordinateMap)">
            <summary>
            Sets the image coordinate system to the passed coordinate system.
            </summary><param name="img">
            Image object handle.
            </param><param name="cs">
            Coordinate system.
            </param><returns>
            False on errror.
            </returns>
        </member>
        <member name="M:Cvb.Image.PixelToImage(Cvb.Image.IMG,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Identical to PixelToImageCoordinates but does NOT perform any error 
            checking on the image object. The image should be validated before 
            this function is called.
            </summary><param name="img">
            Image object handle.
            </param><param name="xP">
            X component of pixel location.
            </param><param name="yP">
            Y component of pixel location.
            </param><param name="xI">
            Reference to variable to contain X component of transformed point.
            </param><param name="yI">
            Reference to variable to contain Y component of transformed point.
            </param>
        </member>
        <member name="M:Cvb.Image.ImageToPixel(Cvb.Image.IMG,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Identical to ImageToPixelCoordinates but does NOT perform any error 
            checking on the image object. The image should be validated before 
            this function is called.
            </summary><param name="img">
            Image object handle.
            </param><param name="xI">
            X component of pixel location.
            </param><param name="yI">
            Y component of pixel location.
            </param><param name="xP">
            Reference to variable to contain X component of transformed pixel.
            </param><param name="yP">
            Reference to variable to contain Y component of transformed pixel.
            </param>
        </member>
        <member name="M:Cvb.Image.PixelAreaToImage(Cvb.Image.IMG,Cvb.Image.TArea,Cvb.Image.TArea@)">
            <summary>
            Performs the PixelToImageCoordinates function on all elements of a TArea structure.
            </summary><param name="img">
            Image object handle.
            </param><param name="pixelArea">
            TArea to transform.
            </param><param name="imageArea">
            Reference to variable to transformed TArea structure.
            </param>
        </member>
        <member name="M:Cvb.Image.ImageAreaToPixel(Cvb.Image.IMG,Cvb.Image.TArea,Cvb.Image.TArea@)">
            <summary>
            Performs the ImageToPixelCoordinates function on all elements of a 
            TArea structure.
            </summary><param name="img">
            Image object handle.
            </param><param name="imageArea">
            TArea to transform.
            </param><param name="pixelArea">
            Reference to variable to transformed TArea structure.
            </param>
        </member>
        <member name="M:Cvb.Image.GetPixel(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Allows individual pixel values to be read, however is it the slowest 
            way of accessing image data and has been implemented for the sake of 
            completeness.
            Reads the pixel from the image in the specified plane at the specified 
            position. The bit depth of the plane is unknown and therefore all bits 
            of the Long Value above the bit depth of the image should be set to 
            zero before the function is called.
            </summary><param name="img">
            Image object handle.
            </param><param name="index">
            Index of plane containing pixel.
            </param><param name="x">
            X position of pixel.
            </param><param name="y">
            Y position of pixel.
            </param><param name="val">
            Reference to variable to contain the pixel value.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.SetPixel(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Allows individual pixel values to be written, however is it the 
            slowest way of accessing image data and has been implemented for 
            the sake of completeness.
            Writes the pixel in the image in the specified plane at the specified 
            position. 
            </summary><param name="img">
            Image object handle.
            </param><param name="index">
            Index of plane containing pixel.
            </param><param name="x">
            X position of pixel.
            </param><param name="y">
            Y position of pixel.
            </param><param name="val">
            Pixel value.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.PixVal(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the gray scale value of the pixel from a specified location in a plane.
            </summary><param name="img">
            Image object handle.
            </param><param name="index">
            Image plane containing pixel.
            </param><param name="x">
            X coordinate of pixel.
            </param><param name="y">
            Y coordinate of pixel.
            </param><returns>
            Gray scale value of the pixel.
            </returns>
        </member>
        <member name="M:Cvb.Image.IsIUnknown(Cvb.Image.OBJ)">
            <summary>
            Verifies whether the passed object is an IUnkown object.
            </summary><param name="hnd">
            Object handle.
            </param><returns>
            True if Object supports IGrabber Interface; false if Object does NOT 
            support IUnknown Interface.
            </returns>
        </member>
        <member name="M:Cvb.Image.IsImage(Cvb.Image.OBJ)">
            <summary>
            Verifies whether the passed object supports the IImageVPA interface 
            and is therefore a CVB Image.
            </summary><param name="hnd">
            Object handle.
            </param><returns>
            True if object supports IImageVPA Interface; false if Object does NOT 
            support IImageVPA Interface.
            </returns>
        </member>
        <member name="M:Cvb.Image.IsGrabber(Cvb.Image.OBJ)">
            <summary>
            Verifies whether the passed object supports the IGrabber interface and 
            is therefore a framegrabber.
            </summary><param name="hnd">
            Object handle.
            </param><returns>
            True if Object supports IGrabber Interface; false if Object does NOT 
            support IGrabber Interface.
            </returns>
        </member>
        <member name="M:Cvb.Image.ReleaseObj(Cvb.Image.OBJ)">
            <summary>
            Release the given CVB <c>OBJ</c> <paramref name="handle"/>.
            </summary><remarks>
            Decreases the reference count by one.
            </remarks><param name="handle"></param><returns>
            <c>True</c> if reference counter reached zero; <c>False</c> if 
            reference <i>not</i> zero.
            </returns>
        </member>
        <member name="M:Cvb.Image.ReleaseObj(Cvb.SharedObj)">
            <summary>
            This overload of ReleaseObject is intended to prevent calls to 
            ReleaseObject with a SharedObj-derived parameter. ShareObj-derived
            entities should never be released explicitly as they do their lifetime
            management internally. Consequently, if this overload is called, it
            will emit an exception.
            If this overload was not provided, ReleaseObject would be called with
            the SharedObj being implicitly converted - a disastrous combination 
            that can be easily prevented by providing this overload.
            </summary>
            <param name="obj">invalid ShareObj parameter</param>
            <returns>Exception on all paths except if obj is null</returns>
        </member>
        <member name="M:Cvb.Image.ReleaseObject(Cvb.Image.OBJ@)">
            <summary>
            Releases an <code>OBJ</code>. 
            </summary><param name="hnd">
            Object handle.
            </param><returns>
            True if reference counter reached zero; false if reference NOT zero.
            </returns>
        </member>
        <member name="M:Cvb.Image.ReleaseObject(Cvb.Image.IMG@)">
            <summary>
            Releases an <c>IMG</c>. 
            </summary><param name="hnd">
            Image Object handle.
            </param><returns>
            True if reference counter reached zero; false if reference NOT zero.
            </returns>
        </member>
        <member name="M:Cvb.Image.ReleaseObject(Cvb.Image.PIXELLIST@)">
            <summary>
            Releases a <c>PIXELLIST</c>. 
            </summary><param name="hnd">
            Object handle.
            </param><returns>
            True if reference counter reached zero; false if reference NOT zero.
            </returns>
        </member>
        <member name="M:Cvb.Image.ReleaseImage(Cvb.Image.IMG)">
            <summary>
            Decrements the reference counter for an object. When the counter 
            reaches zero the object will be cleared automatically and all memory 
            deallocation is handled internally. 
            </summary><param name="img">
            Image handle.
            </param><returns>
            Value of the Reference counter.
            </returns>
        </member>
        <member name="M:Cvb.Image.ReleaseImage(Cvb.SharedObj)">
            <summary>
            Decrements the reference counter for an object. When the counter 
            reaches zero the object will be cleared automatically and all memory 
            deallocation is handled internally. 
            </summary><param name="obj">
            Image handle.
            </param><returns>
            Value of the Reference counter.
            </returns>
        </member>
        <member name="M:Cvb.Image.ShareObject(Cvb.Image.OBJ)">
            <summary>
            Increases reference count of an <code>OBJ</code>, i.e. a 
            <code>PIXELLIST</code>. For <code>IMG</code>es use ShareImage instead.
            </summary><param name="hnd">
            Object handle
            </param><returns>
            True if reference imcremented successfully; false if reference NOT 
            incremented.
            </returns>
        </member>
        <member name="M:Cvb.Image.ShareObject(Cvb.SharedObj)">
            <summary>
            Increases reference count of an <code>OBJ</code>, i.e. a 
            <code>PIXELLIST</code>. For <code>IMG</code>es use ShareImage instead.
            NEVER call this function on SharedObj derived entities!
            </summary><param name="obj">
            Object handle
            </param><returns>
            True if reference imcremented successfully; false if reference NOT 
            incremented.
            </returns>
        </member>
        <member name="M:Cvb.Image.ShareImage(Cvb.Image.IMG)">
            <summary>
            Increments the reference counter for an object. This function should be 
            called if image data is required for processing i.e. in a CVB tool. 
            When processing is complete ReleaseImage should be called to decrement 
            the reference counter, when the counter reaches 0 the image memory is 
            automatically deallocated.
            </summary><param name="img">
            Image handle.
            </param><returns>
            Value of Reference count.
            </returns>
        </member>
        <member name="M:Cvb.Image.RefCount(Cvb.Image.OBJ)">
            <summary>
            Returns the current value of the reference counter for an image object.
            </summary><param name="hnd">
            Object handle.
            </param><returns>
            Current reference count.
            </returns>
        </member>
        <member name="M:Cvb.Image.ReleaseIUnknown(Cvb.Image.OBJ)">
            <summary>
            Decrements the reference counter for an IUnknown object.
            </summary><param name="hnd">
            Object handle
            </param><returns>
            Value of reference counter.
            </returns>
        </member>
        <member name="M:Cvb.Image.LoadImageFile(System.String,Cvb.Image.IMG@)">
            <summary>
            Loads an image from a file using the given file name.
            </summary><param name="fileName">
            String containing file to load, including path.
            </param><param name="img">
            Reference to variable to contain an image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.LoadImageFile(System.String,Cvb.SharedImg@)">
            <summary>
            Loads an image from a file using the given file name.
            </summary><param name="fileName">
            String containing file to load, including path.
            </param><param name="img">
            Reference to variable to contain an image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.ImageToMemorySize(Cvb.Image.IMG)">
            <summary>
            Determines the memory size needed for temporary storage of an image 
            object. 
            </summary><param name="img">
            Image object handle.
            </param><returns>
            Memory requirements for image storage.
            </returns><exception cref="T:System.OverflowException">
            On a 64-bit platform, the value of this instance is too large or too 
            small to represent as a 32-bit signed integer. 
            </exception>
        </member>
        <member name="M:Cvb.Image.ImageToMemoryRawSize(Cvb.Image.IMG)">
            <summary>
            Determine the amount of memory needed for 
            <see cref="M:Cvb.Image.ImageToMemoryRaw(Cvb.Image.IMG,System.IntPtr,System.Int64,Cvb.Image.TRawFileLayout)"/>.
            </summary>
            <param name="img">Image to get the buffer size for.</param>
            <returns>Size of the buffer needed for all the pixels in \c img in 
            bytes.</returns>
        </member>
        <member name="M:Cvb.Image.ImageToMemoryRaw(Cvb.Image.IMG,System.IntPtr,System.Int64,Cvb.Image.TRawFileLayout)">
            <summary>
            Writes the raw pixel data of an image into the target buffer. The 
            buffer starts at pixel coordinate (0,0) and goes through the image 
            line by line. The treatment of multi planar images can be specified 
            using the \c layout parameter.
            
            Unlike the related function <see cref="M:Cvb.Image.ImageToMemory(Cvb.Image.IMG,System.IntPtr,System.Int32)"/> this function 
            will not dump a (recoverable) object structure into the designated 
            block of memory; it will instead only dump the actual pixel data 
            currently inside the image which may then be used for any purpose 
            outside Common Vision Blox.
            
            This function only copies images where all planes have the same data 
            type, the data type itself however may be anything supported by CVB.
            </summary>
            <param name="img">Image to be copied.</param>
            <param name="pMem">Pointer to the memory to copy the image to.</param>
            <param name="capacity">Number of bytes to copy. If the number of bytes 
            to copy is less than the output of <see cref="M:Cvb.Image.ImageToMemoryRawSize(Cvb.Image.IMG)"/>, 
            then only the number of bytes specified by \c capacity will actually 
            be copied and no error will be returned.</param>
            <param name="layout">Specifies how multi planar images are treated.
            </param>
            <returns>True if the operation succeeded, False otherwise.</returns>
        </member>
        <member name="M:Cvb.Image.ImageToMemorySize(Cvb.Image.IMG,System.Int64@)">
            <summary>
            Determines the memory size needed for temporary storage of an image 
            object. 
            </summary><param name="img">
            Image object handle.
            </param><param name="size">
            Memory requirements for image storage.
            </param>
        </member>
        <member name="M:Cvb.Image.ImageToMemory(Cvb.Image.IMG,System.IntPtr,System.Int32)">
            <summary>
            Copies an image object to user defined memory, all data of the image 
            object including the coordinate system is copied. The required memory 
            size must be determined with ImageToMemorySize.
            </summary><param name="img">
            Image object handle.
            </param><param name="memory">
            Pointer to allocated memory.
            </param><param name="capacity">
            Size of maximum writable memory size, determined by ImageToMemory.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.ImageToMemory(Cvb.Image.IMG,System.IntPtr,System.Int64)">
            <summary>
            Copies an image object to user defined memory, all data of the image 
            object including the coordinate system is copied. The required memory 
            size must be determined with ImageToMemorySize.
            </summary><param name="img">
            Image object handle.
            </param><param name="memory">
            Pointer to allocated memory.
            </param><param name="capacity">
            Size of maximum writable memory size, determined by ImageToMemory.
            </param><returns>
            False on error.
            </returns><exception cref="T:System.OverflowException">
            On a 32-bit platform, value is too large or too small to represent as 
            an <c>IntPtr</c>. 
            </exception>
        </member>
        <member name="M:Cvb.Image.MemoryToImage(System.IntPtr,System.Int32,Cvb.Image.IMG@)">
            <summary>
            Creates an image object from memory created with ImageToMemory.
            </summary><param name="memory">
            Pointer to allocated memory.
            </param><param name="capacity">
            Size of maximum writable memory size, determined by ImageToMemory.
            </param><param name="img">
            Reference to variable to contain image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.MemoryToImage(System.IntPtr,System.Int32,Cvb.SharedImg@)">
            <summary>
            Creates an image object from memory created with ImageToMemory.
            </summary><param name="memory">
            Pointer to allocated memory.
            </param><param name="capacity">
            Size of maximum writable memory size, determined by ImageToMemory.
            </param><param name="img">
            Reference to variable to contain image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.MemoryToImage(System.IntPtr,System.Int64,Cvb.Image.IMG@)">
            <summary>
            Creates an image object from memory created with ImageToMemory.
            </summary><param name="memory">
            Pointer to allocated memory.
            </param><param name="capacity">
            Size of maximum writable memory size, determined by ImageToMemory.
            </param><param name="img">
            Reference to variable to contain image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.MemoryToImage(System.IntPtr,System.Int64,Cvb.SharedImg@)">
            <summary>
            Creates an image object from memory created with ImageToMemory.
            </summary><param name="memory">
            Pointer to allocated memory.
            </param><param name="capacity">
            Size of maximum writable memory size, determined by ImageToMemory.
            </param><param name="img">
            Reference to variable to contain image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.PasteClipboardImage(System.IntPtr,Cvb.Image.IMG@)">
            <summary>
            Generates an image object from any image stored in the clipboard.
            </summary><param name="winHnd">
            Application Windows handle.
            </param><param name="img">
            Reference to variable to contain image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.PasteClipboardImage(System.IntPtr,Cvb.SharedImg@)">
            <summary>
            Generates an image object from any image stored in the clipboard.
            </summary><param name="winHnd">
            Application Windows handle.
            </param><param name="img">
            Reference to variable to contain image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.WriteImageFile(Cvb.Image.IMG,System.String)">
            <summary>
            Saves an image to a file using the given file name.
            </summary><param name="img">
            Image object handle.
            </param><param name="fileName">
            String containing file to save, including path.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.WriteLossyImageFile(Cvb.Image.IMG,System.Double,System.String)">
            <summary>
            Saves an image to a file using the given file name, applying a lossy 
            compression codec. See Supported File Formats in online documentation.
            </summary><param name="img">
            Image object handle.
            </param><param name="quality">
            Controls the balance between the quality and the compression ratio.
            </param><param name="fileName">
            <code>String</code> containing file to save, including path.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CopyImageClipboard(Cvb.Image.IMG,System.IntPtr)">
            <summary>
            Copies the passed image to the clipboard.
            </summary><param name="img">
            Image object handle.
            </param><param name="winHnd">
            Application Windows handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateDuplicateImage(Cvb.Image.IMG,Cvb.Image.IMG@)">
            <summary>
            Creates a duplicate of the source image with the same dimensions, 
            datatype and number of planes. All data of the source image is copied.
            </summary><param name="inImg">
            Source image object handle.
            </param><param name="outImg">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateDuplicateImage(Cvb.Image.IMG,Cvb.SharedImg@)">
            <summary>
            Creates a duplicate of the source image with the same dimensions, 
            datatype and number of planes. All data of the source image is copied.
            </summary><param name="inImg">
            Source image object handle.
            </param><param name="outImg">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateDuplicateImageEx(Cvb.Image.IMG,Cvb.Image.IMG@)">
            <summary>
            Creates a duplicate of the source image with the same dimensions, 
            datatype and number of planes. All data of the source image is copied.
            Unlike <see cref="M:Cvb.Image.CreateDuplicateImage(Cvb.Image.IMG,Cvb.Image.IMG@)"/>, which always runs through
            the VPAT in the source and destination image, this function analyzes
            the memory layout of the source image and picks the most suitable
            copy approach. Memory layout will therefore be linearized just as 
            with <see cref="M:Cvb.Image.CreateDuplicateImage(Cvb.Image.IMG,Cvb.Image.IMG@)"/>, but unlike the results of
            <see cref="M:Cvb.Image.CreateDuplicateImage(Cvb.Image.IMG,Cvb.Image.IMG@)"/> the output images from this 
            function will not be arranged bottom-up.
            </summary><param name="inImg">
            Source image object handle.
            </param><param name="outImg">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateDuplicateImageEx(Cvb.Image.IMG,Cvb.SharedImg@)">
            <summary>
            Creates a duplicate of the source image with the same dimensions, 
            datatype and number of planes. All data of the source image is copied.
            Unlike <see cref="M:Cvb.Image.CreateDuplicateImage(Cvb.Image.IMG,Cvb.Image.IMG@)"/>, which always runs through
            the VPAT in the source and destination image, this function analyzes
            the memory layout of the source image and picks the most suitable
            copy approach. Memory layout will therefore be linearized just as 
            with <see cref="M:Cvb.Image.CreateDuplicateImage(Cvb.Image.IMG,Cvb.Image.IMG@)"/>, but unlike the results of
            <see cref="M:Cvb.Image.CreateDuplicateImage(Cvb.Image.IMG,Cvb.Image.IMG@)"/> the output images from this 
            function will not be arranged bottom-up.
            </summary><param name="inImg">
            Source image object handle.
            </param><param name="outImg">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateOverlayImage(Cvb.Image.IMG,Cvb.Image.IMG@)">
            <summary>
            Creates a copy of an overlay capable source image. The lowest bit of 
            the image data is set to zero. If an image is overlay capable the 
            least significant bit of the image data is reserved for the overlay. 
            The overlay is shown in blue.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="inImg">
            Source image object handle.
            </param><param name="outImg">
            Reference to variable to contain output image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateOverlayImage(Cvb.Image.IMG,Cvb.SharedImg@)">
            <summary>
            Creates a copy of an overlay capable source image. The lowest bit of 
            the image data is set to zero. If an image is overlay capable the 
            least significant bit of the image data is reserved for the overlay. 
            The overlay is shown in blue.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="inImg">
            Source image object handle.
            </param><param name="outImg">
            Reference to variable to contain output image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateNonOverlayImage(Cvb.Image.IMG,Cvb.Image.IMG@)">
            <summary>
            Creates a copy of an overlay capable source image that is no longer 
            overlay capable. The lowest bits of the output image data will be set 
            to zero.
            </summary>
            <param name="inImg">Object handle of the source image.</param>
            <param name="outImg">Receives the handle of the output image.</param>
            <returns><c>TRUE</c> if successful, <c>FALSE</c> otherwise.</returns>
        </member>
        <member name="M:Cvb.Image.CreateNonOverlayImage(Cvb.Image.IMG,Cvb.SharedImg@)">
            <summary>
            Creates a copy of an overlay capable source image that is no longer 
            overlay capable. The lowest bits of the output image data will be set 
            to zero.
            </summary>
            <param name="inImg">Object handle of the source image.</param>
            <param name="outImg">Receives the handle of the output image.</param>
            <returns><c>TRUE</c> if successful, <c>FALSE</c> otherwise.</returns>
        </member>
        <member name="M:Cvb.Image.CreateImageInsertList(Cvb.Image.IMG,Cvb.Image.IMG,System.Int32,System.Boolean,System.Boolean,Cvb.Image.IMG@)">
            <summary>
            Pastes the image planes of a source image into a destination image. 
            The planes are inserted starting at Index.
            </summary><param name="i1">
            Source image object handle.
            </param><param name="i2">
            Image object handle to be pasted into I1.
            </param><param name="index">
            Start plane for insertion.
            </param><param name="share">
            Defines memory allocation mode:
            True if memory of the source images is used for the target image, this 
            mode often works faster; false if memory is allocated for the new 
            image.    
            </param><param name="intersect">
            Defines coordinate system mode:
            True if target image has a dimension that results from overlapping the 
            images taking their coordinate systems into consideration; false if
            target image has the same dimension and coordinate system as I1.
            </param><param name="img">
            Reference to variable to contain the new image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageInsertList(Cvb.Image.IMG,Cvb.Image.IMG,System.Int32,System.Boolean,System.Boolean,Cvb.SharedImg@)">
            <summary>
            Pastes the image planes of a source image into a destination image. 
            The planes are inserted starting at Index.
            </summary><param name="i1">
            Source image object handle.
            </param><param name="i2">
            Image object handle to be pasted into I1.
            </param><param name="index">
            Start plane for insertion.
            </param><param name="share">
            Defines memory allocation mode:
            True if memory of the source images is used for the target image, this 
            mode often works faster; false if memory is allocated for the new 
            image.    
            </param><param name="intersect">
            Defines coordinate system mode:
            True if target image has a dimension that results from overlapping the 
            images taking their coordinate systems into consideration; false if
            target image has the same dimension and coordinate system as I1.
            </param><param name="img">
            Reference to variable to contain the new image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageDeleteList(Cvb.Image.IMG,System.Int32,System.Int32,System.Boolean,Cvb.Image.IMG@)">
            <summary>
            Deletes the specified number of planes of the input image. The planes 
            are deleted starting at Index and a new image is created. This function has the 
            opposite functionality of CreateImageSubList.
            </summary><param name="inImg">
            Image object handle.
            </param><param name="index">
            First plane for deletion. 
            </param><param name="count">
            Number of planes to delete.
            </param><param name="share">
            Defines memory allocation mode:
            True if memory of the source images is used for the target image, this 
            mode often works faster; false if memory is allocated for the new image.
            </param><param name="outImg">
            Reference to variable to contain the new image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageDeleteList(Cvb.Image.IMG,System.Int32,System.Int32,System.Boolean,Cvb.SharedImg@)">
            <summary>
            Deletes the specified number of planes of the input image. The planes 
            are deleted starting at Index and a new image is created. This function has the 
            opposite functionality of CreateImageSubList.
            </summary><param name="inImg">
            Image object handle.
            </param><param name="index">
            First plane for deletion. 
            </param><param name="count">
            Number of planes to delete.
            </param><param name="share">
            Defines memory allocation mode:
            True if memory of the source images is used for the target image, this 
            mode often works faster; false if memory is allocated for the new image.
            </param><param name="outImg">
            Reference to variable to contain the new image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageSubList(Cvb.Image.IMG,System.Int32,System.Int32,System.Boolean,Cvb.Image.IMG@)">
            <summary>
            Keeps the specified number of planes of the input image. The planes 
            are kept starting at Index and a new image is created. This function has the 
            opposite functionality of CreateImageDeleteList.
            </summary><param name="inImg">
            Image object handle.
            </param><param name="index">
            First plane to keep.
            </param><param name="count">
            Number of planes to keep.
            </param><param name="share">
            Defines memory allocation mode:
            True if memory of the source images is used for the target image, this 
            mode often works faster; false if memory is allocated for the new 
            image.
            </param><param name="outImg">
            Reference to variable to contain the new image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageSubList(Cvb.Image.IMG,System.Int32,System.Int32,System.Boolean,Cvb.SharedImg@)">
            <summary>
            Keeps the specified number of planes of the input image. The planes 
            are kept starting at Index and a new image is created. This function has the 
            opposite functionality of CreateImageDeleteList.
            </summary><param name="inImg">
            Image object handle.
            </param><param name="index">
            First plane to keep.
            </param><param name="count">
            Number of planes to keep.
            </param><param name="share">
            Defines memory allocation mode:
            True if memory of the source images is used for the target image, this 
            mode often works faster; false if memory is allocated for the new 
            image.
            </param><param name="outImg">
            Reference to variable to contain the new image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.ImageToDC(Cvb.Image.IMG,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Copies an image data from an image object to a Windows device context.
            </summary><param name="img">
            Image object handle.
            </param><param name="dc">
            Windows device context to copy to.
            </param><param name="left">
            Target left edge.
            </param><param name="top">
            Target top edge.
            </param><param name="sourceLeft">
            Left edge of source image.
            </param><param name="sourceTop">
            Top edge of source image.
            </param><param name="sourceRight">
            Right edge of source image.
            </param><param name="sourceBottom">
            Bottom edge of source imagehandle.
            </param><param name="targetWidth">
            Target image width.
            </param><param name="targetHeight">
            Target image height.
            </param><param name="redPage">
            For a multichannel image, specify which channel should be shown in red 
            in the RedPage parameter. If a channel is to be displayed as gray 
            scale RedPage should be given the index of the channel.
            </param><param name="greenPage">
            For a multichannel image, specify which channel should be shown in 
            green in the GreenPage parameter. If a channel is to be displayed as 
            gray scale GreenPage should be given the index of the channel.
            </param><param name="bluePage">
            For a multichannel image, specify which channel should be shown in 
            blue in the BluePage parameter. If a channel is to be displayed as 
            gray scale BluePage should be given the index of the channel.
            </param><param name="gain">
            Gain and offset control the contrast and brightness of the displayed 
            image, to display true colors set these parameters to Offset = 0 and 
            Gain = 1.0.
            </param><param name="offset">
            Gain and offset control the contrast and brightness of the displayed 
            image, to display true colors set these parameters to Offset = 0 and 
            Gain = 1.0.
            </param>
        </member>
        <member name="M:Cvb.Image.ImageToDCEx(Cvb.Image.IMG,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,Cvb.Image.TDisplayScaleMode)">
            <summary>
            Copies an image data from an image object to a Windows device context.
            </summary><param name="img">
            Image object handle.
            </param><param name="dc">
            Windows device context to copy to.
            </param><param name="left">
            Target left edge.
            </param><param name="top">
            Target top edge.
            </param><param name="sourceLeft">
            Left edge of source image.
            </param><param name="sourceTop">
            Top edge of source image.
            </param><param name="sourceRight">
            Right edge of source image.
            </param><param name="sourceBottom">
            Bottom edge of source imagehandle.
            </param><param name="targetWidth">
            Target image width.
            </param><param name="targetHeight">
            Target image height.
            </param><param name="redPage">
            For a multichannel image, specify which channel should be shown in red 
            in the RedPage parameter. If a channel is to be displayed as gray 
            scale RedPage should be given the index of the channel.
            </param><param name="greenPage">
            For a multichannel image, specify which channel should be shown in 
            green in the GreenPage parameter. If a channel is to be displayed as 
            gray scale GreenPage should be given the index of the channel.
            </param><param name="bluePage">
            For a multichannel image, specify which channel should be shown in 
            blue in the BluePage parameter. If a channel is to be displayed as 
            gray scale BluePage should be given the index of the channel.
            </param><param name="gain">
            Gain and offset control the contrast and brightness of the displayed 
            image, to display true colors set these parameters to Offset = 0 and 
            Gain = 1.0.
            </param><param name="offset">
            Gain and offset control the contrast and brightness of the displayed 
            image, to display true colors set these parameters to Offset = 0 and 
            Gain = 1.0.
            </param>
            <param name="mode">mode to use for scaling high bit images to the 
            display's 8 bit gray scale mode</param>
        </member>
        <member name="M:Cvb.Image.CreateCompatibleImage(Cvb.Image.IMG,System.Int32,System.Int32,System.Boolean,Cvb.Image.IMG@)">
            <summary>
            Generates a new image of the same datatype and depth as the source 
            image but with specified dimensions, it is also possible to specify 
            the image to be overlay capable.
            Once Image is no longer needed ReleaseImage must be called to 
            decrement the image reference counter. 
            </summary><param name="inImg">
            Source image object handle.
            </param><param name="aWidth">
            Destination image width.
            </param><param name="aHeight">
            Destination image height.
            </param><param name="forceOverlay">
            Overlay capable state.
            </param><param name="outImg">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateCompatibleImage(Cvb.Image.IMG,System.Int32,System.Int32,System.Boolean,Cvb.SharedImg@)">
            <summary>
            Generates a new image of the same datatype and depth as the source 
            image but with specified dimensions, it is also possible to specify 
            the image to be overlay capable.
            Once Image is no longer needed ReleaseImage must be called to 
            decrement the image reference counter. 
            </summary><param name="inImg">
            Source image object handle.
            </param><param name="aWidth">
            Destination image width.
            </param><param name="aHeight">
            Destination image height.
            </param><param name="forceOverlay">
            Overlay capable state.
            </param><param name="outImg">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateGenericImage(System.Int32,System.Int32,System.Int32,System.Boolean,Cvb.Image.IMG@)">
            <summary>
            Creates a new, uninitialized image. Each one of the number of specified 
            planes has 8-bit data, the width, height and overlay capable status are 
            all as defined.
            </summary><param name="aDimension">
            Number of planes required.
            </param><param name="aWidth">
            Destination image width.
            </param><param name="aHeight">
            Destination image height.
            </param><param name="forceOverlay">
            Overlay capable state.
            </param><param name="img">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateGenericImage(System.Int32,System.Int32,System.Int32,System.Boolean,Cvb.SharedImg@)">
            <summary>
            Creates a new, uninitialized image. Each one of the number of specified 
            planes has 8-bit data, the width, height and overlay capable status are 
            all as defined.
            </summary><param name="aDimension">
            Number of planes required.
            </param><param name="aWidth">
            Destination image width.
            </param><param name="aHeight">
            Destination image height.
            </param><param name="forceOverlay">
            Overlay capable state.
            </param><param name="img">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateGenericImageDT(System.Int32,System.Int32,System.Int32,System.Int32,Cvb.Image.IMG@)">
            <summary>
            Identical to CreateGenericImage except that it is possible to define 
            the datatype of each plane, and it is not possible to force the 
            overlay capable status.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter. 
            </summary><param name="aDimension">
            Number of planes required.
            </param><param name="aWidth">
            Destination image width.
            </param><param name="aHeight">
            Destination image height.
            </param><param name="datatype">
            Destination image datatype.
            </param><param name="img">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateGenericImageDT(System.Int32,System.Int32,System.Int32,System.Int32,Cvb.SharedImg@)">
            <summary>
            Identical to CreateGenericImage except that it is possible to define 
            the datatype of each plane, and it is not possible to force the 
            overlay capable status.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter. 
            </summary><param name="aDimension">
            Number of planes required.
            </param><param name="aWidth">
            Destination image width.
            </param><param name="aHeight">
            Destination image height.
            </param><param name="datatype">
            Destination image datatype.
            </param><param name="img">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CopyOverlay(Cvb.Image.IMG,Cvb.Image.IMG)">
            <summary>
            Copies the overlay from a source image to a destination image. Both 
            images must be overlay capable. 
            </summary><param name="imgSource">
            Source image object handle.
            </param><param name="imgTarget">
            Destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.ImageHistogram(Cvb.Image.IMG,System.Int32,System.Int32,Cvb.Image.TArea,System.Int32[])">
            <summary>
            Calculates the histogram of an area of interest of an image. The 
            processing uses the plane index and density. This function only 
            supports 8-bit data.
            </summary><param name="img">
            Image object handle.
            </param><param name="index">
            Image plane to process.
            </param><param name="density">
            Processing density from 0 to 1000.
            </param><param name="area">
            Area of interest to process.
            </param><param name="histogram">
            Integer array (dimension 256) to contain histogram results. 
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateNormalizedImage(Cvb.Image.IMG,Cvb.Image.TNormalizeMode,System.Double,System.Double,Cvb.Image.IMG@)">
            <summary>
            Creates a normalized 8-bit gray scale image. Using the Mode parameter 
            you can select one of two possible procedures.
            </summary><param name="inImg">
            Image object handle.
            </param><param name="mode">
            TNormalizeMode mode of operation.
            </param><param name="targetMeanMin">
            First function parameter.
            </param><param name="targetVarianceMax">
            Second function parameter.
            </param><param name="outImg">
            Reference to variable to contain the output image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateNormalizedImage(Cvb.Image.IMG,Cvb.Image.TNormalizeMode,System.Double,System.Double,Cvb.SharedImg@)">
            <summary>
            Creates a normalized 8-bit gray scale image. Using the Mode parameter 
            you can select one of two possible procedures.
            </summary><param name="inImg">
            Image object handle.
            </param><param name="mode">
            TNormalizeMode mode of operation.
            </param><param name="targetMeanMin">
            First function parameter.
            </param><param name="targetVarianceMax">
            Second function parameter.
            </param><param name="outImg">
            Reference to variable to contain the output image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateMeanVarianceImage(Cvb.Image.IMG,Cvb.Image.IMG@,Cvb.Image.IMG@)">
            <summary>
            Creates two new single plane images from a multichannel source image. 
            One image contains the mean image and the other the variance image 
            over all planes. 
            </summary><param name="img">
            Multiplane image object handle.
            </param><param name="imgMean">
            Reference to variable to contain a handle to a Mean image object.
            </param><param name="imgVariance">
            Reference to variable to contain a handle to a Variance image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateMeanVarianceImage(Cvb.Image.IMG,Cvb.SharedImg@,Cvb.SharedImg@)">
            <summary>
            Creates two new single plane images from a multichannel source image. 
            One image contains the mean image and the other the variance image 
            over all planes. 
            </summary><param name="img">
            Multiplane image object handle.
            </param><param name="imgMean">
            Reference to variable to contain a handle to a Mean image object.
            </param><param name="imgVariance">
            Reference to variable to contain a handle to a Variance image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateMinMaxImage(Cvb.Image.IMG,Cvb.Image.IMG@,Cvb.Image.IMG@)">
            <summary>
            Creates two new single plane images from a multichannel source image. 
            One image contains the minimum image and the other the maximum image 
            over all planes.
            </summary><param name="img">
            Multiplane image object handle.
            </param><param name="imgMin">
            Reference to variable to contain a handle to a Minimum image object.
            </param><param name="imgMax">
            Reference to variable to contain a handle to a Maximum image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateMinMaxImage(Cvb.Image.IMG,Cvb.SharedImg@,Cvb.SharedImg@)">
            <summary>
            Creates two new single plane images from a multichannel source image. 
            One image contains the minimum image and the other the maximum image 
            over all planes.
            </summary><param name="img">
            Multiplane image object handle.
            </param><param name="imgMin">
            Reference to variable to contain a handle to a Minimum image object.
            </param><param name="imgMax">
            Reference to variable to contain a handle to a Maximum image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateLinearCombinationImage(Cvb.Image.IMG,System.Boolean,System.IntPtr,Cvb.Image.IMG@)">
            <summary>
            Creates a linear combination image of the planes given in inImg 
            weighted by the coefficients array.
            </summary><param name="sourceImg">
            Image object handle.
            </param><param name="reflect">
            Defines behaviour in case of buffer overflow:
            True if in case of buffer overflow the value becomes 0; false if it 
            should stay on maximum value.
            </param><param name="coefficients">
            Pointer to array of doubles (dimension: # of planes). Every index 
            contains the weight for the asociated plane. Coefficients range from
            0.0 to 1.0.
            </param><param name="targetImg">
            Reference to variable to contain a handle to the linear combination 
            image object.
            </param><returns>
            False on error
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateLinearCombinationImage(Cvb.Image.IMG,System.Boolean,System.IntPtr,Cvb.SharedImg@)">
            <summary>
            Creates a linear combination image of the planes given in inImg 
            weighted by the coefficients array.
            </summary><param name="sourceImg">
            Image object handle.
            </param><param name="reflect">
            Defines behaviour in case of buffer overflow:
            True if in case of buffer overflow the value becomes 0; false if it 
            should stay on maximum value.
            </param><param name="coefficients">
            Pointer to array of doubles (dimension: # of planes). Every index 
            contains the weight for the asociated plane. Coefficients range from
            0.0 to 1.0.
            </param><param name="targetImg">
            Reference to variable to contain a handle to the linear combination 
            image object.
            </param><returns>
            False on error
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateLinearCombinationImage(Cvb.Image.IMG,System.Boolean,System.Double[],Cvb.Image.IMG@)">
            <summary>
            Creates a linear combination image of the planes given in inImg 
            weighted by the coefficients array.
            </summary><param name="sourceImg">
            Image object handle.
            </param><param name="reflect">
            Defines behaviour in case of buffer overflow:
            True if in case of buffer overflow the value becomes 0; false if it 
            should stay on maximum value.
            </param><param name="coefficients">
            Array of doubles (dimension: # of planes). Every index contains the 
            weight for the asociated plane. Coefficients range from 0.0 to 1.0.
            </param><param name="targetImg">
            Reference to variable to contain a handle to the linear combination 
            image object.
            </param><returns>
            False on error
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateLinearCombinationImage(Cvb.Image.IMG,System.Boolean,System.Double[],Cvb.SharedImg@)">
            <summary>
            Creates a linear combination image of the planes given in inImg 
            weighted by the coefficients array.
            </summary><param name="sourceImg">
            Image object handle.
            </param><param name="reflect">
            Defines behaviour in case of buffer overflow:
            True if in case of buffer overflow the value becomes 0; false if it 
            should stay on maximum value.
            </param><param name="coefficients">
            Array of doubles (dimension: # of planes). Every index contains the 
            weight for the asociated plane. Coefficients range from 0.0 to 1.0.
            </param><param name="targetImg">
            Reference to variable to contain a handle to the linear combination 
            image object.
            </param><returns>
            False on error
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateColorTransform(Cvb.Image.IMG,System.Int32,System.Boolean,System.IntPtr,Cvb.Image.IMG@)">
            <summary>
            Calculates an average image of the planes given in inImg weighted by
            the coefficients array.
            </summary><param name="sourceImg">
            Handle to image object.
            </param><param name="targetDimension">
            Number of planes the target image should have
            </param><param name="reflect">
            Defines behaviour in case of buffer overflow:
            True if in case of buffer overflow the value becomes 0; false if it 
            should stay on maximum value.
            </param><param name="coefficients">
            Pointer to array of doubles (dimension: # of planes). Every index 
            contains the weight for the asociated plane. Coefficients range from
            0.0 to 1.0.
            </param><param name="targetImg">
            Reference to variable to contain a handle to the transformed image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateColorTransform(Cvb.Image.IMG,System.Int32,System.Boolean,System.IntPtr,Cvb.SharedImg@)">
            <summary>
            Calculates an average image of the planes given in inImg weighted by
            the coefficients array.
            </summary><param name="sourceImg">
            Handle to image object.
            </param><param name="targetDimension">
            Number of planes the target image should have
            </param><param name="reflect">
            Defines behavior in case of buffer overflow:
            True if in case of buffer overflow the value becomes 0; false if it 
            should stay on maximum value.
            </param><param name="coefficients">
            Pointer to array of doubles (dimension: # of planes). Every index 
            contains the weight for the associated plane. Coefficients range from
            0.0 to 1.0.
            </param><param name="targetImg">
            Reference to variable to contain a handle to the transformed image 
            object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateColorFeatureImage(Cvb.Image.IMG,Cvb.SharedImg@)">
            <summary>
            This function does the same as <c>MantoColourTransform</c>, a function 
            that was originally published in the <c>Manto.dll</c>. It requires an
            image with 3 planes (R, G, B) as input and produces a result image 
            with 9  planes (R, G, B, RG, RB, GB, R², G², B²). All input planes
            must have identical data type.
            </summary>
            <param name="imgIn">input image</param>
            <param name="imgOut">result image</param>
            <returns>False on error</returns>
        </member>
        <member name="M:Cvb.Image.CreateColorFeatureImage(Cvb.Image.IMG,Cvb.Image.IMG@)">
            <summary>
            This function does the same as <c>MantoColourTransform</c>, a function 
            that was originally published in the <c>Manto.dll</c>. It requires an
            image with 3 planes (R, G, B) as input and produces a result image 
            with 9  planes (R, G, B, RG, RB, GB, R², G², B²). All input planes
            must have identical data type.
            </summary>
            <param name="imgIn">input image</param>
            <param name="imgOut">result image</param>
            <returns>False on error</returns>
        </member>
        <member name="M:Cvb.Image.CreateColorTransform(Cvb.Image.IMG,System.Int32,System.Boolean,System.Double[],Cvb.Image.IMG@)">
            <summary>
            Calculates an average image of the planes given in inImg weighted by
            the coefficients array.
            </summary><param name="sourceImg">
            Handle to image object.
            </param><param name="targetDimension">
            Number of planes the target image should have
            </param><param name="reflect">
            Defines behaviour in case of buffer overflow:
            True if in case of buffer overflow the value becomes 0; false if it 
            should stay on maximum value.
            </param><param name="coefficients">
            Array of doubles (dimension: # of planes). Every index contains the 
            weight for the asociated plane. Coefficients range from 0.0 to 1.0.
            </param><param name="targetImg">
            Reference to variable to contain a handle to the transformed image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateColorTransform(Cvb.Image.IMG,System.Int32,System.Boolean,System.Double[],Cvb.SharedImg@)">
            <summary>
            Calculates an average image of the planes given in inImg weighted by
            the coefficients array.
            </summary><param name="sourceImg">
            Handle to image object.
            </param><param name="targetDimension">
            Number of planes the target image should have
            </param><param name="reflect">
            Defines behaviour in case of buffer overflow:
            True if in case of buffer overflow the value becomes 0; false if it 
            should stay on maximum value.
            </param><param name="coefficients">
            Array of doubles (dimension: # of planes). Every index contains the 
            weight for the asociated plane. Coefficients range from 0.0 to 1.0.
            </param><param name="targetImg">
            Reference to variable to contain a handle to the transformed image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageMap(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Cvb.Image.IMG@)">
            <summary>
            Creates a new image object based on an area of interest of an existing 
            image object. The scaling of the new image can be controlled. This 
            function does not copy data and therefore is very fast.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="srcImg">
            Source image object handle.
            </param><param name="srcLeft">
            Left edge of source area of interest.
            </param><param name="srcTop">
            Top edge of source area of interest.
            </param><param name="srcRight">
            Right edge of source area of interest.
            </param><param name="srcBottom">
            Bottom edge of source area of interest.
            </param><param name="dstWidth">
            Width of destination of image.
            </param><param name="dstHeight">
            Height of destination of image.
            </param><param name="dstImg">
            Refernce to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageMap(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Cvb.SharedImg@)">
            <summary>
            Creates a new image object based on an area of interest of an existing 
            image object. The scaling of the new image can be controlled. This 
            function does not copy data and therefore is very fast.
            Once ImgOut is no longer needed ReleaseImage must be called to 
            decrement the image reference counter.
            </summary><param name="srcImg">
            Source image object handle.
            </param><param name="srcLeft">
            Left edge of source area of interest.
            </param><param name="srcTop">
            Top edge of source area of interest.
            </param><param name="srcRight">
            Right edge of source area of interest.
            </param><param name="srcBottom">
            Bottom edge of source area of interest.
            </param><param name="dstWidth">
            Width of destination of image.
            </param><param name="dstHeight">
            Height of destination of image.
            </param><param name="dstImg">
            Reference to variable to contain destination image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreatePanoramicImageMap(Cvb.Image.IMG,Cvb.Image.IMG,Cvb.Image.TPanoramaMode,Cvb.SharedImg@)">
            <summary>
            Merges the two input images into one output image without copying
            memory. The effect is achieved by creating an output image that does 
            not have memory of its own (similar to what CreateImageMap does) and 
            then modifying the VPAT of the output image to reference the memory of
            the two input images.
            </summary>
            <remarks>
            The input images need to be compatible, which means that depending on 
            the TPanoramaMode either width or height need to be identical, the 
            dimension (number of planes) needs to be identical and the data types 
            of the planes need to be identical. If width, height or dimension do 
            not match, you may use the functions CreateImageMap (for width/height)
            or CreateImageSubList / CreateImageInsertList to fix this. If the data 
            types do not match, you will need to create a converted image first. 
            Lastly, the VPATs of the images must be compatible for generating the 
            panoramic map. If, for example, ImgA has a VPAT with a y-increment of 
            1024 and ImgB has a VPAT with a y-increment of 2048, generating a 
            horizontally merged panoramic map will fail because in the output 
            image the section for imgA and imgB will need to share the y-VPAT 
            entries which is not possible if the y-VPAT of both images has a 
            different increment.
            </remarks>
            <param name="srcA">first input image</param>
            <param name="srcB">second input image</param>
            <param name="panoMode">mode to be used when generating the output
            image</param>
            <param name="dstImg">resulting image</param>
            <returns>true if the call succeeded, false otherwise</returns>
        </member>
        <member name="M:Cvb.Image.CreatePanoramicImageMap(Cvb.Image.IMG,Cvb.Image.IMG,Cvb.Image.TPanoramaMode,Cvb.Image.IMG@)">
            <summary>
            Merges the two input images into one output image without copying
            memory. The effect is achieved by creating an output image that does 
            not have memory of its own (similar to what CreateImageMap does) and 
            then modifying the VPAT of the output image to reference the memory of
            the two input images.
            </summary>
            <remarks>
            The input images need to be compatible, which means that depending on 
            the TPanoramaMode either width or height need to be identical, the 
            dimension (number of planes) needs to be identical and the data types 
            of the planes need to be identical. If width, height or dimension do 
            not match, you may use the functions CreateImageMap (for width/height)
            or CreateImageSubList / CreateImageInsertList to fix this. If the data 
            types do not match, you will need to create a converted image first. 
            Lastly, the VPATs of the images must be compatible for generating the 
            panoramic map. If, for example, ImgA has a VPAT with a y-increment of 
            1024 and ImgB has a VPAT with a y-increment of 2048, generating a 
            horizontally merged panoramic map will fail because in the output 
            image the section for imgA and imgB will need to share the y-VPAT 
            entries which is not possible if the y-VPAT of both images has a 
            different increment.
            </remarks>
            <param name="srcA">first input image</param>
            <param name="srcB">second input image</param>
            <param name="panoMode">mode to be used when generating the output
            image</param>
            <param name="dstImg">resulting image</param>
            <returns>true if the call succeeded, false otherwise</returns>
        </member>
        <member name="M:Cvb.Image.CreateRotatedImageMap(Cvb.Image.IMG,Cvb.Image.TVPATRotation,Cvb.SharedImg@)">
            <summary>
            Creates an image mapping from the given ImgIn image that is rotated 
            counter clockwise. Only new VPA table(s) are created, but no image 
            data is copied. The mapped image has its own coordinate system and VPA 
            tables.
            </summary>
            <param name="imgIn">input image</param>
            <param name="rotation">rotation</param>
            <param name="dstImg">result image</param>
            <returns>true if the call succeeded, false otherwise</returns>
        </member>
        <member name="M:Cvb.Image.CreateRotatedImageMap(Cvb.Image.IMG,Cvb.Image.TVPATRotation,Cvb.Image.IMG@)">
            <summary>
            Creates an image mapping from the given ImgIn image that is rotated 
            counter clockwise. Only new VPA table(s) are created, but no image 
            data is copied. The mapped image has its own coordinate system and VPA 
            tables.
            </summary>
            <param name="imgIn">input image</param>
            <param name="rotation">rotation</param>
            <param name="dstImg">result image</param>
            <returns>true if the call succeeded, false otherwise</returns>
        </member>
        <member name="M:Cvb.Image.CreateTransformedImage(Cvb.Image.IMG,System.Int32,System.Int32,Cvb.Image.TFNonlinear,System.IntPtr,Cvb.Image.IMG@)">
            <summary>
            Is used for geometric transformation of an image, it is used for the 
            CreatePolarImage function. The function creates a new image with a 
            size as defined. A callback is passed to this function and is called 
            for each pixel being transformed. The position of the pixel is passed 
            into the callback as a reference, the transformation function in the 
            callback can then modify the pixel to its new position. 
            </summary><param name="inImg">
            Image object handle.
            </param><param name="targetWidth">
            Output image width.
            </param><param name="targetHeight">
            Output image height.
            </param><param name="transformation">
            TFNonLinear callback function.
            </param><param name="pPrivate">
            Pointer to a user object passed to each pixel for transformation.
            </param><param name="outImg">
            Reference to variable to contain a handle to the transformed image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateTransformedImage(Cvb.Image.IMG,System.Int32,System.Int32,Cvb.Image.TFNonlinear,System.IntPtr,Cvb.SharedImg@)">
            <summary>
            Is used for geometric transformation of an image, it is used for the 
            CreatePolarImage function. The function creates a new image with a 
            size as defined. A callback is passed to this function and is called 
            for each pixel being transformed. The position of the pixel is passed 
            into the callback as a reference, the transformation function in the 
            callback can then modify the pixel to its new position. 
            </summary><param name="inImg">
            Image object handle.
            </param><param name="targetWidth">
            Output image width.
            </param><param name="targetHeight">
            Output image height.
            </param><param name="transformation">
            TFNonLinear callback function.
            </param><param name="pPrivate">
            Pointer to a user object passed to each pixel for transformation.
            </param><param name="outImg">
            Reference to variable to contain a handle to the transformed image object.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.FindMaxima(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Cvb.Image.PIXELLIST@)">
            <summary>
            Finds maxima in an image. Maxima are defined as the brightest pixels 
            above a threshold and within a locality. The size of the locality is 
            specified via the Locality parameter, this can be considered to be a 
            radius around a maxima. The found maxima are stored in a result list. 
            </summary><param name="img">
            Image object handle.
            </param><param name="planeIndex">
            Image plane to process.
            </param><param name="left">
            Left edge of region of interest.
            </param><param name="top">
            Top edge of region of interest.
            </param><param name="right">
            Right edge of region of interest.
            </param><param name="bottom">
            Bottom edge of region of interest.
            </param><param name="locality">
            Radius of locality around a maxima.
            </param><param name="threshold">
            Value above which a maxima is defined.
            </param><param name="maxima">
            Reference to variable to a PIXELLIST of maxima.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.FindMaxima(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Cvb.SharedPixelList@)">
            <summary>
            Finds maxima in an image. Maxima are defined as the brightest pixels 
            above a threshold and within a locality. The size of the locality is 
            specified via the Locality parameter, this can be considered to be a 
            radius around a maxima. The found maxima are stored in a result list. 
            </summary><param name="img">
            Image object handle.
            </param><param name="planeIndex">
            Image plane to process.
            </param><param name="left">
            Left edge of region of interest.
            </param><param name="top">
            Top edge of region of interest.
            </param><param name="right">
            Right edge of region of interest.
            </param><param name="bottom">
            Bottom edge of region of interest.
            </param><param name="locality">
            Radius of locality around a maxima.
            </param><param name="threshold">
            Value above which a maxima is defined.
            </param><param name="maxima">
            Reference to variable to a PIXELLIST of maxima.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.IsPixels(Cvb.Image.OBJ)">
            <summary>
            Verifies whether the passed object is a pixel list.
            </summary><param name="hnd">
            Object handle.
            </param><returns>
            True if object is a pixel list; false if object is NOT a pixel list.
            </returns>
        </member>
        <member name="M:Cvb.Image.ListPixel(Cvb.Image.PIXELLIST,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Return details about a pixel entry from a pixel list.
            </summary><param name="pixels">
            Pixel list to interrogate.
            </param><param name="listIndex">
            Pixel ID to return, range is from 0 to PixelListCount(Pixels) - 1.
            </param><param name="pX">
            Reference to variable to contain X component of pixel location.
            </param><param name="pY">
            Reference to variable to contain Y component of pixel location.
            </param><param name="pZ">
            Reference to variable to contain pixel value.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.PixelListCount(Cvb.Image.PIXELLIST)">
            <summary>
            Returns the number of entries in a pixel list.
            </summary><param name="pixels">
            Pixel list to interrogate.
            </param><returns>
            Number of entries in pixel list.
            </returns><exception cref="T:System.OverflowException">
            On a 64-bit platform, the value of this instance is too large or too 
            small to represent as a 32-bit signed integer. 
            </exception>
        </member>
        <member name="M:Cvb.Image.SortPixelsByValue(Cvb.Image.PIXELLIST)">
            <summary>
            Sorts a pixel list in descending order of grayscale value.
            </summary><param name="pixels">
            Pixel list to sort.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.SortPixelsByPosition(Cvb.Image.PIXELLIST,System.Int32,System.Int32)">
            <summary>
            Sorts a pixel list in a certain direction defined by the unit vector x,
            y. For example, to sort a list in the y direction pass (0, 1), to sort 
            it down 45° from the top left pass (1, -1). 
            </summary><param name="pixels">
            Pixel list to sort.
            </param><param name="x">
            X sort direction vector.
            </param><param name="y">
            Y sort direction vector.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.TruncatePixelList(Cvb.Image.PIXELLIST,System.Int32)">
            <summary>
            Deletes N entries from the end of the pixel list.
            </summary><param name="pixels">
            Pixel list to truncate.
            </param><param name="n">
            Number of entries to truncate.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.AddPixel(Cvb.Image.PIXELLIST,System.Double[])">
            <summary>
            Adds a pixel to the pixel list
            </summary><param name="list">
            Pixel list to add a pixel to.
            </param><param name="data">
            The pixelvector.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.ConcatenatePixelLists(Cvb.Image.PIXELLIST,Cvb.Image.PIXELLIST)">
            <summary>
            Concatenate two pixel lists.
            </summary><param name="listA">
            First Pixel list.
            </param><param name="listB">
            Second Pixel list.
            </param><returns>
            The new pixel list containing both pixel lists.
            </returns>
        </member>
        <member name="M:Cvb.Image.ConcatenatePixelLists(Cvb.Image.PIXELLIST,Cvb.Image.PIXELLIST,Cvb.SharedPixelList@)">
            <summary>
            Concatenate two pixel lists.
            </summary><param name="listA">
            First Pixel list.
            </param><param name="listB">
            Second Pixel list.
            </param><param name="concatenatedList">
            The new pixel list containing both pixel lists.
            </param>
        </member>
        <member name="M:Cvb.Image.CopyPixelList(Cvb.Image.PIXELLIST,Cvb.Image.PIXELLIST@)">
            <summary>
            Creates a new <code>PIXELLIST</code> by copying the source list. 
            Remember to pass the created <code>PIXELLIST</code> to 
            <code>ReleaseObject</code>, once you don't need it any longer.
            </summary><param name="source">
            <code>PIXELLIST</code> to be copied.
            </param><param name="target">
            <code>PIXELLIST</code> handle of the created list
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CopyPixelList(Cvb.Image.PIXELLIST,Cvb.SharedPixelList@)">
            <summary>
            Creates a new <code>PIXELLIST</code> by copying the source list. 
            </summary><param name="source">
            <code>PIXELLIST</code> to be copied.
            </param><param name="target">
            <code>PIXELLIST</code> handle of the created list
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreatePixelList(System.Int32)">
            <summary>
            Creates a new pixel list.
            </summary><param name="dimension">
            The dimension of the pixel list. Should be at least 2 for x and y locations.
            </param><returns>
            The new pixel list.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreatePixelList(System.Int32,Cvb.SharedPixelList@)">
            <summary>
            Creates a new pixel list.
            </summary><param name="dimension">
            The dimension of the pixel list. Should be at least 2 for x and y locations.
            </param><param name="list">
            The new pixel list.
            </param>
        </member>
        <member name="M:Cvb.Image.ListPixelEx(Cvb.Image.PIXELLIST,System.Int32,System.Double[]@)">
            <summary>
            Retrieves a single pixel of a pixel list
            </summary><param name="list">
            handle from which to retrieve the pixel data.
            </param><param name="index">
            List-Index of the pixel to be retrieved.
            </param><param name="data">
            Double array containing the pixel data
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.RemoveAllPixels(Cvb.Image.PIXELLIST)">
            <summary>
            Removes all entries from a <code>PIXELLIST</code>. It does, however, 
            not destroy the <code>PIXELLIST</code> itself! Even an empty 
            <code>PIXELLIST</code> consumes a small amount of memory - therefore 
            it is still necessary, to pass the handle to ReleaseObject once the 
            list is not needed any more.
            </summary><param name="list">
            <code>PIXELLIST</code> handle from which to remove all entries
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.PixelListDimension(Cvb.Image.PIXELLIST)">
            <summary>
            Returns the dimension of a pixel list
            </summary><param name="list">
            The Pixel list.
            </param><returns>
            The dimension of the pixel list.
            </returns><exception cref="T:System.OverflowException">
            On a 64-bit platform, the value of this instance is too large or too 
            small to represent as a 32-bit signed integer. 
            </exception>
        </member>
        <member name="M:Cvb.Image.RemovePixel(Cvb.Image.PIXELLIST,System.Int32)">
            <summary>
            Removes a single pixel from the pixel list
            </summary><param name="list">
            Pixel list to add a pixel to.
            </param><param name="index">
            The index of the pixel to be removed.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.SortPixelsEx(Cvb.Image.PIXELLIST,System.Double[])">
            <summary>
            Sorts (projects) a pixel list on a given vector
            </summary><param name="list">
            Pixel list to be sorted.
            </param><param name="projectionVector">
            The projection vector.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.SeparatePixels(Cvb.Image.PIXELLIST,System.Double[],System.Double)">
            <summary>
            Thin out a pixel list by eliminating contents of the list that lie too 
            closely together in component 0 (x) and 1 (y) in the sense of an 
            L-infinity distance measure.
            </summary><param name="list">
            Pixel list to be thinned out.
            </param><param name="qualityProjection">
            Projection vector for determining the quality for the sort operation.
            </param><param name="separation">
            Minimum distance between two pixels remaining in the pixel list.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.InitializeImageArea(Cvb.Image.IMG,System.Int32,Cvb.Image.TArea,System.Int32)">
            <summary>
            Initialises the pixels in an area of interest with a constant value. 
            </summary><param name="img">
            Image object handle.
            </param><param name="index">
            Index of plane to process.
            </param><param name="area">
            Area of interest to initialise.
            </param><param name="val">
            Value to initialise
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.InitializeImageAreaEx(Cvb.Image.IMG,System.Int32,Cvb.Image.TArea,System.Double)">
            <summary>
            Initialises the pixels in an area of interest with a constant value. 
            </summary><param name="img">
            Image object handle.
            </param><param name="index">
            Index of plane to process.
            </param><param name="area">
            Area of interest to initialise.
            </param><param name="val">
            Value to initialise
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CopyImageArea(Cvb.Image.IMG,Cvb.Image.IMG,System.Int32,System.Int32,Cvb.Image.TArea,System.Int32,System.Int32)">
            <summary>
            Copies an area of pixel data from a source image plane to a specified 
            position in a destination image plane.
            </summary><param name="srcImg">
            Source image object handle.
            </param><param name="dstImg">
            Destination image object handle.
            </param><param name="srcIndex">
            Source image plane.
            </param><param name="dstIndex">
            Destination image plane.
            </param><param name="area">
            Source area of interest to copy.
            </param><param name="targetX0">
            X component target destination.
            </param><param name="targetY0">
            Y component target destination
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CopyImageRect(Cvb.Image.IMG,Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the pixels inside a rectangle from the 
            <paramref name="srcImg"/> to the <paramref name="dstImg"/>. Unlike
            <see cref="M:Cvb.Image.CopyImageArea(Cvb.Image.IMG,Cvb.Image.IMG,System.Int32,System.Int32,Cvb.Image.TArea,System.Int32,System.Int32)"/> this function does not take into account
            the coordinate system and instead uses pixel coordinates. It analyzes
            the memory layout in the source and the destination image and picks
            the most suitable approach for copying automatically.
            </summary><param name="srcImg">
            Source image object handle.
            </param><param name="dstImg">
            Destination image object handle.
            </param><param name="srcIndex">
            Source image plane.
            </param><param name="dstIndex">
            Destination image plane.
            </param>
            <param name="srcBottom">Source rectangle to copy.</param>
            <param name="srcLeft">Source rectangle to copy.</param>
            <param name="srcTop">Source rectangle to copy.</param>
            <param name="srcRight">Source rectangle to copy.</param>
            <param name="targetX0">
            X component target destination.
            </param><param name="targetY0">
            Y component target destination
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CopyImageRectPlanes(Cvb.Image.IMG,Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the pixels inside a rectangle from the 
            <paramref name="srcImg"/> to the <paramref name="dstImg"/>. Unlike
            <see cref="M:Cvb.Image.CopyImageArea(Cvb.Image.IMG,Cvb.Image.IMG,System.Int32,System.Int32,Cvb.Image.TArea,System.Int32,System.Int32)"/> this function does not take into account
            the coordinate system and instead uses pixel coordinates. It analyzes
            the memory layout in the source and the destination image and picks
            the most suitable approach for copying automatically.
            </summary><param name="srcImg">
            Source image object handle.
            </param><param name="dstImg">
            Destination image object handle.
            </param>
            <param name="srcBottom">Source rectangle to copy.</param>
            <param name="srcLeft">Source rectangle to copy.</param>
            <param name="srcTop">Source rectangle to copy.</param>
            <param name="srcRight">Source rectangle to copy.</param>
            <param name="dstIndex">Plane index in the destination image.</param>
            <param name="srcIndex">Plane index in the source image.</param>
            <param name="targetX0">
            X component target destination.
            </param><param name="targetY0">
            Y component target destination
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.ScanImageBinary(Cvb.Image.IMG,Cvb.Image.IMG,Cvb.Image.TArea,System.Int32,System.Int32,System.Int32,System.Boolean,Cvb.Image.TFPixelBinary,Cvb.Image.TFLine,Cvb.Image.TFLine,System.IntPtr)">
            <summary>
            Allows simultaneous access to the two different images taking Area and 
            Density into consideration. This could be used for example to link two 
            images via a lookup table.
            </summary><param name="img1">
            First image object handle.
            </param><param name="img2">
            Second image object handle.
            </param><param name="area">
            Area of interest to process.
            </param><param name="density">
            Processing density from 0 to 1000.
            </param><param name="dDX">
            Horizontal shift in pixels between the two source images.
            </param><param name="dDY">
            Vertical shift in pixels between the two source images.
            </param><param name="useCS">
            <code>True</code> if coordinate system should be used; 
            <code>False</code> otherwise.
            </param><param name="fPixel">
            <code>TFPixelBinaray</code> callback to process each pixel. The 
            This function is called for each pixel that lies within area and 
            matches the selected density. If return value of this method is
            <code>False</code> the process will be stopped.
            </param><param name="fStartLine">
            <code>TFLine</code> callback to process at the beginning of each line. 
            This method is called at the beginning of each new line.
            </param><param name="fEndLine">
            <code>TFLine</code> callback to process at the end of each line. 
            This method is called at the beginning of each new line.
            </param><param name="pPrivate">
            Pointer to a user object passed to each pixel for transformation.
            </param><returns>
            Smaller than zero on error
            </returns>
        </member>
        <member name="M:Cvb.Image.ScanImageUnary(Cvb.Image.IMG,Cvb.Image.TArea,System.Int32,System.Boolean,Cvb.Image.TFPixelUnary,Cvb.Image.TFLine,Cvb.Image.TFLine,System.IntPtr)">
            <summary>
            Allows access to all planes of the image taking Area and Density into 
            consideration.
            </summary><param name="img">
            Image object handle.
            </param><param name="area">
            Area of interest to process.
            </param><param name="density">
            Processing density from 0 to 1000.
            </param><param name="useCS">
            <code>True</code> if coordinate system should be used; 
            <code>False</code> otherwise.
            </param><param name="fPixel">
            <code>TFPixelUnary</code> callback to process each pixel. The 
            This function is called for each pixel that lies within area and 
            matches the selected density. If return value of this method is
            <code>False</code> the process will be stopped.
            </param><param name="fStartLine">
            <code>TFLine</code> callback to process at the beginning of each line. 
            This method is called at the beginning of each new line.
            </param><param name="fEndLine">
            <code>TFLine</code> callback to process at the end of each line. 
            This method is called at the beginning of each new line.
            </param><param name="pPrivate">
            Pointer to a user object passed to each pixel for transformation.
            </param><returns>
            Smaller than zero on error
            </returns>
        </member>
        <member name="M:Cvb.Image.ScanPlaneBinary(Cvb.Image.IMG,Cvb.Image.IMG,System.Int32,System.Int32,Cvb.Image.TArea,System.Int32,System.Int32,System.Int32,System.Boolean,Cvb.Image.TFPixelBinary,Cvb.Image.TFLine,Cvb.Image.TFLine,System.IntPtr)">
            <summary>
            Allows simultaneous access to the two different images taking Area and 
            Density into consideration. This could be used for example to link two 
            images via a lookup table.
            </summary><param name="img1">
            First image object handle.
            </param><param name="img2">
            Second image object handle.
            </param><param name="index1">
            Image plane index in the range 0...ImageDimension(img1) - 1.
            </param><param name="index2">
            Image plane index in the range 0...ImageDimension(Img2) - 1.
            </param><param name="area">
            Area of interest to process.
            </param><param name="density">
            Processing density from 0 to 1000.
            </param><param name="dDX">
            Horizontal shift in pixels between the two source images
            </param><param name="dDY">
            Vertical shift in pixels between the two source images.
            </param><param name="useCS">
            <code>True</code> if coordinate system should be used; 
            <code>False</code> otherwise.
            </param><param name="fPixelBinary">
            <code>TFPixelBinaray</code> callback to process each pixel. The 
            This function is called for each pixel that lies within area and 
            matches the selected density. If return value of this method is
            <code>False</code> the process will be stopped.
            </param><param name="fStartLine">
            <code>TFLine</code> callback to process at the beginning of each line. 
            This method is called at the beginning of each new line.
            </param><param name="fEndLine">
            <code>TFLine</code> callback to process at the end of each line. 
            This method is called at the beginning of each new line.
            </param><param name="pPrivate">
            Pointer to a user object passed to each pixel for transformation.
            </param><returns>
            Smaller than zero on error
            </returns>
        </member>
        <member name="M:Cvb.Image.ScanPlaneUnary(Cvb.Image.IMG,System.Int32,Cvb.Image.TArea,System.Int32,System.Boolean,Cvb.Image.TFPixelUnary,Cvb.Image.TFLine,Cvb.Image.TFLine,System.IntPtr)">
            <summary>
            Allows access to all planes of the image taking Area and Density 
            into consideration.
            </summary><param name="img">
            Image object handle.
            </param><param name="index">
            Image plane index in the range 0...ImageDimension(Img) - 1.
            </param><param name="area">
            Area of interest to process.
            </param><param name="density">
            Processing density from 0 to 1000.
            </param><param name="useCS">
            <code>True</code> if coordinate system should be used; 
            <code>False</code> otherwise.
            </param><param name="fPixel">
            <code>TFPixelUnary</code> callback to process each pixel. The 
            This function is called for each pixel that lies within area and 
            matches the selected density. If return value of this method is
            <code>False</code> the process will be stopped.
            </param><param name="fStartLine">
            <code>TFLine</code> callback to process at the beginning of each line. 
            This method is called at the beginning of each new line.
            </param><param name="fEndLine">
            <code>TFLine</code> callback to process at the end of each line. 
            This method is called at the beginning of each new line.
            </param><param name="pPrivate">
            Pointer to a user object passed to each pixel for transformation.
            </param><returns>
            Smaller than zero on error
            </returns>
        </member>
        <member name="M:Cvb.Image.IsSignedDatatype(System.Int32)">
            <summary>
            Checks if a datatype descriptor as returned by the function 
            ImageDatatype refers to an image plane with signed pointer pixels or 
            unsigned pixels.
            </summary><param name="dataType">
            Descriptor to be checked
            </param><returns>
            True if is signed pixel type; False otherwise.
            </returns>
        </member>
        <member name="M:Cvb.Image.NumPlanesNeededPerImage(Cvb.Image.TColorModel)">
            <summary>
            Gets the number of planes necessary for the given <paramref name="colorModel"/>.
            </summary><param name="colorModel">
            The color model to get the number of planes forl
            </param><returns>
            Number of planes.
            </returns>
        </member>
        <member name="M:Cvb.Image.IsFloatDatatype(System.Int32)">
            <summary>
            Checks if a datatype descriptor as returned by the function 
            ImageDatatype refers to an image plane with float pointer pixels or 
            integer pixels.
            </summary><param name="dataType">
            Descriptor to be checked
            </param><returns>
            True if is float pixel type; False otherwise.
            </returns>
        </member>
        <member name="M:Cvb.Image.TransformPixelListCoordinates(Cvb.Image.PIXELLIST,Cvb.Image.TCoordinateMap)">
            <summary>
            Takes a pixel list, and transforms it in-place using the provided 
            coordinate map.
            </summary><param name="list">
            Pixel List to be transformed.
            </param><param name="coord">
            Coordinate map with which to transform the pixel list.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.TransformPixelListMatrix(Cvb.Image.PIXELLIST,Cvb.Image.TMatrix,System.Double,System.Double)">
            <summary>
            Takes a pixel list, and transforms it in-place using the provided 
            matrix and offset vector.
            </summary><param name="list">
            Pixel List to be transformed.
            </param><param name="a">
            Matrix with which to transform the pixel list.
            </param><param name="offsetX">
            X-component of offset vector to be applied in the transformation.
            </param><param name="offsetY">
            Y-component of offset vector to be applied in the transformation.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateConcatenatedImage(Cvb.Image.IMG[],System.Boolean,Cvb.Image.IMG@)">
            <summary>
            Takes an array of input images and concatenates them in the order in 
            which they arrive to become planes of a single output image. The input 
            images must have the same width and height each, and the same 
            datatypes.
            </summary><param name="images">
            Array containing the handles of the images to be concatenated.
            </param><param name="shareMemory">
            If you specify True here, the concatenated image will share the memory 
            of the input images. False will cause this function to copy all image 
            data involved.
            </param><param name="imgOut">
            Result image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateConcatenatedImage(Cvb.SharedImg[],System.Boolean,Cvb.SharedImg@)">
            <summary>
            Takes an array of input images and concatenates them in the order in 
            which they arrive to become planes of a single output image. The input 
            images must have the same width and height each, and the same 
            datatypes.
            </summary><param name="images">
            Array containing the handles of the images to be concatenated.
            </param><param name="shareMemory">
            If you specify True here, the concatenated image will share the memory 
            of the input images. False will cause this function to copy all image 
            data involved.
            </param><param name="imgOut">
            Result image.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.GetDatatypeMinMaxVal(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the minimum and maximum value a pixel with the provided 
            datatype descriptor (as returned by ImageDatatype) may assume. This 
            function only works for descriptors for integer images with no more 
            than 64 bits per pixel.
            </summary><param name="dataType">
            Datatype descriptor returned by ImageDatatype.
            </param><param name="minVal">
            Minimum value for pixels of that datatype.
            </param><param name="maxVal">
            Maximum value for pixels of that datatype.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.FindMaximaEx(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Cvb.Image.PIXELLIST@)">
            <summary>
            Finds maxima in an image. Maxima are defined as the brightest pixels 
            above a threshold and within a locality. The size of the locality is 
            specified via the Locality parameter, this can be considered to be a 
            radius around a maxima. The found maxima are stored in a result list. 
            The difference between FindMaximaEx and FindMaxima is that 
            FindMaximaEx also operates on images with floating point data, such as 
            the accumulators returned by the template matching functions in the 
            CVFoundation.dll.
            </summary><param name="img">
            Image object handle.
            </param><param name="planeIndex">
            Image plane to process.
            </param><param name="left">
            Left edge of region of interest.
            </param><param name="top">
            Top edge of region of interest.
            </param><param name="right">
            Right edge of region of interest.
            </param><param name="bottom">
            Bottom edge of region of interest.
            </param><param name="locality">
            Radius of locality around a maxima.
            </param><param name="threshold">
            Value above which a maxima is defined.
            </param><param name="maxima">
            PIXELLIST of maxima.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.FindMaximaEx(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Cvb.SharedPixelList@)">
            <summary>
            Finds maxima in an image. Maxima are defined as the brightest pixels 
            above a threshold and within a locality. The size of the locality is 
            specified via the Locality parameter, this can be considered to be a 
            radius around a maxima. The found maxima are stored in a result list. 
            The difference between FindMaximaEx and FindMaxima is that 
            FindMaximaEx also operates on images with floating point data, such as 
            the accumulators returned by the template matching functions in the 
            CVFoundation.dll.
            </summary><param name="img">
            Image object handle.
            </param><param name="planeIndex">
            Image plane to process.
            </param><param name="left">
            Left edge of region of interest.
            </param><param name="top">
            Top edge of region of interest.
            </param><param name="right">
            Right edge of region of interest.
            </param><param name="bottom">
            Bottom edge of region of interest.
            </param><param name="locality">
            Radius of locality around maxima.
            </param><param name="threshold">
            Value above which a maxima is defined.
            </param><param name="maxima">
            PIXELLIST of maxima.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.FindSubPixelMaxima(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Cvb.Image.TSubPixelMode,System.Int32,Cvb.SharedPixelList@)">
            <summary>
            Find maxima in the image and apply a approximation method to the gray
            value distribution around the maxima to determine sub pixel accuracy.
            </summary>
            <param name="image">image object handle</param>
            <param name="planeIndex">index of the plane to be processed</param>
            <param name="left">left edge of the region of interest</param>
            <param name="top">top edge of the region of interest</param>
            <param name="right">right edge of the region of interest</param>
            <param name="bottom">bottom edge of the region of interest</param>
            <param name="locality">radius of locality around maxima</param>
            <param name="threshold">minimum value for maxima</param>
            <param name="subPixelMode">sub pixel mode to be applied</param>
            <param name="radius">radius around a maximum to be used for sub pixel
            calculations</param>
            <param name="maxima">PIXELLIST with the found maxima</param>
            <returns>False on error</returns>
        </member>
        <member name="M:Cvb.Image.FindSubPixelMaxima(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Cvb.Image.TSubPixelMode,System.Int32,Cvb.Image.PIXELLIST@)">
            <summary>
            Find maxima in the image and apply a approximation method to the gray
            value distribution around the maxima to determine sub pixel accuracy.
            </summary>
            <param name="image">image object handle</param>
            <param name="planeIndex">index of the plane to be processed</param>
            <param name="left">left edge of the region of interest</param>
            <param name="top">top edge of the region of interest</param>
            <param name="right">right edge of the region of interest</param>
            <param name="bottom">bottom edge of the region of interest</param>
            <param name="locality">radius of locality around maxima</param>
            <param name="threshold">minimum value for maxima</param>
            <param name="subPixelMode">sub pixel mode to be applied</param>
            <param name="radius">radius around a maximum to be used for sub pixel
            calculations</param>
            <param name="maxima">PIXELLIST with the found maxima</param>
            <returns>False on error</returns>
        </member>
        <member name="M:Cvb.Image.CreateAreaSubImage(Cvb.Image.IMG,Cvb.Image.TArea,Cvb.Image.IMG@)">
            <summary>
            Creates a new image with the dimensions of the provided area, 
            containing the contents of that area as a rectangular image. The 
            current coordinate system of the input image is considered during the 
            copy process.
            </summary><param name="imgIn">
            Image object handle.
            </param><param name="area">
            Area of interest.
            </param><param name="imgOut">
            Variable to contain the output image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateAreaSubImage(Cvb.Image.IMG,Cvb.Image.TArea,Cvb.SharedImg@)">
            <summary>
            Creates a new image with the dimensions of the provided area, 
            containing the contents of that area as a rectangular image. The 
            current coordinate system of the input image is considered during the 
            copy process.
            </summary><param name="imgIn">
            Image object handle.
            </param><param name="area">
            Area of interest.
            </param><param name="imgOut">
            Variable to contain the output image object handle.
            </param><returns>
            False on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageFromPointer(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],Cvb.Image.PFFINALRELEASE,System.IntPtr,Cvb.Image.IMG@)">
            <summary>
            Generates an image object around a block of memory. This is sometimes 
            desirable, when the image in that block of memory has been produced or 
            acquired by an image source that has no direct interface into Common 
            Vision Blox via e.g. a vin driver. Note that when creating an image 
            around such a block of memory, control of the lifetime of that block 
            of memory should be transferred to Common Vision Blox. In other 
            words: You must not free that block of memory as long as the image you 
            created from that block still exists - otherwise disastrous runtime 
            errors are almost certain.
            </summary><param name="pImageMem">
            Pointer to the base of the data around which the image object is to be 
            constructed.
            </param><param name="memSize">
            Size of the memory pointed to by pImageMem.
            </param><param name="width">
            Width of the image to be created.
            </param><param name="height">
            Height of the image to be created.
            </param><param name="numPlanes">
            Number of planes of the image to be created.
            </param><param name="dataType">
            Datatype of the image to be created. See the description of 
            ImageDatatype for informations on how to compose those descriptors.
            </param><param name="pitchX">
            Distance in memory in bytes between two neighbouring pixels of the 
            same plane. If you have for example an 8 bit monochrome image, PitchX 
            normally is 1. For RGB interleaved images, PitchX would have a value 
            of 3, whereas RGB planar images again have an x-pitch of 1.
            </param><param name="pitchY">
            Like PitchX, but for vertical neighbours. Note that even for 
            monochrome images it is sometimes necessary that PitchY differs from 
            width, because sometimes the scanlines of images are arranged on 
            4-byte-boundaries in memory.
            </param><param name="pitchPlane">
            Same as PitchX and PitchY, but for different planes. If we stay at the 
            RGB examples: For RGB interleaved this normally should be 1, whereas 
            for RGB planar image data this should become Height * PitchY.
            </param><param name="planeOrder">
            Custom plane order. Array of size numPlanes is needed. See online 
            documentation. null if not needed.
            </param><param name="releaseCallback">
            Pointer to a callback function that will be called if the reference 
            count of the image created by this function reaches zero after a call 
            to ReleaseImage() or ReleaseObject(). It is absolutely necessary, that 
            the memory pointed to by pImageMem is not freed before this callback 
            has been invoked! Typical implementations of this callback would free 
            the memory in pImageMem and any resource directly associated with the 
            image.
            </param><param name="pUserData">
            Pointer that will be passed to the Release callback. Use this pointer 
            to pass on any additional informations you might need.
            </param><param name="imgOut">
            Newly created image.
            </param><returns>
            Smaller than zero on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageFromPointer(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],Cvb.Image.PFFINALRELEASE,System.IntPtr,Cvb.SharedImg@)">
            <summary>
            Generates an image object around a block of memory. This is sometimes 
            desirable, when the image in that block of memory has been produced or 
            acquired by an image source that has no direct interface into Common 
            Vision Blox via e.g. a vin driver. Note that when creating an image 
            around such a block of memory, control of the lifetime of that block 
            of memory should be transferred to Common Vision Blox. In other 
            words: You must not free that block of memory as long as the image you 
            created from that block still exists - otherwise disastrous runtime 
            errors are almost certain.
            </summary><param name="pImageMem">
            Pointer to the base of the data around which the image object is to be 
            constructed.
            </param><param name="memSize">
            Size of the memory pointed to by pImageMem.
            </param><param name="width">
            Width of the image to be created.
            </param><param name="height">
            Height of the image to be created.
            </param><param name="numPlanes">
            Number of planes of the image to be created.
            </param><param name="dataType">
            Datatype of the image to be created. See the description of 
            ImageDatatype for informations on how to compose those descriptors.
            </param><param name="pitchX">
            Distance in memory in bytes between two neighbouring pixels of the 
            same plane. If you have for example an 8 bit monochrome image, PitchX 
            normally is 1. For RGB interleaved images, PitchX would have a value 
            of 3, whereas RGB planar images again have an x-pitch of 1.
            </param><param name="pitchY">
            Like PitchX, but for vertical neighbours. Note that even for 
            monochrome images it is sometimes necessary that PitchY differs from 
            width, because sometimes the scanlines of images are arranged on 
            4-byte-boundaries in memory.
            </param><param name="pitchPlane">
            Same as PitchX and PitchY, but for different planes. If we stay at the 
            RGB examples: For RGB interleaved this normally should be 1, whereas 
            for RGB planar image data this should become Height * PitchY.
            </param><param name="planeOrder">
            Custom plane order. Array of size numPlanes is needed. See online 
            documentation. null if not needed.
            </param><param name="releaseCallback">
            Pointer to a callback function that will be called if the reference 
            count of the image created by this function reaches zero after a call 
            to ReleaseImage() or ReleaseObject(). It is absolutely necessary, that 
            the memory pointed to by pImageMem is not freed before this callback 
            has been invoked! Typical implementations of this callback would free 
            the memory in pImageMem and any resource directly associated with the 
            image.
            </param><param name="pUserData">
            Pointer that will be passed to the Release callback. Use this pointer 
            to pass on any additional informations you might need.
            </param><param name="imgOut">
            Newly created image.
            </param><returns>
            Smaller than zero on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageFromPointer(System.IntPtr,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32[],Cvb.Image.PFFINALRELEASE,System.IntPtr,Cvb.Image.IMG@)">
            <summary>
            Generates an image object around a block of memory. This is sometimes 
            desirable, when the image in that block of memory has been produced or 
            acquired by an image source that has no direct interface into Common 
            Vision Blox via e.g. a vin driver. Note that when creating an image 
            around such a block of memory, control of the lifetime of that block 
            of memory should be transferred to Common Vision Blox. In other 
            words: You must not free that block of memory as long as the image you 
            created from that block still exists - otherwise disastrous runtime 
            errors are almost certain.
            </summary><param name="pImageMem">
            Pointer to the base of the data around which the image object is to be 
            constructed.
            </param><param name="memSize">
            Size of the memory pointed to by pImageMem.
            </param><param name="width">
            Width of the image to be created.
            </param><param name="height">
            Height of the image to be created.
            </param><param name="numPlanes">
            Number of planes of the image to be created.
            </param><param name="dataType">
            Datatype of the image to be created. See the description of 
            ImageDatatype for informations on how to compose those descriptors.
            </param><param name="pitchX">
            Distance in memory in bytes between two neighbouring pixels of the 
            same plane. If you have for example an 8 bit monochrome image, PitchX 
            normally is 1. For RGB interleaved images, PitchX would have a value 
            of 3, whereas RGB planar images again have an x-pitch of 1.
            </param><param name="pitchY">
            Like PitchX, but for vertical neighbours. Note that even for 
            monochrome images it is sometimes necessary that PitchY differs from 
            width, because sometimes the scanlines of images are arranged on 
            4-byte-boundaries in memory.
            </param><param name="pitchPlane">
            Same as PitchX and PitchY, but for different planes. If we stay at the 
            RGB examples: For RGB interleaved this normally should be 1, whereas 
            for RGB planar image data this should become Height * PitchY.
            </param><param name="planeOrder">
            Custom plane order. Array of size numPlanes is needed. See online 
            documentation. null if not needed.
            </param><param name="releaseCallback">
            Pointer to a callback function that will be called if the reference 
            count of the image created by this function reaches zero after a call 
            to ReleaseImage() or ReleaseObject(). It is absolutely necessary, that 
            the memory pointed to by pImageMem is not freed before this callback 
            has been invoked! Typical implementations of this callback would free 
            the memory in pImageMem and any resource directly associated with the 
            image.
            </param><param name="pUserData">
            Pointer that will be passed to the Release callback. Use this pointer 
            to pass on any additional informations you might need.
            </param><param name="imgOut">
            Newly created image.
            </param><returns>
            Smaller than zero on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateImageFromPointer(System.IntPtr,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32[],Cvb.Image.PFFINALRELEASE,System.IntPtr,Cvb.SharedImg@)">
            <summary>
            Generates an image object around a block of memory. This is sometimes 
            desirable, when the image in that block of memory has been produced or 
            acquired by an image source that has no direct interface into Common 
            Vision Blox via e.g. a vin driver. Note that when creating an image 
            around such a block of memory, control of the lifetime of that block 
            of memory should be transferred to Common Vision Blox. In other 
            words: You must not free that block of memory as long as the image you 
            created from that block still exists - otherwise disastrous runtime 
            errors are almost certain.
            </summary><param name="pImageMem">
            Pointer to the base of the data around which the image object is to be 
            constructed.
            </param><param name="memSize">
            Size of the memory pointed to by pImageMem.
            </param><param name="width">
            Width of the image to be created.
            </param><param name="height">
            Height of the image to be created.
            </param><param name="numPlanes">
            Number of planes of the image to be created.
            </param><param name="dataType">
            Datatype of the image to be created. See the description of 
            ImageDatatype for informations on how to compose those descriptors.
            </param><param name="pitchX">
            Distance in memory in bytes between two neighbouring pixels of the 
            same plane. If you have for example an 8 bit monochrome image, PitchX 
            normally is 1. For RGB interleaved images, PitchX would have a value 
            of 3, whereas RGB planar images again have an x-pitch of 1.
            </param><param name="pitchY">
            Like PitchX, but for vertical neighbours. Note that even for 
            monochrome images it is sometimes necessary that PitchY differs from 
            width, because sometimes the scanlines of images are arranged on 
            4-byte-boundaries in memory.
            </param><param name="pitchPlane">
            Same as PitchX and PitchY, but for different planes. If we stay at the 
            RGB examples: For RGB interleaved this normally should be 1, whereas 
            for RGB planar image data this should become Height * PitchY.
            </param><param name="planeOrder">
            Custom plane order. Array of size numPlanes is needed. See online 
            documentation. null if not needed.
            </param><param name="releaseCallback">
            Pointer to a callback function that will be called if the reference 
            count of the image created by this function reaches zero after a call 
            to ReleaseImage() or ReleaseObject(). It is absolutely necessary, that 
            the memory pointed to by pImageMem is not freed before this callback 
            has been invoked! Typical implementations of this callback would free 
            the memory in pImageMem and any resource directly associated with the 
            image.
            </param><param name="pUserData">
            Pointer that will be passed to the Release callback. Use this pointer 
            to pass on any additional informations you might need.
            </param><param name="imgOut">
            Newly created image.
            </param><returns>
            Smaller than zero on error.
            </returns>
        </member>
        <member name="M:Cvb.Image.ImageColorModel(Cvb.Image.IMG)">
            <summary>
            Returns a color model descriptor for the input image. The color model 
            descriptors will have one of the values of the TColorModel enum. Note 
            that not all images do carry a color model descriptor. In fact, most 
            images loaded from files or frame grabbers will come without a 
            descriptor. For those images, this function will return -1 for 
            monochrome images and -2 for RGB images.
            </summary><param name="imgIn">
            Image handle.
            </param><returns>
            ColorDescriptor.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateOverlayFromPixelList(Cvb.Image.PIXELLIST,Cvb.Image.IMG,Cvb.Image.IMG@)">
            <summary>
            Creates an overlay-capable output image from an input image and a pixel list, using the
            pixels from the pixel list to add "don't care" overlays to the input image.
            </summary><param name="list">
            Pixel list from which to create the overlay information
            </param><param name="imgIn">
            Image to which to add the overlay information. May already contain overlay bits at the
            time of calling this function - in that case the existing overlay bits are left untouched
            and the overlay pixels from the pixel list are added to the existing overlay bits.
            </param><param name="imgOut">
            Result image.
            </param><returns>
            Boolean, telling if operation was successful.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreateOverlayFromPixelList(Cvb.Image.PIXELLIST,Cvb.Image.IMG,Cvb.SharedImg@)">
            <summary>
            Creates an overlay-capable output image from an input image and a pixel list, using the
            pixels from the pixel list to add "don't care" overlays to the input image.
            </summary><param name="list">
            Pixel list from which to create the overlay information
            </param><param name="imgIn">
            Image to which to add the overlay information. May already contain overlay bits at the
            time of calling this function - in that case the existing overlay bits are left untouched
            and the overlay pixels from the pixel list are added to the existing overlay bits.
            </param><param name="imgOut">
            Result image.
            </param><returns>
            Boolean, telling if operation was successful.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreatePixelListFromOverlay(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Cvb.Image.PIXELLIST@)">
            <summary>
            Analyzes the specified region of the input image and generates a pixel list that contains one
            entry for every pixel in the region that has the overlay bit set
            </summary><param name="imgIn">
            Input image to work on. Must be an image that is overlay-capable (bit 10 of the image datatype
            needs to be set).
            </param><param name="dim">
            Dimension of the pixel list to be created as output of this function. Must be in the range
            3 &lt;= Dim &lt;= 256.
            </param><param name="left">
            Left edge of the region of interest
            </param><param name="top">
            Top edge of the region of interest
            </param><param name="right">
            Right edge of the region of interest. May be zero, in which case it will be replaced by
            ImageWidth - 1
            </param><param name="bottom">
            Bottom edge of the region of interest. May be zero, in which case it will be replaced by
            ImageHeight - 1
            </param><param name="list">
            Resulting pixel list
            </param><returns>
            Boolean, telling if operation completed successfully.
            </returns>
        </member>
        <member name="M:Cvb.Image.CreatePixelListFromOverlay(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Cvb.SharedPixelList@)">
            <summary>
            Analyzes the specified region of the input image and generates a pixel list that contains one
            entry for every pixel in the region that has the overlay bit set
            </summary><param name="imgIn">
            Input image to work on. Must be an image that is overlay-capable (bit 10 of the image datatype
            needs to be set).
            </param><param name="dim">
            Dimension of the pixel list to be created as output of this function. Must be in the range
            3 &lt;= Dim &lt;= 256.
            </param><param name="left">
            Left edge of the region of interest
            </param><param name="top">
            Top edge of the region of interest
            </param><param name="right">
            Right edge of the region of interest. May be zero, in which case it will be replaced by
            ImageWidth - 1
            </param><param name="bottom">
            Bottom edge of the region of interest. May be zero, in which case it will be replaced by
            ImageHeight - 1
            </param><param name="list">
            Resulting pixel list
            </param><returns>
            Boolean, telling if operation completed successfully.
            </returns>
        </member>
        <member name="M:Cvb.Image.ModifyListPixel(Cvb.Image.PIXELLIST,System.Int32,System.Double[])">
            <summary>
            Modifies the components of a pixel in a pixel list without changing its position in the list.
            </summary><param name="list">
            List that contains the pixel to be modified.
            </param><param name="index">
            Index of the pixel to be modified.
            </param><param name="data">
            New components to set for that pixel.
            </param><returns>
            Boolean, telling if operation completed successfully.
            </returns>
        </member>
        <member name="M:Cvb.Image.ApplyWhiteBalance(Cvb.Image.IMG,System.Double,System.Double,System.Double)">
            <summary>
            Perform an in-place white balance operation using the specified gains on the input image.
            </summary><param name="img">
            Input image in which to apply the white balancing.
            </param><param name="gainRed">
            Gain to be used on the red channel.
            </param><param name="gainGreen">
            Gain to be used on the green channel.
            </param><param name="gainBlue">
            Gain to be used on the blue channel.
            </param><returns>
            True if successful, false otherwise.
            </returns>
        </member>
        <member name="M:Cvb.Image.CalculateWhiteBalance(Cvb.Image.IMG,Cvb.Image.TArea,System.Double@,System.Double@,System.Double@)">
            <summary>
            Extract appropriate factors for whitebalancing
            </summary>
            <param name="img">image from which to calculate white balance gains</param>
            <param name="aoi">area in which to calculate white balance gains; the area should contain
            a (potentially unbalanced) grey section of the image that is not saturated and not too dark</param>
            <param name="gainRed">gain for the red channel</param>
            <param name="gainGreen">gain for the green channel</param>
            <param name="gainBlue">gain for the blue channel</param>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.DrawLineInImage(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,Cvb.Image.TDrawMode,Cvb.Image.TDrawAntiAliasMode)">
            <summary>
            Draws a line in the given Image. 
            </summary>
            <param name="Image">Image to draw line in.</param>
            <param name="Index">Plane index to draw line in.</param>
            <param name="X0">X coordinate of start point of line.</param>
            <param name="Y0">Y coordinate of start point of line. </param>
            <param name="X1">X coordinate of end point of line. </param>
            <param name="Y1">Y coordinate of end point of line. </param>
            <param name="Intensity">New intensity/gray value of line.</param>
            <param name="Thickness">Thickness of the line in pixels.</param>
            <param name="DrawMode">Specifies how the new Intensity is applied.
            </param>
            <param name="AntiAliasMode">Specifies whether or not anti-aliasing is 
            to be used.</param>
            <returns>0 if operation was successfully; otherwise a negative value 
            will be returned.</returns>
        </member>
        <member name="M:Cvb.Image.DrawCircleInImage(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,Cvb.Image.TDrawMode,Cvb.Image.TDrawAntiAliasMode)">
            <summary>
            Draws a circle in the given Image. 
            </summary>
            <param name="image">Image to draw line in.</param>
            <param name="index">Plane index to draw line in.</param>
            <param name="centerX">X coordinate of the circle center.</param>
            <param name="centerY">Y coordinate of the circle center.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="intensity">New intensity/gray value of circle.</param>
            <param name="thickness">Thickness of the circle in pixels.</param>
            <param name="drawMode">Specifies how the new Intensity is applied.
            </param>
            <param name="antiAliasMode">Specifies whether or not anti-aliasing is 
            to be used.</param>
            <returns>0 if operation was successfully; otherwise a negative value 
            will be returned.</returns>
        </member>
        <member name="M:Cvb.Image.FillCircleInImage(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,Cvb.Image.TDrawMode,Cvb.Image.TDrawAntiAliasMode)">
            <summary>
            Draws a filled circle in the given Image. This draws a destructive 
            overlay in the given Image.
            </summary>
            <param name="image">Image to draw line in.</param>
            <param name="index">Plane index to draw line in.</param>
            <param name="centerX">X coordinate of the circle center.</param>
            <param name="centerY">Y coordinate of the circle center.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="intensity">New intensity/gray value of circle.</param>
            <param name="drawMode">Specifies how the new Intensity is applied.
            </param>
            <param name="antiAliasMode">Specifies whether or not anti-aliasing is 
            to be used.</param>
            <returns>0 if operation was successfully; otherwise a negative value 
            will be returned.</returns>
        </member>
        <member name="M:Cvb.Image.DrawEllipseInImage(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32,Cvb.Image.TDrawMode,Cvb.Image.TDrawAntiAliasMode)">
            <summary>
            Draws an ellipse in the given Image. This draws a destructive overlay 
            in the given Image.
            </summary>
            <param name="image">Image to draw line in.</param>
            <param name="index">Plane index to draw line in.</param>
            <param name="centerX">X coordinate of the circle center.</param>
            <param name="centerY">Y coordinate of the circle center.</param>
            <param name="axisA">Length of the first semi major axis. The first 
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param>
            <param name="axisB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <param name="intensity">New intensity/gray value of ellipse.</param>
            <param name="thickness">Thickness of the ellipse in pixels.</param>
            <param name="drawMode">Specifies how the new Intensity is applied.
            </param>
            <param name="antiAliasMode">Specifies whether or not anti-aliasing is 
            to be used.</param>
            <returns>0 if operation was successfully; otherwise a negative value 
            will be returned.</returns>
        </member>
        <member name="M:Cvb.Image.DrawAreaInImage(Cvb.Image.IMG,System.Int32,Cvb.Image.TArea,System.Double,System.Int32,Cvb.Image.TDrawMode,Cvb.Image.TDrawAntiAliasMode)">
            <summary>
            Draws an area (parallelogram) in the given Image. 
            This draws a destructive overlay in the given Image.
            </summary>
            <param name="image">Image to draw area in.</param>
            <param name="index">Plane index to draw area in.</param>
            <param name="area">Area to draw.</param>
            <param name="intensity">New intensity/gray value of ellipse.</param>
            <param name="thickness">Thickness of the ellipse in pixels.</param>
            <param name="drawMode">Specifies how the new Intensity is applied.
            </param>
            <param name="antiAliasMode">Specifies whether or not anti-aliasing is 
            to be used.</param>
            <returns>0 if operation was successfully; otherwise a negative value 
            will be returned. </returns>
        </member>
        <member name="M:Cvb.Image.FillAreaInImage(Cvb.Image.IMG,System.Int32,Cvb.Image.TArea,System.Double,Cvb.Image.TDrawMode,Cvb.Image.TDrawAntiAliasMode)">
            <summary>
            Draws a filled area (parallelogram) in the given Image. 
            This draws a destructive overlay in the given Image.
            </summary>
            <param name="image">Image to draw area in.</param>
            <param name="index">Plane index to draw area in.</param>
            <param name="area">Area to draw.</param>
            <param name="intensity">New intensity/gray value of ellipse.</param>
            <param name="drawMode">Specifies how the new Intensity is applied.
            </param>
            <param name="antiAliasMode">Specifies whether or not anti-aliasing is 
            to be used.</param>
            <returns>0 if operation was successfully; otherwise a negative value 
            will be returned. </returns>
        </member>
        <member name="M:Cvb.Image.FillEllipseInImage(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,Cvb.Image.TDrawMode,Cvb.Image.TDrawAntiAliasMode)">
            <summary>
            Draws an ellipse in the given Image. This draws a destructive overlay 
            in the given Image.
            </summary>
            <param name="image">Image to draw line in.</param>
            <param name="index">Plane index to draw line in.</param>
            <param name="centerX">X coordinate of the circle center.</param>
            <param name="centerY">Y coordinate of the circle center.</param>
            <param name="axisA">Length of the first semi major axis. The first 
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param>
            <param name="axisB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <param name="intensity">New intensity/gray value of ellipse.</param>
            <param name="drawMode">Specifies how the new Intensity is applied.
            </param>
            <param name="antiAliasMode">Specifies whether or not anti-aliasing is 
            to be used.</param>
            <returns>0 if operation was successfully; otherwise a negative value 
            will be returned.</returns>
        </member>
        <member name="M:Cvb.Image.FloodFillMono(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Fills a closed region in the given Image. This draws a destructive 
            overlay in the given Image.
            </summary>
            <param name="image">Image to fill in.</param>
            <param name="index">Plane index to fill in.</param>
            <param name="centerX">X coordinate of the fill center.</param>
            <param name="centerY">Y coordinate of the fill center.</param>
            <param name="intensity">New intensity/gray value for filling.</param>
            <param name="maxDelta">delta at which the filling should stop.</param>
            <returns>0 if operation was successfully; otherwise a negative value 
            will be returned.</returns>
        </member>
        <member name="M:Cvb.Image.FloodFillBitwise(Cvb.Image.IMG,System.Int32,System.Int32,System.Int32,Cvb.Image.TDrawMode,System.Int32)">
            <summary>
            Fills a closed region in the given Image with a given Value using a
            selectable draw mode. This draws a destructive overlay in the given 
            Image. Note that the bitwise painting operations may not be carried 
            out on images with floating point valued pixels.
            </summary>
            <param name="image">Image to fill in.</param>
            <param name="index">Plane index to fill in.</param>
            <param name="centerX">X coordinate of the fill center.</param>
            <param name="centerY">Y coordinate of the fill center.</param>
            <param name="drawMode">Draw mode.</param>
            <param name="val">Value to use.</param>
            <returns>0 if operation was successfully; otherwise a negative value 
            will be returned.</returns>
        </member>
        <member name="T:Cvb.Image.OBJ">
            <summary>
            CVB Object type.
            </summary>
        </member>
        <member name="M:Cvb.Image.OBJ.#ctor(System.Int32)">
            <summary>
            Creates a CVB Object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.OBJ.#ctor(System.Int64)">
            <summary>
            Creates a CVB Object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.OBJ.#ctor(System.IntPtr)">
            <summary>
            Creates a CVB Object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.OBJ.#ctor(Cvb.Image.OBJ)">
            <summary>
            Creates a CVB Object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.OBJ.op_Implicit(System.Int32)~Cvb.Image.OBJ">
            <summary>
            Implicit conversion.
            </summary>
            <param name="handle">Native handle.</param>
            <returns>New <c>OBJ</c>.</returns>
        </member>
        <member name="M:Cvb.Image.OBJ.op_Implicit(System.Int64)~Cvb.Image.OBJ">
            <summary>
            Implicit conversion.
            </summary>
            <param name="handle">Native handle.</param>
            <returns>New <c>OBJ</c>.</returns>
        </member>
        <member name="M:Cvb.Image.OBJ.op_Implicit(System.IntPtr)~Cvb.Image.OBJ">
            <summary>
            Implicit conversion.
            </summary>
            <param name="handle">Native handle.</param>
            <returns>New <c>OBJ</c>.</returns>
        </member>
        <member name="M:Cvb.Image.OBJ.op_Implicit(Cvb.Image.OBJ)~System.Int32">
            <summary>
            Implicit conversion.
            </summary>
            <param name="obj">Object to convert to handle.</param>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.OBJ.op_Implicit(Cvb.Image.OBJ)~System.Int64">
            <summary>
            Implicit conversion.
            </summary>
            <param name="obj">Object to convert to handle.</param>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.OBJ.op_Implicit(Cvb.Image.OBJ)~System.IntPtr">
            <summary>
            Implicit conversion.
            </summary>
            <param name="obj">Object to convert to handle.</param>
            <returns></returns>
        </member>
        <member name="M:Cvb.Image.OBJ.Equals(System.Object)">
            <summary>
            Gets whether <paramref name="obj"/>s handle is equal to this one.
            </summary>
            <param name="obj">Other object to compare to.</param>
            <returns><b>true</b> if <paramref name="obj"/> is of a compatible 
            type and its handles are equal; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Cvb.Image.OBJ.GetHashCode">
            <summary>
            Gets the hash code of the underlying handle.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Cvb.Image.OBJ.op_Inequality(Cvb.Image.OBJ,Cvb.Image.OBJ)">
            <summary>
            Gets whether <paramref name="lhs"/> is unequal to 
            <paramref name="rhs"/>.
            </summary>
            <param name="lhs">Left-hand object.</param>
            <param name="rhs">Right-hand object.</param>
            <returns><b>true</b> if <paramref name="lhs"/> is unequal to
            <paramref name="rhs"/>; <b>false</b> if equal.</returns>
        </member>
        <member name="M:Cvb.Image.OBJ.op_Equality(Cvb.Image.OBJ,Cvb.Image.OBJ)">
            <summary>
            Gets whether <paramref name="lhs"/> is equal to 
            <paramref name="rhs"/>.
            </summary>
            <param name="lhs">Left-hand object.</param>
            <param name="rhs">Right-hand object.</param>
            <returns><b>true</b> if <paramref name="lhs"/> is equal to
            <paramref name="rhs"/>; <b>false</b> if unequal.</returns>
        </member>
        <member name="M:Cvb.Image.OBJ.ToInt32">
            <summary>
            Returns a 32 Bit signed integer representation of this OBJ object.
            </summary><returns>
            32 Bit signed integer representation.
            </returns>
        </member>
        <member name="M:Cvb.Image.OBJ.ToInt64">
            <summary>
            Returns a 64 Bit signed integer representation of this OBJ object.
            </summary><returns>
            64 Bit signed integer representation.
            </returns>
        </member>
        <member name="M:Cvb.Image.OBJ.ToIntPtr">
            <summary>
            Returns a <code>IntPtr</code> representation of this OBJ object.
            </summary><returns>
            <code>IntPtr</code> representation.
            </returns>
        </member>
        <member name="M:Cvb.Image.OBJ.ToString">
            <summary>
            Gets the string representation of the handle.
            </summary><returns>
            <see cref="M:System.IntPtr.ToString"/>.
            </returns>
        </member>
        <member name="T:Cvb.Image.IMG">
            <summary>
            CVB Image type.
            </summary>
        </member>
        <member name="M:Cvb.Image.IMG.#ctor(System.Int32)">
            <summary>
            Creates a CVB Image object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.IMG.#ctor(System.Int64)">
            <summary>
            Creates a CVB Image object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.IMG.#ctor(System.IntPtr)">
            <summary>
            Creates a CVB Image object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.IMG.#ctor(Cvb.Image.IMG)">
            <summary>
            Creates a CVB Image object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.IMG.op_Implicit(System.Int32)~Cvb.Image.IMG">
            <summary>
            Implicit conversion.
            </summary>
            <param name="handle">Native handle.</param>
            <returns>New <c>IMG</c>.</returns>
        </member>
        <member name="M:Cvb.Image.IMG.op_Implicit(System.Int64)~Cvb.Image.IMG">
            <summary>
            Implicit conversion.
            </summary>
            <param name="handle">Native handle.</param>
            <returns>New <c>IMG</c>.</returns>
        </member>
        <member name="M:Cvb.Image.IMG.op_Implicit(System.IntPtr)~Cvb.Image.IMG">
            <summary>
            Implicit conversion.
            </summary>
            <param name="handle">Native handle.</param>
            <returns>New <c>IMG</c>.</returns>
        </member>
        <member name="T:Cvb.Image.PIXELLIST">
            <summary>
            Defines a list of individual pixels as used in the FindMaxima function.
            </summary>
        </member>
        <member name="M:Cvb.Image.PIXELLIST.#ctor(System.Int32)">
            <summary>
            Creates a CVB Pixel List object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.PIXELLIST.#ctor(System.Int64)">
            <summary>
            Creates a CVB Pixel List object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.PIXELLIST.#ctor(System.IntPtr)">
            <summary>
            Creates a CVB Pixel List object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.PIXELLIST.#ctor(Cvb.Image.PIXELLIST)">
            <summary>
            Creates a CVB Pixel List object.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Cvb.Image.PIXELLIST.op_Implicit(System.Int32)~Cvb.Image.PIXELLIST">
            <summary>
            Implicit conversion.
            </summary>
            <param name="handle">Native handle.</param>
            <returns>New <c>PIXELLIST</c>.</returns>
        </member>
        <member name="M:Cvb.Image.PIXELLIST.op_Implicit(System.Int64)~Cvb.Image.PIXELLIST">
            <summary>
            Implicit conversion.
            </summary>
            <param name="handle">Native handle.</param>
            <returns>New <c>PIXELLIST</c>.</returns>
        </member>
        <member name="M:Cvb.Image.PIXELLIST.op_Implicit(System.IntPtr)~Cvb.Image.PIXELLIST">
            <summary>
            Implicit conversion.
            </summary>
            <param name="handle">Native handle.</param>
            <returns>New <c>PIXELLIST</c>.</returns>
        </member>
        <member name="T:Cvb.Image.TDisplayScaleMode">
            <summary>
            Defines modes for treating high bit images when displaying them
            on an 8 bit display.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDisplayScaleMode.DSM_Global">
            Scale the image globally to fit into the gray scale range
            [0...255]. This can result in a darker overall impression of your 
            images if your images do not make full use of the dynamic range 
            available to the data type they are using.
        </member>
        <member name="F:Cvb.Image.TDisplayScaleMode.DSM_ViewPort">
            Scale only the currently visible gray values of the image to the
            range [0...255]. This mode will make fine gray value differences in
            your images more obvious when you zoom in.
        </member>
        <member name="T:Cvb.Image.TDrawAntiAliasMode">
            <summary>
            Defines the anti-alias mode to be used for drawing.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDrawAntiAliasMode.AAM_Off">
            <summary>No anti-aliasing used (fast).</summary>
        </member>
        <member name="T:Cvb.Image.TDrawMode">
            <summary>
            Defines how to apply the intensity value to an image plane while
            drawing.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDrawMode.DM_Set">
            <summary>Overwrite the pixel value with new intensity.</summary>
        </member>
        <member name="F:Cvb.Image.TDrawMode.DM_AND">
            <summary>
            Bit-wise and operation with intensity.
            Not supported on #DT_Float images.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDrawMode.DM_OR">
            <summary>
            Bit-wise or operation with intensity.
            Not supported on #DT_Float images.
            </summary>
        </member>
        <member name="T:Cvb.Image.TLicenseInfo">
            <summary>
            CVC license info.
            </summary>
        </member>
        <member name="F:Cvb.Image.TLicenseInfo.LI_NOLICENSE">
            <summary>
            No protection device.
            </summary>
        </member>
        <member name="F:Cvb.Image.TLicenseInfo.LI_COMMONVISIONBLOX">
            <summary>
            Common Vision Blox protection device.
            </summary>
        </member>
        <member name="F:Cvb.Image.TLicenseInfo.LI_CVC">
            <summary>
            Common Vision Concept protection device.
            </summary>
        </member>
        <member name="F:Cvb.Image.TLicenseInfo.LI_VISIONBLOX">
            <summary>
            Vision Blox protection device.
            </summary>
        </member>
        <member name="F:Cvb.Image.TLicenseInfo.LI_MINOS">
            <summary>
            Minos protection device.
            </summary>
        </member>
        <member name="F:Cvb.Image.TLicenseInfo.LI_HARDWARE">
            <summary>
            Hardware protection device, i.e. ThinkEye.
            </summary>
        </member>
        <member name="F:Cvb.Image.TLicenseInfo.LI_FOUNDATION_V1">
            <summary>
            foundation package license in a CVC dongle
            </summary>
        </member>
        <member name="F:Cvb.Image.TLicenseInfo.LI_CVB11_IM_LICENSE">
            <summary>
            Image Manager License in CVB 11 and up
            (detailed information about the license hardware is no longer 
            accessible)
            </summary>
        </member>
        <member name="F:Cvb.Image.TLicenseInfo.LI_CVB11_FP_LICENSE">
            <summary>
            Foundation Package License in CVB 11 and up
            (detailed information about the license hardware is no longer
            accessible)
            </summary>
        </member>
        <member name="T:Cvb.Image.TNormalizeMode">
            <summary>
            Defines the MeanVariance or TargetMinMax mode.
            </summary>
        </member>
        <member name="F:Cvb.Image.TNormalizeMode.Normalize_MeanVariance">
            <summary>
            Mode MeanVariance:
            Source image is stretched in such a way that the target image has a 
            mean value of TargetMeanMin and a variance of TargetVarianceMax.
            </summary>
        </member>
        <member name="F:Cvb.Image.TNormalizeMode.Normalize_MinMax">
            <summary>
            Mode MinMax:
            Source image is stretched in such a way that the target image shows 
            a minimum gray scale value of TargetMeanMin and a maximum gray scale 
            value of TargetVarianceMax.
            </summary>
        </member>
        <member name="T:Cvb.Image.TDatatype">
            <summary>
            Predefined values for data type bit field.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDatatype.Signed">
            <summary>
            Image pixels are signed if this bit is set; unsigned otherwise.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDatatype.Float">
            <summary>
            Image pixels are floating point if this bit is set; integer otherwise.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDatatype.Overlay">
            <summary>
            Image uses the least significant bit (0) as an overlay bit; normal 
            pixel otherwise.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDatatype.ComplexPacked">
            <summary>
            Image pixels are complex numbers.
            </summary><remarks>
            Pixel access is not directly feasible as the image data is packed 
            (meaning there is not a direct mapping between x/y coordinates and 
            the pixel).
            </remarks>
        </member>
        <member name="T:Cvb.Image.TColorModel">
            <summary>
            Color model descriptors (as returned by ImageColorModel).
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.Guess_RGB">
            <summary>
            Image does not carry color space indicator: is at least a three plane image.
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.Guess_Mono">
            <summary>
            Image does not carry color space indicator: is a one plane image.
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.Unknown">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.Mono">
            <summary>
            Monochrome (one plane) image.
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.RGB">
            <summary>
            Red/Green/Blue color image (three planes).
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.YUV">
            <summary>
            Luminance/chrominance color space (three planes).
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.HSI">
            <summary>
            Hue/Saturation/Intensity color space (three planes).
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.YCbCr">
            <summary>
            Luminance/chrominance color space (three planes).
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.LUV">
            <summary>
            CIELUV color space.
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.Lab">
            <summary>
            Lightness/corlor-opponent color space (three planes).
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.HLS">
            <summary>
            Hue/Lightness/Saturation color space (three planes).
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.YCC">
            <summary>
            Luminance/chrominance color space (three planes).
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.HSV">
            <summary>
            Hue/Saturation/Value color space (three planes).
            </summary>
        </member>
        <member name="F:Cvb.Image.TColorModel.XYZ">
            <summary>
            CIE XYZ color space (three planes).
            </summary>
        </member>
        <member name="T:Cvb.Image.TSubPixelMode">
            <summary>
            Available modes for FindSubPixelMaxima
            </summary>
        </member>
        <member name="F:Cvb.Image.TSubPixelMode.SP_None">
            <summary>
            no sub pixeling
            </summary>
        </member>
        <member name="F:Cvb.Image.TSubPixelMode.SP_Parabolic_Fast">
            <summary>
            fast approximation of a parabolic distribution
            </summary>
        </member>
        <member name="F:Cvb.Image.TSubPixelMode.SP_Parabolic_Accurate">
            <summary>
            accurate approximation of a parabolic distribution
            </summary>
        </member>
        <member name="F:Cvb.Image.TSubPixelMode.SP_Gauss">
            <summary>
            accurate approximation of a Gaussian distribution
            </summary>
        </member>
        <member name="T:Cvb.Image.TPanoramaMode">
            <summary>
            Panorama map modes for CreatePanoramicImageMap.
            </summary>
        </member>
        <member name="F:Cvb.Image.TPanoramaMode.Horizontal">
            <summary>
            Horizontal stitching
            </summary>
        </member>
        <member name="F:Cvb.Image.TPanoramaMode.Vertical">
            <summary>
            Vertical Stitching
            </summary>
        </member>
        <member name="T:Cvb.Image.TVPATRotation">
            <summary>
            Rotation modes for CreateRotatedImageMap.
            </summary>
        </member>
        <member name="F:Cvb.Image.TVPATRotation.VpatRot_Unknown">
            <summary>
            rotation is not known (may not be used with CreateRotatedImageMap)
            </summary>
        </member>
        <member name="F:Cvb.Image.TVPATRotation.VpatRot_0">
            <summary>
            no rotation (may not be used with CreateRotatedImageMap)
            </summary>
        </member>
        <member name="F:Cvb.Image.TVPATRotation.VpatRot_90">
            <summary>
            rotate by 90 degrees
            </summary>
        </member>
        <member name="F:Cvb.Image.TVPATRotation.VpatRot_180">
            <summary>
            rotate by 180 degrees
            </summary>
        </member>
        <member name="F:Cvb.Image.TVPATRotation.VpatRot_270">
            <summary>
            rotate by 270 degrees
            </summary>
        </member>
        <member name="T:Cvb.Image.TRawFileLayout">
            <summary>
            Memory layout for images serialized with ImageToMemoryRaw
            </summary>
        </member>
        <member name="F:Cvb.Image.TRawFileLayout.RFL_Interleaved">
            <summary>
            The pixels in the raw file are interleaved, i.e. for a pixel with n
            planes, the n component values of coordinate (0,0) are saved, then
            the n component values of coordinate (1,0) and so on.
            </summary>     
        </member>
        <member name="F:Cvb.Image.TRawFileLayout.RFL_Planar">
            <summary>
            The pixels in the raw file are saved plane by plane, starting with
            plane 0.
            </summary>
        </member>
        <member name="T:Cvb.Image.TMatrix">
            <summary>
            Defines a 2x2 transformation matrix.
            </summary>
        </member>
        <member name="F:Cvb.Image.TMatrix.A11">
            <summary>
            Top left element of matrix.
            </summary>
        </member>
        <member name="F:Cvb.Image.TMatrix.A12">
            <summary>
            Top right element of matrix.
            </summary>
        </member>
        <member name="F:Cvb.Image.TMatrix.A21">
            <summary>
            Bottom left element of matrix.
            </summary>
        </member>
        <member name="F:Cvb.Image.TMatrix.A22">
            <summary>
            Bottom right element of matrix.
            </summary>
        </member>
        <member name="T:Cvb.Image.TCoordinateMap">
            <summary>
            Defines a Common Vision Blox coordinate system consisting of the 
            origin and a transformation matrix, this is used for scaling and 
            rotation. 
            </summary>
        </member>
        <member name="F:Cvb.Image.TCoordinateMap.OrgX">
            <summary>
            x-coordinate of origin.
            </summary>
        </member>
        <member name="F:Cvb.Image.TCoordinateMap.OrgY">
            <summary>
            y-coordinate of origin.
            </summary>
        </member>
        <member name="F:Cvb.Image.TCoordinateMap.Matrix">
            <summary>
            scaling and rotation matrix.
            </summary>
        </member>
        <member name="T:Cvb.Image.TDRect">
            <summary>
            Is the equivalent of the Windows TRect with double precision scanlines.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDRect.Left">
            <summary>
            Left coordinate of area.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDRect.Top">
            <summary>
            Top coordinate of area.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDRect.Right">
            <summary>
            Right coordinate of area.
            </summary>
        </member>
        <member name="F:Cvb.Image.TDRect.Bottom">
            <summary>
            Bottom coordinate of area.
            </summary>
        </member>
        <member name="T:Cvb.Image.TArea">
            <summary>
            describes an area of interest which is defined by three points. The 
            locations of the three points define the scan orientation for data 
            access functions or the direction for CVB Tools.
            </summary>
        </member>
        <member name="F:Cvb.Image.TArea.X0">
            <summary>
            X coordinate of P0.
            </summary>
        </member>
        <member name="F:Cvb.Image.TArea.Y0">
            <summary>
            Y coordinate of P0.
            </summary>
        </member>
        <member name="F:Cvb.Image.TArea.X1">
            <summary>
            X coordinate of P1.
            </summary>
        </member>
        <member name="F:Cvb.Image.TArea.Y1">
            <summary>
            Y coordinate of P1.
            </summary>
        </member>
        <member name="F:Cvb.Image.TArea.X2">
            <summary>
            X coordinate of P2.
            </summary>
        </member>
        <member name="F:Cvb.Image.TArea.Y2">
            <summary>
            Y coordinate of P2.
            </summary>
        </member>
        <member name="T:Cvb.Image.TFLine">
            <summary>
            Callback function used in the Scan functions to access image data. 
            TFLine(IntPtr pPrivate, int linesToDo)
            </summary>
        </member>
        <member name="T:Cvb.Image.TFPixelUnary">
            <summary>
            Callback function used by the Scan functions to access image data. 
            TFPixelUnary(IntPtr pPrivate, IntPtr pPixel, int x, int y)
            </summary>
        </member>
        <member name="T:Cvb.Image.TFPixelBinary">
            <summary>
            Callback function used by the Scan functions to access image data.
            TFPixelBinary(IntPtr pPrivate, IntPtr pPixel1, IntPtr pPixel2, int x, int y)
            </summary>
        </member>
        <member name="T:Cvb.Image.TFNonlinear">
            <summary>
            Callback function which used by CreateTransformedImage. This function 
            gets the (x,y) pixel coordinates of an image as a reference, the pixel 
            location can then be altered in such a way that warping becomes 
            possible. 
            TFNonlinear(IntPtr pPrivate, ref double X, ref double y)
            </summary>
        </member>
        <member name="T:Cvb.Image.TFProgress">
            <summary>
            Callback function which is used by multiple functions to inform about 
            the current progress. 
            </summary>
        </member>
        <member name="T:Cvb.Image.PFFINALRELEASE">
            <summary>
            Callback used by CreateImageFromPointer to signal that the memory is 
            no longer needed.
            </summary>
        </member>
        <member name="T:Cvb.Image.tagVPAEntry">
            <summary>
            A single VPA entry.
            </summary>
        </member>
        <member name="F:Cvb.Image.tagVPAEntry.XEntry">
            <summary>
            X value of this entry.
            </summary>
        </member>
        <member name="F:Cvb.Image.tagVPAEntry.YEntry">
            <summary>
            Y value of this entry.
            </summary>
        </member>
        <member name="T:Cvb.Image.VPAEntry">
            <summary>
            A single VPA entry.
            </summary>
        </member>
        <member name="F:Cvb.Image.VPAEntry.XEntry">
            <summary>
            X value of this entry.
            </summary>
        </member>
        <member name="F:Cvb.Image.VPAEntry.YEntry">
            <summary>
            Y value of this entry.
            </summary>
        </member>
        <member name="T:Cvb.SharedObj">
            <summary>
            Helper class to manage the reference count of a CVB reference counted 
            object.
            </summary>
        </member>
        <member name="F:Cvb.SharedObj.handle_">
            <summary>
            Native object handle.
            </summary>
        </member>
        <member name="M:Cvb.SharedObj.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a shared CVB Obj.
            </summary><remarks>
            Shares the given <paramref name="handle"/> if <paramref name="share"/> 
            is <c>True</c>. Does nothing if <c>False</c>. The <c>False</c> case can
            help to adopt the lifetime of a <paramref name="handle"/> from a 
            p/invoke.
            </remarks><param name="handle">
            Handle of native CVB Object.
            </param><param name="share">
            <c>True</c> to increase the reference count of the CVB object at 
            <paramref name="handle"/>; <c>False</c> to do nothing.
            </param>
        </member>
        <member name="M:Cvb.SharedObj.ShareObject">
            <summary>
            overloadable share function; defaults to ShareObject from CVCImg.dll
            because that is what's used by most derived objects anyway
            </summary>
        </member>
        <member name="M:Cvb.SharedObj.ReleaseObject">
            <summary>
            overloadable release function; defaults to ReleaseObject from 
            CVCImg.dll because that is what's used by most derived objects anyway
            </summary>
        </member>
        <member name="M:Cvb.SharedObj.#ctor(System.IntPtr)">
            <summary>
            Creates a shared CVB Obj and shares the given 
            <paramref name="handle"/>.
            </summary><param name="handle">
            Handle of native CVB Object.
            </param>
        </member>
        <member name="M:Cvb.SharedObj.#ctor">
            <summary>
            Creates an unattached shared object.
            </summary>
        </member>
        <member name="M:Cvb.SharedObj.Finalize">
            <summary>
            Finalizer.
            </summary><remarks>
            Decreases the reference count of the associated ative CVB Object.
            </remarks>
        </member>
        <member name="M:Cvb.SharedObj.Dispose">
            <summary>
            Descreases the reference count of the associated native CVB Object and
            detaches itself from the handle.
            </summary>
        </member>
        <member name="M:Cvb.SharedObj.Dispose(System.Boolean)">
            <summary>
            Disposes (decreases reference count) of the associated native object.
            </summary><remarks>
            Always call the base class method if derived.
            </remarks><param name="disposing">
            <c>True</c> if called directly from <see cref="T:System.IDisposable"/>
            interface; <c>False</c> if called from finalizer.
            </param>
        </member>
        <member name="M:Cvb.SharedObj.op_Implicit(Cvb.SharedObj)~System.Int32">
            <summary>
            Implicit conversion.
            </summary>
            <param name="obj">Object to convert to handle.</param>
            <returns>Handle as <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Cvb.SharedObj.op_Implicit(Cvb.SharedObj)~System.Int64">
            <summary>
            Implicit conversion.
            </summary>
            <param name="obj">Object to convert to handle.</param>
            <returns>Handle as <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Cvb.SharedObj.op_Implicit(Cvb.SharedObj)~System.IntPtr">
            <summary>
            Implicit conversion.
            </summary>
            <param name="obj">Object to convert to handle.</param>
            <returns>Handle as <see cref="T:System.IntPtr"/>.</returns>
        </member>
        <member name="M:Cvb.SharedObj.op_Implicit(Cvb.SharedObj)~Cvb.Image.OBJ">
            <summary>
            Implicit conversion.
            </summary>
            <param name="obj">Object to convert to handle.</param>
            <returns>Handle as <see cref="T:Cvb.Image.OBJ"/>.</returns>
        </member>
        <member name="M:Cvb.SharedObj.ToString">
            <summary>
            Gets the string representation of the handle.
            </summary><returns>
            <see cref="M:System.IntPtr.ToString"/>.
            </returns>
        </member>
        <member name="M:Cvb.SharedObj.Equals(System.Object)">
            <summary>
            Gets whether <paramref name="obj"/>s handle is equal to this one.
            </summary>
            <param name="obj">Other object to compare to.</param>
            <returns><b>true</b> if <paramref name="obj"/> is of a compatible 
            type and its handles are equal; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Cvb.SharedObj.GetHashCode">
            <summary>
            Gets the hash code of the underlying handle.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Cvb.SharedObj.op_Inequality(Cvb.SharedObj,Cvb.SharedObj)">
            <summary>
            Gets whether <paramref name="lhs"/> is unequal to 
            <paramref name="rhs"/>.
            </summary>
            <param name="lhs">Left-hand object.</param>
            <param name="rhs">Right-hand object.</param>
            <returns><b>true</b> if <paramref name="lhs"/> is unequal to
            <paramref name="rhs"/>; <b>false</b> if equal.</returns>
        </member>
        <member name="M:Cvb.SharedObj.op_Equality(Cvb.SharedObj,Cvb.SharedObj)">
            <summary>
            Gets whether <paramref name="lhs"/> is equal to 
            <paramref name="rhs"/>.
            </summary>
            <param name="lhs">Left-hand object.</param>
            <param name="rhs">Right-hand object.</param>
            <returns><b>true</b> if <paramref name="lhs"/> is equal to
            <paramref name="rhs"/>; <b>false</b> if unequal.</returns>
        </member>
        <member name="P:Cvb.SharedObj.Disposed">
            <summary>
            Gets whether this object is disposed. 
            </summary><value>
            <c>True</c> if <see cref="P:Cvb.SharedObj.Handle"/> is <see cref="F:System.IntPtr.Zero"/>;
            <c>False</c> if object reference is available.
            </value>
        </member>
        <member name="P:Cvb.SharedObj.Handle">
            <summary>
            Gets or sets the native object handle.
            </summary><remarks>
            Getting the handle simply returns it. Setting, though, releases the 
            stored object instance, shares the new instance and replaces the value.
            </remarks><value>
            Handle to native CVB Object. A value unequal 
            <see cref="F:System.IntPtr.Zero"/> indicates a valid connected object.
            </value>
        </member>
        <member name="T:Cvb.SharedImg">
            <summary>
            Helper class to manage the reference count of a CVB reference counted 
            IMG object.
            </summary>
        </member>
        <member name="M:Cvb.SharedImg.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a shared CVB IMG.
            </summary><remarks>
            Shares the given <paramref name="handle"/> if <paramref name="share"/> 
            is <c>True</c>. Does nothing if <c>False</c>. The <c>False</c> case can
            help to adopt the lifetime of a <paramref name="handle"/> from a 
            p/invoke.
            </remarks><param name="handle">
            Handle of native CVB Object.
            </param><param name="share">
            <c>True</c> to increase the reference count of the CVB object at 
            <paramref name="handle"/>; <c>False</c> to do nothing.
            </param>
        </member>
        <member name="M:Cvb.SharedImg.#ctor(System.IntPtr)">
            <summary>
            Creates a shared CVB IMG and shares the given 
            <paramref name="handle"/>.
            </summary><param name="handle">
            Handle of native CVB Object.
            </param>
        </member>
        <member name="M:Cvb.SharedImg.#ctor(System.Int64)">
            <summary>
            Creates a shared CVB IMG and shares the given 
            <paramref name="handle"/>.
            </summary><remarks>
            Use this constructor when getting the handle from an ActiveX control.
            </remarks><param name="handle">
            Handle as a <c>long</c> integer.
            </param>
        </member>
        <member name="M:Cvb.SharedImg.#ctor(System.Int32)">
            <summary>
            Creates a shared CVB IMG and shares the given 
            <paramref name="handle"/>.
            </summary><remarks>
            Use this constructor when getting the handle from an ActiveX control.
            </remarks><param name="handle">
            Handle as a <c>long</c> integer.
            </param>
        </member>
        <member name="M:Cvb.SharedImg.#ctor(Cvb.Image.IMG,System.Boolean)">
            <summary>
            Creates a shared image from the given image <paramref name="handle"/>
            and <paramref name="share"/> it if needed.
            </summary><param name="handle">
            Handle as a <see cref="T:Cvb.Image.IMG"/> handle.
            </param><param name="share">
            <c>True</c> to increase the reference count of the CVB object at 
            <paramref name="handle"/>; <c>False</c> to do nothing.
            </param>
        </member>
        <member name="M:Cvb.SharedImg.#ctor(Cvb.Image.IMG)">
            <summary>
            Creates a shared image from the given image <paramref name="handle"/>
            and shares it.
            </summary><param name="handle">
            Handle as a <see cref="T:Cvb.Image.IMG"/> handle.
            </param>
        </member>
        <member name="M:Cvb.SharedImg.#ctor">
            <summary>
            Creates an unattached shared image.
            </summary>
        </member>
        <member name="M:Cvb.SharedImg.op_Implicit(Cvb.SharedImg)~Cvb.Image.IMG">
            <summary>
            Implicit conversion.
            </summary>
            <param name="obj">Object to convert to handle.</param>
            <returns>Handle as <see cref="T:Cvb.Image.OBJ"/>.</returns>
        </member>
        <member name="T:Cvb.SharedPixelList">
            <summary>
            Helper class to manage the reference count of a CVB reference counted 
            PIXELLIST object.
            </summary>
        </member>
        <member name="M:Cvb.SharedPixelList.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a shared CVB PIXELLIST.
            </summary><remarks>
            Shares the given <paramref name="handle"/> if <paramref name="share"/> 
            is <c>True</c>. Does nothing if <c>False</c>. The <c>False</c> case can
            help to adopt the lifetime of a <paramref name="handle"/> from a 
            p/invoke.
            </remarks><param name="handle">
            Handle of native CVB Object.
            </param><param name="share">
            <c>True</c> to increase the reference count of the CVB object at 
            <paramref name="handle"/>; <c>False</c> to do nothing.
            </param>
        </member>
        <member name="M:Cvb.SharedPixelList.#ctor(System.IntPtr)">
            <summary>
            Creates a shared CVB PIXELLIST and shares the given 
            <paramref name="handle"/>.
            </summary><param name="handle">
            Handle of native CVB Object.
            </param>
        </member>
        <member name="M:Cvb.SharedPixelList.#ctor(Cvb.Image.PIXELLIST,System.Boolean)">
            <summary>
            Creates a shared CVB PIXELLIST.
            </summary><remarks>
            Shares the given <paramref name="handle"/> if <paramref name="share"/> 
            is <c>True</c>. Does nothing if <c>False</c>. The <c>False</c> case can
            help to adopt the lifetime of a <paramref name="handle"/> from a 
            p/invoke.
            </remarks><param name="handle">
            Handle of native CVB Object.
            </param><param name="share">
            <c>True</c> to increase the reference count of the CVB object at 
            <paramref name="handle"/>; <c>False</c> to do nothing.
            </param>
        </member>
        <member name="M:Cvb.SharedPixelList.#ctor(Cvb.Image.PIXELLIST)">
            <summary>
            Creates a shared CVB PIXELLIST and shares the given 
            <paramref name="handle"/>.
            </summary><param name="handle">
            Handle of native CVB Object.
            </param>
        </member>
        <member name="M:Cvb.SharedPixelList.#ctor">
            <summary>
            Creates an unattached shared pixel list.
            </summary>
        </member>
        <member name="M:Cvb.SharedPixelList.op_Implicit(Cvb.SharedPixelList)~Cvb.Image.PIXELLIST">
            <summary>
            Implicit conversion.
            </summary>
            <param name="obj">Object to convert to handle.</param>
            <returns>Handle as <see cref="T:Cvb.Image.OBJ"/>.</returns>
        </member>
    </members>
</doc>
