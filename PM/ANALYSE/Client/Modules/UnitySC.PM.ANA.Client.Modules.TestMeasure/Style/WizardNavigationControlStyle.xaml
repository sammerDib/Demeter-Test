<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wizardControl="clr-namespace:UnitySC.Shared.UI.Controls.WizardNavigationControl;assembly=UnitySC.Shared.UI"
                    xmlns:converters="clr-namespace:UnitySC.Shared.UI.Converters;assembly=UnitySC.Shared.UI">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/UnitySC.Shared.UI;component/Controls/Themes/Generic.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="MyFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="10,2,3,2"
                           SnapsToDevicePixels="true"
                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                           StrokeThickness="1"
                           StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type wizardControl:WizardNavigationControl}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListViewItem">
                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                    <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
                    <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrush}" />
                    <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
                    <Setter Property="FocusVisualStyle" Value="{StaticResource MyFocusVisualStyle}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListViewItem">

                                <Grid Margin="0,0,-10,0"  Height="30">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition Width="auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid Grid.Column="1"  Margin="0">
                                        <!--<Border x:Name="MiddleRectangle" Background="{Binding Path=Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1,0,1" />-->
                                        <Rectangle x:Name="MiddleRectangle" Margin="-1,0,-1,0" Fill="{Binding Path=Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Stroke="{Binding Path=BorderBrush, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" StrokeThickness="1" />

                                        <!-- For the first item add to the grid <Margin="-15,0,0,0"-->
                                        <Grid>
                                            <!--<Ellipse Name="ValidFlag" Width="10" Height="10" Margin="3,0,0,0" Fill="Green" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Hidden" />-->
                                            <TextBlock Grid.Column="1" Name="ItemName" Text="{Binding Name}" Margin="5,5,5,5" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" />
                                        </Grid>
                                    </Grid>
                                    <Path Grid.Column="0"  x:Name="LeftPath" Data="M 15,0 H 3 C 1.338,0 0,1.338 0,3 v 24 c 0,1.662 1.338,3 3,3 h 12" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" Margin="0,0,-2,0" StrokeThickness="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Stretch="Uniform">
                                    </Path>
                                    <Path Grid.Column="2" x:Name="RightPath" Data="m 0,0 h 12 c 1.662,0 3,1.338 3,3 v 24 c 0,1.662 -1.338,3 -3,3 H 0" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" Margin="-2,0,0,0" StrokeThickness="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Stretch="Uniform" />
                                    <!-- First item path-->
                                    <Path Grid.Column="0"  x:Name="LeftFirstItemPath" Data="M 15,0 H 3 C 1.338,0 0,1.338 0,3 v 24 c 0,1.662 1.338,3 3,3 h 12" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" Margin="0,0,-2,0" StrokeThickness="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Stretch="Uniform" Visibility="Collapsed" />
                                    <!-- Last item path-->
                                    <Path Grid.Column="2"  x:Name="RightLastItemPath" Data="m 0,0 h 12 c 1.662,0 3,1.338 3,3 v 24 c 0,1.662 -1.338,3 -3,3 H 0" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" Margin="-2,0,0,0" StrokeThickness="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Stretch="Uniform" Visibility="Collapsed" />

                                    <!--Selection underline-->
                                    <Path Grid.Column="0" x:Name="UnderlinePathLeft" Data="M0,30 1,29 15,29 15,30z" Stroke="{StaticResource WizardSelectionUnderlineBrush}" Margin="2,0,-4,1" HorizontalAlignment="Stretch" Stretch="Fill" Height="2" StrokeThickness="1" VerticalAlignment="Bottom" Visibility="Collapsed" />
                                    <Path Grid.Column="2" x:Name="UnderlinePathRight" Data="M0,30 0,29 4,29 3,30z" Stroke="{StaticResource WizardSelectionUnderlineBrush}" Margin="-2,0,10,1" HorizontalAlignment="Stretch" Stretch="Fill" Height="2" StrokeThickness="1" VerticalAlignment="Bottom" Visibility="Collapsed" />
                                    <Path Grid.Column="1" x:Name="UnderlinePathMiddle" Data="M0,30 0,29 10,29 10,30z" Stroke="{StaticResource WizardSelectionUnderlineBrush}" Margin="0,0,0,1" HorizontalAlignment="Stretch" Stretch="Fill" Height="2" StrokeThickness="1" VerticalAlignment="Bottom" Visibility="Collapsed" />
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsMeasure}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource WizardMeasureBackgroundBrush}" />
                                    </DataTrigger>

                                    <!--<DataTrigger Binding="{Binding IsValidated}" Value="True">
                                        <Setter TargetName="ValidFlag" Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="{StaticResource ButtonForegroundBrushDisabled}" />
                                        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrushDisabled}" />
                                        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushDisabled}" />
                                    </Trigger>-->

                                    <!--Underline IsMouseOver Or IsSelected-->
                                    <DataTrigger Value="true">
                                        <DataTrigger.Binding>
                                            <MultiBinding Converter="{converters:BooleanOrConverter}">
                                                <Binding Path="IsSelected" RelativeSource="{RelativeSource Self}" />
                                                <Binding Path="IsMouseOver" RelativeSource="{RelativeSource Self}" />
                                            </MultiBinding>
                                        </DataTrigger.Binding>
                                        <Setter TargetName="UnderlinePathLeft" Property="Visibility" Value="Visible" />
                                        <Setter TargetName="UnderlinePathMiddle" Property="Visibility" Value="Visible" />
                                        <Setter TargetName="UnderlinePathRight" Property="Visibility" Value="Visible" />
                                    </DataTrigger>

                                    <!--Step and MouseOver-->
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrushHover}" />
                                        <Setter Property="Foreground" Value="{StaticResource WizardSelectionTextBrush}" />
                                        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushHover }" />
                                    </Trigger>

                                    <!--Measure and MouseOver-->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=IsMeasure}" Value="true" />
                                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{StaticResource WizardMeasureHoverBrush}" />
                                        <Setter Property="Foreground" Value="{StaticResource WizardSelectionTextBrush}" />
                                        <Setter Property="BorderBrush" Value="{StaticResource WizardMeasureHoverBorderBrush }" />
                                    </MultiDataTrigger>

                                    <Trigger Property="IsSelected" Value="true">
                                        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrushChecked}" />
                                        <Setter Property="Foreground" Value="{StaticResource WizardSelectionTextBrush}" />
                                        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrushChecked }" />
                                    </Trigger>

                                    <!--Measure an selected-->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=IsMeasure}" Value="true" />
                                            <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Background" Value="{StaticResource WizardMeasurePressedBrush }" />
                                        <Setter Property="Foreground" Value="{StaticResource WizardSelectionTextBrush}" />
                                        <Setter Property="BorderBrush" Value="{StaticResource WizardMeasurePressedBorderBrush }" />
                                    </MultiDataTrigger>

                                    <DataTrigger Value="True">
                                        <DataTrigger.Binding>
                                            <MultiBinding Converter="{wizardControl:IsFirstItemConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding />
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}" Path="ItemsSource" />
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </DataTrigger.Binding>
                                        <Setter TargetName="LeftPath" Property="Visibility" Value="Collapsed" />
                                        <Setter TargetName="LeftFirstItemPath" Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                    <DataTrigger Value="True">
                                        <DataTrigger.Binding>
                                            <MultiBinding Converter="{wizardControl:IsLastItemConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding />
                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}" Path="ItemsSource" />
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </DataTrigger.Binding>
                                        <Setter TargetName="RightPath" Property="Visibility" Value="Collapsed" />
                                        <Setter TargetName="RightLastItemPath" Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="LayoutTransform">
                        <Setter.Value>
                            <ScaleTransform ScaleX="1" ScaleY="1" />
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <EventTrigger RoutedEvent="Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.1">
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="LayoutTransform.ScaleX" From="0" To="1" Duration="0:0:0.2">
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <WrapPanel>
                        <ItemsPresenter Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
                    </WrapPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>