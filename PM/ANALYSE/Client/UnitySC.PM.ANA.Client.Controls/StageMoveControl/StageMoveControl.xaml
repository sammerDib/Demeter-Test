<UserControl x:Class="UnitySC.PM.ANA.Client.Controls.StageMoveControl.StageMoveControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:localExtensions="clr-namespace:UnitySC.PM.ANA.Client.Controls.Extensions"
             xmlns:markupextensions="clr-namespace:UnitySC.PM.ANA.Client.Controls.MarkupExtensions"
             xmlns:navigationcontrols="clr-namespace:UnitySC.PM.ANA.Client.Controls.NavigationControls"
             xmlns:local="clr-namespace:UnitySC.PM.ANA.Client.Controls.StageMoveControl"
             xmlns:proxyLight="clr-namespace:UnitySC.PM.ANA.Client.Proxy.Light;assembly=UnitySC.PM.ANA.Client.Proxy"
             xmlns:proxyStage="clr-namespace:UnitySC.PM.ANA.Client.Proxy.Axes;assembly=UnitySC.PM.ANA.Client.Proxy"             
             xmlns:sharedControls="clr-namespace:UnitySC.Shared.UI.Controls;assembly=UnitySC.Shared.UI"
             xmlns:converters="clr-namespace:UnitySC.Shared.UI.Converters;assembly=UnitySC.Shared.UI"
             xmlns:sharedExtensions="clr-namespace:UnitySC.Shared.UI.Extensions;assembly=UnitySC.Shared.UI"
             mc:Ignorable="d"
             d:DesignHeight="800" d:DesignWidth="300">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/UnitySC.Shared.UI;component/Controls/Themes/Generic.xaml" />
                <ResourceDictionary Source="pack://application:,,,/UnitySC.Shared.UI;component/Styles/ImageDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="{x:Type local:StageMoveButton}" x:Key="ButtonMoveStyle">
                <Setter Property="Content" Value="" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:StageMoveButton}">
                            <Grid>
                                <sharedControls:ImageButton x:Name="button" ToolTip="{TemplateBinding ToolTip}" Style="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ButtonStyle}" ImageGeometry="{TemplateBinding ImageGeometry}" ImageGeometryBrush="{StaticResource ButtonForegroundBrush}">
                                    <sharedControls:ImageButton.IsEnabled>
                                        <MultiBinding Converter="{converters:DictionaryItemConverter}">
                                            <markupextensions:AxesSupervisorBinding Path="AxesVM.CanMoveDictionary" />
                                            <Binding Path="MoveType" RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </sharedControls:ImageButton.IsEnabled>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="PreviewMouseDown">
                                            <i:InvokeCommandAction Command="{markupextensions:AxesSupervisorBinding AxesVM.MoveStepStart}" CommandParameter="{Binding MoveType,RelativeSource={RelativeSource TemplatedParent}}" />
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="PreviewMouseUp">
                                            <i:InvokeCommandAction Command="{markupextensions:AxesSupervisorBinding AxesVM.MoveStepStop}" CommandParameter="{Binding MoveType,RelativeSource={RelativeSource TemplatedParent}}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </sharedControls:ImageButton>
                                <Border Visibility="{markupextensions:AxesSupervisorBinding AxesVM.IsReadyToStartMove, Converter={converters:InvertedBooleanToVisibilityConverter},FallbackValue=Collapsed}" Background="#60000000" IsHitTestVisible="False" BorderBrush="Transparent"  BorderThickness="0" CornerRadius="3" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type sharedControls:TextBoxUnit}" x:Key="MoveTextBoxStyle" BasedOn="{StaticResource {x:Type sharedControls:TextBoxUnit}}">
                <EventSetter Event="PreviewLostKeyboardFocus" Handler="Textbox_PreviewLostKeyboardFocus" />
                <Setter Property="IsEnabled" Value="{markupextensions:AxesSupervisorBinding AxesVM.IsReadyToStartMove}" />
                <Setter Property="MaxLength" Value="10" />
                <Setter Property="localExtensions:SimpleTextBoxMaskExt.Mask" Value="Decimal" />
                <Setter Property="sharedExtensions:TextBoxExt.OnEnterAndEscUpdate" Value="True" />
            </Style>

            <Style TargetType="{x:Type sharedControls:TextBoxUnit}" x:Key="MoveTextBoxStyleNotRounded" BasedOn="{StaticResource MoveTextBoxStyle}">
                <Setter Property="Border.CornerRadius" Value="0" />
            </Style>

            <Style TargetType="{x:Type TextBox}" x:Key="LightTextBoxStyle">
                <EventSetter Event="PreviewLostKeyboardFocus" Handler="Textbox_PreviewLostKeyboardFocus" />
                <Setter Property="MaxLength" Value="10" />
                <Setter Property="localExtensions:SimpleTextBoxMaskExt.Mask" Value="Decimal" />
            </Style>

            <DataTemplate x:Key="LightItemTemplate" DataType="{x:Type proxyLight:LightVM}">
                <Grid Background="Transparent" ToolTip="{Binding Description}" IsEnabled="{Binding IsLocked, Converter={converters:InvertedBooleanConverter}}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="150" />
                    </Grid.ColumnDefinitions>
                    <sharedControls:ImageToggleButton x:Name="TurnOnButton"  Width="30" ImageGeometry="{StaticResource LightSolidGeometry}" IsChecked="{Binding IsTurnedOn}" />
                    <Label Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Content="{Binding Name}" Style="{StaticResource LabelForm}"></Label>
                    <sharedControls:DoubleUpDown Grid.Column="2" Value="{Binding Intensity,Mode=TwoWay, StringFormat='{}{0:0.#}'}" Maximum="100" Minimum="0" IsEnabled="{Binding IsTurnedOn}" MaxLength="5" Unit="%"
                                       ImageGeometryDown="{StaticResource MinusGeometry}"
                                       ImageGeometryBrushDown="{StaticResource ButtonForegroundBrush}"
                                       ImageGeometryUp="{StaticResource PlusGeometry}"
                                       ImageGeometryBrushUp="{StaticResource ButtonForegroundBrush}"></sharedControls:DoubleUpDown>
                </Grid>
            </DataTemplate>

            <Style x:Key="ListBoxItemLightStyle" TargetType="ListBoxItem">
                <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                <Setter Property="VerticalContentAlignment" Value="Stretch"></Setter>

                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="OverridesDefaultStyle" Value="true" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <ContentPresenter VerticalAlignment="Center" Margin="0,5" />
                            <ControlTemplate.Triggers>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ListBoxLights" TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter Property="ItemTemplate" Value="{StaticResource LightItemTemplate}" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemLightStyle}" />
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <ScrollViewer x:Name="scrollViewver" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
        <ScrollViewer.Style>
            <Style TargetType="ScrollViewer">
                <Setter Property="Padding" Value="0 0 19 0" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path= ComputedVerticalScrollBarVisibility}" Value="Visible">
                        <Setter Property="Padding" Value="0 0 2 0" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </ScrollViewer.Style>
        <StackPanel Orientation="Vertical" MaxWidth="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}, Path=ViewportWidth}">
            <!--<Button Grid.ColumnSpan="2" Margin="5,5,5,5" Width="100" Visibility="{Binding CanAutoSet, Converter={converters:BooleanToVisibilityConverter}, FallbackValue=Collapsed}">Auto Set</Button>-->

            <StackPanel Visibility="{Binding IsAutofocusAvailable, Converter={converters:BooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                <!-- AutoFocus-->
                <Grid Margin="90,3,0,3" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Button x:Name="StartAutoFocusButton" Grid.Column="0" Visibility="{Binding IsAutofocusInProgress, Mode=OneWay, Converter={converters:InvertedBooleanToVisibilityConverter}}" Click="StartAutoFocusButton_Click"  MinWidth="100" HorizontalAlignment="Right" VerticalAlignment="Center">Autofocus</Button>
                    <Button x:Name="StopAutoFocusButton" Grid.Column="0" Visibility="{Binding IsAutofocusInProgress, Mode=OneWay, Converter={converters:BooleanToVisibilityConverter}}" Click="StopAutoFocusButton_Click"  MinWidth="100" HorizontalAlignment="Right" VerticalAlignment="Center">Stop Autofocus</Button>
                    <sharedControls:StepStateImage Grid.Column="1" Height="16" Width="16" Margin="10,5" StepState="InProgress" ToolTip="{Binding AutoFocusSettings.ErrorMessage}" Visibility="{Binding IsAutofocusInProgress, Mode=OneWay, Converter={converters:BooleanToVisibilityConverter}}"/>
                </Grid>
                <Separator />
            </StackPanel>

            <Label Content="LIGHT TOP" Style="{StaticResource TitleLevel2}" />
            <ListBox Margin="23,0,0,0"   ItemsSource="{markupextensions:LightsSupervisorBinding Path=LightsUp}" Style="{StaticResource ListBoxLights}" ScrollViewer.CanContentScroll="False">
            </ListBox>
            <Rectangle Fill="{StaticResource SeparatorBrush}" Height="1" Margin="0,10"></Rectangle>
            <Grid>
                <StackPanel Orientation="Vertical" IsEnabled="{markupextensions:AxesSupervisorBinding AxesVM.IsLocked, Converter={converters:InvertedBooleanConverter}}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="80" />
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Label Style="{StaticResource TitleLevel2}">AXIS</Label>
                        <ToggleButton Grid.Column="1" Style="{StaticResource ToggleAnimatedSwitchNew}" IsChecked="{markupextensions:AxesSupervisorBinding Path=AxesVM.IsKeyboardInputMode}" IsEnabled="{markupextensions:AxesSupervisorBinding  AxesVM.Status.IsMoving, Converter={converters:InvertedBooleanConverter}}" HorizontalAlignment="Left" />
                        <Border Grid.Column="1" Background="Transparent" IsHitTestVisible="{markupextensions:AxesSupervisorBinding Path=AxesVM.IsKeyboardInputMode}"></Border>
                        <TextBlock Grid.Column="2" Margin="5,0,0,0" VerticalAlignment="Center" FontSize="11">Use keyboard Motion Control</TextBlock>
                    </Grid>
                    <Rectangle Fill="{StaticResource SeparatorLightBrush}" Height="1" Margin="10,10"></Rectangle>
                    <Grid Margin="23,0,0,5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="90" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock VerticalAlignment="Center">Z Top</TextBlock>
                        <local:StageMoveButton Width="30" HorizontalAlignment="Center" ToolTip="Z Top move" Style="{StaticResource ButtonMoveStyle}" ButtonStyle="{StaticResource LeftImageButton}"  ImageGeometry="{StaticResource ZoomOutGeometry}" MoveType="{x:Static proxyStage:AxesMoveTypes.ZTopPlus}" Grid.Column="1" IsEnabled="{markupextensions:AxesSupervisorBinding AxesVM.IsLocked, Converter={converters:InvertedBooleanConverter}}">
                        </local:StageMoveButton>

                        <sharedControls:TextBoxUnit x:Name="TextZTopPosition" Grid.Column="2" Text="{markupextensions:AxesSupervisorBinding Path=AxesVM.Position.ZTop, StringFormat='{}{0:F3}'}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Style="{StaticResource MoveTextBoxStyleNotRounded}" Unit="mm" IsEnabled="{markupextensions:AxesSupervisorBinding AxesVM.IsLocked, Converter={converters:InvertedBooleanConverter}}">
                            <sharedControls:TextBoxUnit.InputBindings>
                                <KeyBinding Command="{markupextensions:AxesSupervisorBinding AxesVM.MoveZTop}" Key="Enter" CommandParameter="{Binding ElementName=TextZTopPosition, Path=Text, Converter={converters:StringToDoubleConverter}}">
                                </KeyBinding>
                            </sharedControls:TextBoxUnit.InputBindings>
                        </sharedControls:TextBoxUnit>
                        <local:StageMoveButton Grid.Column="3" Width="30" HorizontalAlignment="Center" ToolTip="Z Top move" Style="{StaticResource ButtonMoveStyle}" ButtonStyle="{StaticResource RightImageButton}"  ImageGeometry="{StaticResource ZoomInGeometry}" MoveType="{x:Static proxyStage:AxesMoveTypes.ZTopMinus}">
                        </local:StageMoveButton>
                    </Grid>
                    <Grid Margin="23,10,0,0" Visibility="{Binding IsDieNavigation, Converter={converters:BooleanToVisibilityConverter}, FallbackValue=Collapsed }">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" VerticalAlignment="Center">Column</TextBlock>
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Text="{markupextensions:AxesSupervisorBinding AxesVM.CurrentDieUserIndex.Column}"></TextBlock>
                        <TextBlock Grid.Column="2" VerticalAlignment="Center">Row</TextBlock>
                        <TextBlock Grid.Column="3" VerticalAlignment="Center" Text="{markupextensions:AxesSupervisorBinding AxesVM.CurrentDieUserIndex.Row}"></TextBlock>
                        <Button Grid.Column="4" Click="ButtonSelectCurrentDie_Click">...</Button>
                    </Grid>
                    <Grid Margin="23,10,0,10" Height="Auto">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <local:StageMoveButton Grid.Row="1" Width="30" Height="30"  HorizontalAlignment="Center" ToolTip="X move" Style="{StaticResource ButtonMoveStyle}" ButtonStyle="{StaticResource NormalImageButton}" ImageGeometry="{StaticResource CaretLeftGeometry}" MoveType="{x:Static proxyStage:AxesMoveTypes.XMinus}">
                        </local:StageMoveButton>
                        <local:StageMoveButton Grid.Row="1" Height="30" Grid.Column="2" Width="30" Style="{StaticResource ButtonMoveStyle}" ButtonStyle="{StaticResource NormalImageButton}"  ImageGeometry="{StaticResource CaretRightGeometry}" MoveType="{x:Static proxyStage:AxesMoveTypes.XPlus}">
                        </local:StageMoveButton>
                        <local:StageMoveButton Grid.Column="1" Width="30" Height="30"  HorizontalAlignment="Center" ToolTip="Y move" Style="{StaticResource ButtonMoveStyle}" ButtonStyle="{StaticResource NormalImageButton}" ImageGeometry="{StaticResource CaretTopGeometry}" MoveType="{x:Static proxyStage:AxesMoveTypes.YPlus}">
                        </local:StageMoveButton>
                        <local:StageMoveButton Grid.Column="1" Grid.Row="2"  Width="30" Height="30" HorizontalAlignment="Center" ToolTip="Y move" Style="{StaticResource ButtonMoveStyle}" ButtonStyle="{StaticResource NormalImageButton}" ImageGeometry="{StaticResource CaretBottomGeometry}" MoveType="{x:Static proxyStage:AxesMoveTypes.YMinus}">
                        </local:StageMoveButton>

                        <navigationcontrols:WaferNavigationControl Grid.Row="1" Grid.Column="1 " Margin="5,5" WaferDimentionalCharac="{Binding WaferDimentionalCharac}" HorizontalAlignment="Center"
                                                       
                                                       Points="{Binding MeasurePoints}"
                                                       Visibility="{Binding IsDieNavigation, Converter={converters:InvertedBooleanToVisibilityConverter}, FallbackValue=Collapsed }">
                            <navigationcontrols:WaferNavigationControl.WaferBorderPen>
                                <Pen Brush="Black" Thickness="2" />
                            </navigationcontrols:WaferNavigationControl.WaferBorderPen>
                            <navigationcontrols:WaferNavigationControl.CurrentPosBorderPen>
                                <Pen Brush="Red" Thickness="1" />
                            </navigationcontrols:WaferNavigationControl.CurrentPosBorderPen>
                        </navigationcontrols:WaferNavigationControl>

                        <navigationcontrols:DieNavigationControl Grid.Row="1" Grid.Column="1" Margin="5,5" DieDimentionalCharac="{Binding DieDimentionalCharac, Mode=OneWay}" HorizontalAlignment="Center"
                                                     AxesPositionX="{markupextensions:AxesSupervisorBinding AxesVM.PositionOnDie.X}"
                                                     AxesPositionY="{markupextensions:AxesSupervisorBinding AxesVM.PositionOnDie.Y}"
                                                     CurrentDieCol="{markupextensions:AxesSupervisorBinding AxesVM.CurrentDieIndex.Column}"
                                                     CurrentDieRow="{markupextensions:AxesSupervisorBinding AxesVM.CurrentDieIndex.Row}"
                                                     Points="{Binding MeasurePointsOnDie}"
                                                     Visibility="{Binding IsDieNavigation, Converter={converters:BooleanToVisibilityConverter}, FallbackValue=Collapsed }">
                            <navigationcontrols:DieNavigationControl.DieBorderPen>
                                <Pen Brush="Black" Thickness="2" />
                            </navigationcontrols:DieNavigationControl.DieBorderPen>
                            <navigationcontrols:DieNavigationControl.StreetBorderPen>
                                <Pen Brush="Black" Thickness="1" />
                            </navigationcontrols:DieNavigationControl.StreetBorderPen>
                            <navigationcontrols:DieNavigationControl.CurrentPosBorderPen>
                                <Pen Brush="Red" Thickness="3" />
                            </navigationcontrols:DieNavigationControl.CurrentPosBorderPen>
                        </navigationcontrols:DieNavigationControl>
                    </Grid>
                    <Grid Margin="23,5,0,5" Visibility="{Binding IsDieNavigation, Converter={converters:InvertedBooleanToVisibilityConverter}, FallbackValue=Visible }">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="35" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!--<Label Margin="0" Style="{StaticResource LabelForm}" Padding="0">X</Label>-->
                        <TextBlock VerticalAlignment="Center">X</TextBlock>
                        <sharedControls:TextBoxUnit x:Name="TextXPosition" Grid.Column="1" Text="{markupextensions:AxesSupervisorBinding Path=AxesVM.Position.X, StringFormat='{}{0:F3}', Mode=OneWay}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Style="{StaticResource MoveTextBoxStyle}" Unit="mm">
                            <sharedControls:TextBoxUnit.InputBindings>
                                <KeyBinding Command="{markupextensions:AxesSupervisorBinding AxesVM.MoveX}" Key="Enter" CommandParameter="{Binding ElementName=TextXPosition, Path=Text, Converter={converters:StringToDoubleConverter}}" />
                            </sharedControls:TextBoxUnit.InputBindings>
                        </sharedControls:TextBoxUnit>
                        <TextBlock Grid.Column="2" VerticalAlignment="Center" Margin="20,0,0,0">Y</TextBlock>
                        <sharedControls:TextBoxUnit Grid.Column="3" x:Name="TextYPosition" Text="{markupextensions:AxesSupervisorBinding Path=AxesVM.Position.Y, StringFormat='{}{0:F3}'}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Style="{StaticResource MoveTextBoxStyle}" Unit="mm">
                            <sharedControls:TextBoxUnit.InputBindings>
                                <KeyBinding Command="{markupextensions:AxesSupervisorBinding AxesVM.MoveY}" Key="Enter" CommandParameter="{Binding ElementName=TextYPosition, Path=Text, Converter={converters:StringToDoubleConverter}}" />
                            </sharedControls:TextBoxUnit.InputBindings>
                        </sharedControls:TextBoxUnit>
                    </Grid>

                    <Grid Margin="23,5,0,5" Visibility="{Binding IsDieNavigation, Converter={converters:BooleanToVisibilityConverter}, FallbackValue=Collapsed }">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="35" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!--<Label Margin="0">X</Label>-->
                        <TextBlock VerticalAlignment="Center">X</TextBlock>
                        <sharedControls:TextBoxUnit x:Name="TextXPositionOnDie" Grid.Column="1" Text="{markupextensions:AxesSupervisorBinding Path=AxesVM.PositionOnDie.X, StringFormat='{}{0:F3}', Mode=OneWay}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Style="{StaticResource MoveTextBoxStyle}" Unit="mm">
                            <sharedControls:TextBoxUnit.InputBindings>
                                <KeyBinding Command="{markupextensions:AxesSupervisorBinding AxesVM.MoveXOnDie}" Key="Enter" CommandParameter="{Binding ElementName=TextXPositionOnDie, Path=Text, Converter={converters:StringToDoubleConverter}}" />
                            </sharedControls:TextBoxUnit.InputBindings>
                        </sharedControls:TextBoxUnit>
                        <TextBlock Grid.Column="2" VerticalAlignment="Center" Margin="20,0,0,0">Y</TextBlock>
                        <sharedControls:TextBoxUnit Grid.Column="3" x:Name="TextYPositionOnDie" Text="{markupextensions:AxesSupervisorBinding Path=AxesVM.PositionOnDie.Y, StringFormat='{}{0:F3}'}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Style="{StaticResource MoveTextBoxStyle}" Unit="mm">
                            <sharedControls:TextBoxUnit.InputBindings>
                                <KeyBinding Command="{markupextensions:AxesSupervisorBinding AxesVM.MoveYOnDie}" Key="Enter" CommandParameter="{Binding ElementName=TextYPositionOnDie, Path=Text, Converter={converters:StringToDoubleConverter}}" />
                            </sharedControls:TextBoxUnit.InputBindings>
                        </sharedControls:TextBoxUnit>
                    </Grid>

                    <Grid Margin="23,5,0,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid Grid.Row="0" IsEnabled="{markupextensions:AxesSupervisorBinding AxesVM.Status.IsMoving, Converter={converters:InvertedBooleanConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="100" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="ButtonGotoRef"
                                Padding="7"
                                Content="{Binding SelectedReference.ReferenceName}"
                                Command="{markupextensions:AxesSupervisorBinding AxesVM.GotoRefPos}"
                                CommandParameter="{Binding SelectedReference}"
                                ToolTip="Move to the selected Reference position" Style="{StaticResource LeftButton}" />
                            <ToggleButton x:Name="DisplayRefsList"
                                Grid.Column="1"
                                Padding="0"
                                Width="20"
                                IsHitTestVisible="{Binding ElementName=PopupReferences, Path=IsOpen, Converter={converters:InvertedBooleanConverter}}"
                                IsEnabled="{Binding ElementName=ButtonGotoRef, Path=IsEnabled}"
                                Style="{StaticResource RightToggleButton}">

                                <Grid x:Name="Images">
                                    <Image Source="{DynamicResource SimpleDown}" Height="15" Width="15" Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked, Converter= {converters:InvertedBooleanToVisibilityConverter}}" />
                                    <Image Source="{DynamicResource SimpleUp}" Height="15" Width="15" Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked, Converter= {converters:BooleanToVisibilityConverter}}" />
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Setter Property="Opacity" Value="1" />
                                            <!-- Here is the 'normal' content -->
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsEnabled, ElementName=DisplayRefsList}" Value="False">
                                                    <Setter Property="Opacity" Value="0.4" />
                                                    <!-- Here is the 'override' content -->
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                </Grid>
                            </ToggleButton>

                            <Popup x:Name="PopupReferences"
                                IsOpen="{Binding IsChecked, ElementName=DisplayRefsList}"
                                StaysOpen="False"
                                PlacementTarget="{Binding ElementName=DisplayRefsList}"
                                Placement="Left"
                                HorizontalOffset="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.ActualWidth}"
                                VerticalOffset="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.ActualHeight}">
                                <Border Background="White" BorderBrush="{StaticResource ButtonBorderBrush}" BorderThickness="1">
                                    <ListBox x:Name="RefsList" Style="{StaticResource ListBoxForComboBox}"
                                        ItemsSource="{markupextensions:ChuckSupervisorBinding ChuckVM.AnaChuckConfiguration.ReferencesList}"
                                        DisplayMemberPath="ReferenceName"
                                        SelectedItem="{Binding SelectedReference}"
                                        PreviewMouseUp="ListBoxRefs_PreviewMouseUp"></ListBox>
                                </Border>
                            </Popup>
                        </Grid>

                        <Grid Grid.Column="1" Grid.Row="0" IsEnabled="{markupextensions:AxesSupervisorBinding AxesVM.Status.IsMoving, Converter={converters:InvertedBooleanConverter}}"
                            Visibility="{Binding DataContext.AvailablePositions, Converter={converters:CountGreaterThanOneToVisibilityConverter}}" HorizontalAlignment="Right">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="100" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="ButtonGotoPosition"
                                Padding="7"
                                Content="{Binding SelectedPosition, Converter={converters:EnumToStringConverter}, ConverterParameter='UnitySC.PM.ANA.Client.CommonUI'}"
                                Command="{markupextensions:AxesSupervisorBinding AxesVM.GotoSpecificPosition}"
                                CommandParameter="{Binding SelectedPosition}"
                                ToolTip="Move to the selected position" Style="{StaticResource LeftButton}" />
                            <ToggleButton x:Name="DisplayPositionsList"
                                Grid.Column="1"
                                Padding="0"
                                Width="20"
                                IsHitTestVisible="{Binding ElementName=PopupPositions, Path=IsOpen, Converter={converters:InvertedBooleanConverter}}"
                                IsEnabled="{Binding ElementName=ButtonGotoPosition, Path=IsEnabled}"
                                Style="{StaticResource RightToggleButton}">

                                <Grid x:Name="PositionBtnImages">
                                    <Image Source="{DynamicResource SimpleDown}" Height="15" Width="15" Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked, Converter= {converters:InvertedBooleanToVisibilityConverter}}" />
                                    <Image Source="{DynamicResource SimpleUp}" Height="15" Width="15" Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked, Converter= {converters:BooleanToVisibilityConverter}}" />
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Setter Property="Opacity" Value="1" />
                                            <!-- Here is the 'normal' content -->
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsEnabled, ElementName=DisplayPositionsList}" Value="False">
                                                    <Setter Property="Opacity" Value="0.4" />
                                                    <!-- Here is the 'override' content -->
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                </Grid>
                            </ToggleButton>

                            <Popup x:Name="PopupPositions" 
                                IsOpen="{Binding IsChecked, ElementName=DisplayPositionsList}"
                                StaysOpen="False"
                                PlacementTarget="{Binding ElementName=DisplayPositionsList}"
                                Placement="Left"
                                HorizontalOffset="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.ActualWidth}"
                                VerticalOffset="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.ActualHeight}">
                                <Border Background="White" BorderBrush="{StaticResource ButtonBorderBrush}" BorderThickness="1">
                                    <ListBox x:Name="PositionsList" Style="{StaticResource ListBoxForComboBox}"
                                        ItemsSource="{Binding AvailablePositions}"
                                        SelectedItem="{Binding SelectedPosition}"
                                        PreviewMouseUp="ListBoxPos_PreviewMouseUp">
                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Converter={converters:EnumToStringConverter}, ConverterParameter='UnitySC.PM.ANA.Client.CommonUI'}" />
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </Border>
                            </Popup>
                        </Grid>

                        <Button Grid.Column="1" Grid.Row="0" HorizontalAlignment="Stretch"
                            Margin="5 0 0 0"
                            Padding="7"
                            Content="{Binding DataContext.DefaultSpecificPosition, Converter={converters:EnumToStringConverter} ,ConverterParameter='UnitySC.PM.ANA.Client.CommonUI'}"
                            Command="{markupextensions:AxesSupervisorBinding AxesVM.GotoSpecificPosition}"
                            CommandParameter="{Binding DataContext.SelectedPosition}"
                            IsEnabled="{markupextensions:AxesSupervisorBinding AxesVM.Status.IsMoving, Converter={converters:InvertedBooleanConverter}}"
                            Visibility="{Binding DataContext.AvailablePositions, Converter={converters:CountEqualOneToVisibilityConverter}}" />
                        
                        <StackPanel Orientation="Horizontal" Grid.Row="1" Margin="0 10 0 0" Grid.ColumnSpan="2"                          
                                IsEnabled="{markupextensions:AxesSupervisorBinding  AxesVM.Status.IsMoving, Converter={converters:InvertedBooleanConverter}}"                                
                                Visibility="{Binding DisplayClampStatus, Converter={converters:BooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{markupextensions:ChuckSupervisorBinding ChuckVM.Status.IsWaferClamped, Converter={converters:BooleanToVisibilityConverter}}" Width="100">Wafer clamped</TextBlock>
                            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{markupextensions:ChuckSupervisorBinding ChuckVM.Status.IsWaferClamped, Converter={converters:InvertedBooleanToVisibilityConverter}}" Width="100">Wafer unclamped</TextBlock>
                            <ToggleButton x:Name="ToggleBtnClamp" Margin="5 0 0 0"			                   			                                               							      
                                   Style="{StaticResource ToggleAnimatedSwitchNew}"
				                   Command="{markupextensions:ChuckSupervisorBinding  ChuckVM.ChangeClampStatus}"
				                   ToolTip="Manage vacuum (check if wafer is present)"
				                   IsChecked="{markupextensions:ChuckSupervisorBinding ChuckVM.Status.IsWaferClamped, Mode=TwoWay}"                                   
                                   Visibility="{Binding CanControlClamp, Converter={converters:BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                        </StackPanel>
                    </Grid>

                    <Rectangle Fill="{StaticResource SeparatorLightBrush}" Height="1" Margin="10,10"></Rectangle>

                    <Grid Margin="23,0,0,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="90" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock VerticalAlignment="Center">Z Bottom</TextBlock>
                        <local:StageMoveButton Grid.Column="1" Width="30" HorizontalAlignment="Center" ToolTip="Z Bottom move" Style="{StaticResource ButtonMoveStyle}" ButtonStyle="{StaticResource LeftImageButton}"  ImageGeometry="{StaticResource ZoomOutGeometry}" MoveType="{x:Static proxyStage:AxesMoveTypes.ZBottomPlus}">
                        </local:StageMoveButton>
                        <sharedControls:TextBoxUnit x:Name="TextZBottomPosition" Grid.Column="2" Text="{markupextensions:AxesSupervisorBinding Path=AxesVM.Position.ZBottom, StringFormat='{}{0:F3}'}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Style="{StaticResource MoveTextBoxStyleNotRounded}" Unit="mm">
                            <sharedControls:TextBoxUnit.InputBindings>
                                <KeyBinding Command="{markupextensions:AxesSupervisorBinding AxesVM.MoveZBottom}" Key="Enter" CommandParameter="{Binding ElementName=TextZBottomPosition, Path=Text, Converter={converters:StringToDoubleConverter}}" />
                            </sharedControls:TextBoxUnit.InputBindings>
                        </sharedControls:TextBoxUnit>
                        <local:StageMoveButton Grid.Column="3" Width="30" HorizontalAlignment="Center" ToolTip="Z Bottom move" Style="{StaticResource ButtonMoveStyle}" ButtonStyle="{StaticResource RightImageButton}" ImageGeometry="{StaticResource ZoomInGeometry}" MoveType="{x:Static proxyStage:AxesMoveTypes.ZBottomMinus}">
                        </local:StageMoveButton>
                    </Grid>
                </StackPanel>
                <Border Background="#30000000" Margin="-5" Visibility="{Binding CanMoveStage, Converter={converters:InvertedBooleanToVisibilityConverter}, FallbackValue=Collapsed }"/>
            </Grid>
            <Rectangle Fill="{StaticResource SeparatorBrush}" Height="1" Margin="0,10"></Rectangle>
            <Label Style="{StaticResource TitleLevel2}">LIGHT BOTTOM</Label>
            <ListBox Margin="23,0,0,0"   ItemsSource="{markupextensions:LightsSupervisorBinding Path=LightsDown}" Style="{StaticResource ListBoxLights}">
            </ListBox>
            <!--Grid used to avoid filcckering when vertical scroller is visible -->
            <!--<Grid Height="20" Visibility="{Binding ElementName=scrollViewver, Path=ComputedVerticalScrollBarVisibility}" Background="Red"></Grid>-->
        </StackPanel>
    </ScrollViewer>
</UserControl>