<UserControl x:Class="UnitySC.PM.Shared.UI.Recipes.Management.View.Graph.GraphView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:UnitySC.PM.Shared.UI.Recipes.Management.View.Graph"
             xmlns:Helper="clr-namespace:UnitySC.Shared.UI.Helper;assembly=UnitySC.Shared.UI"
             xmlns:ac="clr-namespace:UnitySC.Shared.UI.Graph.AdornedControl;assembly=UnitySC.Shared.UI"    
             xmlns:GraphModel="clr-namespace:UnitySC.Shared.UI.Graph.Model;assembly=UnitySC.Shared.UI"
             xmlns:GraphUI="clr-namespace:UnitySC.Shared.UI.Graph.UI;assembly=UnitySC.Shared.UI"             
             xmlns:ZoomAndPan="clr-namespace:UnitySC.Shared.UI.Graph.Utils.ZoomAndPan;assembly=UnitySC.Shared.UI"
             xmlns:sharedExtensions="clr-namespace:UnitySC.Shared.UI.Extensions;assembly=UnitySC.Shared.UI"
             xmlns:md="https://github.com/fantasticfiasco/mvvm-dialogs"
             
             md:DialogServiceViews.IsRegistered="True"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/UnitySC.Shared.UI;component/Graph/UI/Themes/Generic.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/UnitySC.Shared.UI;component/Graph/ZoomAndPan/Themes/Generic.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/UnitySC.PM.Shared.UI;component/Converters/Converter.xaml"/>
                <!-- Styles -->
                <ResourceDictionary Source="pack://application:,,,/UnitySC.Shared.UI;component/Styles/UnityStyles.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/UnitySC.Shared.UI;component/Styles/UnityStylesNew.xaml"/>

                <!-- COnverter --> 
                <ResourceDictionary Source="pack://application:,,,/UnitySC.Shared.UI;component/Converters/BasicConverter.xaml"/>

            </ResourceDictionary.MergedDictionaries>

            <RoutedUICommand x:Key="Commands.ZoomOut" />
            <RoutedUICommand x:Key="Commands.ZoomIn" />
            <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom" />
            <RoutedUICommand x:Key="Commands.FitContent" />
            <RoutedUICommand x:Key="Commands.Fill" />
            <RoutedUICommand x:Key="Commands.OneHundredPercent" />
            <Helper:BindingProxy x:Key="proxy" Data="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:GraphView}}}" />


            <DataTemplate x:Key="icoRunningWithAnimation">
                <DataTemplate.Resources>
                    <Storyboard x:Key="RunningAnimation" RepeatBehavior="Forever">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="svg53">
                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="360"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </DataTemplate.Resources>
                <Canvas x:Name="svg53" Width="300" Height="300" RenderTransformOrigin="0.5,0.5">
                    <Canvas.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform/>
                            <SkewTransform/>
                            <RotateTransform/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Canvas.RenderTransform>
                    <Canvas.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Storyboard="{StaticResource RunningAnimation}"/>
                        </EventTrigger>
                    </Canvas.Triggers>
                    <Path xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Name="settings" Fill="#FFABABAB" RenderTransformOrigin="0.5,0.5">
                        <Path.Data>
                            <PathGeometry Figures="m 151.13436 289.28821 c -1.89778 -1.89779 -3.57834 -5.15013 -4.59385 -8.89038 -0.88072 -3.2438 -2.05323 -7.57712 -2.60558 -9.62958 -0.94809 -3.52295 -1.38 -3.84396 -7.7196 -5.73737 -5.36401 -1.60203 -23.25466 -5.00842 -26.40154 -5.02686 -0.37742 -0.002 -3.45159 3.5707 -6.8315 7.93981 -3.534921 4.5695 -7.259609 8.31528 -8.768616 8.81828 -8.479782 2.82659 -28.105648 -6.88007 -39.050062 -19.31358 -5.757148 -6.54046 -5.630923 -9.47345 0.897716 -20.85949 2.78373 -4.85486 4.814186 -9.47106 4.512124 -10.25822 -1.084229 -2.82546 -16.777243 -25.34549 -18.22748 -26.15708 -0.825324 -0.46187 -5.420955 -0.24627 -10.371418 0.48658 C 19.594394 202.49303 16.544082 201.43539 12.765579 194 9.1997339 186.98308 7.0521715 176.5638 6.743319 164.78194 6.3433626 149.52472 6.9167801 148.79468 22.338615 144.92677 c 5.792577 -1.45282 8.758207 -2.69053 9.08543 -3.79181 C 31.877225 139.60976 38 110.26493 38 109.61815 c 0 -0.16203 -3.595996 -3.082 -7.991103 -6.48883 C 17.825315 93.685329 17.021993 90.793015 23.046529 78.061707 28.930797 65.62682 40.577335 51.897138 46.502819 50.409936 49.516015 49.653672 53.944334 51.431001 63.145892 57.08972 70.338653 61.513081 68.238748 62.102631 85.75 50.743598 99.668336 41.715184 99.145588 42.753406 96.416805 29.558408 94.980597 22.613642 94.978687 21.681473 96.39623 19.518029 101.39524 11.888568 114.21059 7.0025715 131 6.324945 c 10.37448 -0.4187178 11.82052 -0.2615452 14.77493 1.6059153 3.53752 2.2360437 4.78694 4.7085657 6.33281 12.5321687 2.1288 10.773789 3.16799 11.451104 22.35347 14.569418 9.23644 1.501245 13.0599 1.759032 14.51774 0.97882 1.08848 -0.582536 3.77688 -3.706581 5.97423 -6.942322 C 199.62925 22.183125 203.33011 19 206.65984 19 c 7.47314 0 22.15862 8.034063 32.47563 17.766607 9.84405 9.286376 9.93509 12.876399 0.67245 26.516241 l -4.00313 5.894874 9.50853 14.271757 9.50853 14.271758 11.91196 -0.490593 c 12.66913 -0.521776 15.09122 0.03285 17.70643 4.054536 2.15664 3.31649 6.29681 18.46066 7.48116 27.36501 1.88653 14.18355 -0.78193 19.03623 -12.35819 22.47379 -13.38935 3.97596 -13.2123 3.74281 -16.99202 22.37602 -2.85905 14.09449 -2.98082 13.70903 6.80916 21.55423 7.67676 6.15177 9.07808 8.49129 8.34771 13.93659 -0.72237 5.38563 -6.63947 17.72967 -12.30349 25.66709 -8.88083 12.44536 -15.85074 14.32561 -27.61662 7.45003 -3.66316 -2.14063 -7.25602 -4.10389 -7.98413 -4.36279 -1.67584 -0.59591 -4.94713 1.02089 -16.92792 8.36646 C 207.61364 249.35022 202.78472 252 202.16495 252 c -1.96617 0 -2.53361 5.22418 -1.32988 12.24376 1.64701 9.60466 1.45925 13.11235 -0.85969 16.06041 -4.43971 5.64417 -19.57302 10.48034 -35.66193 11.39651 l -10.18655 0.58007 z M 161.5 206.4956 c 21.51523 -4.51718 41.28255 -23.68023 45.52951 -44.13773 0.65578 -3.15888 1.01902 -10.62892 0.82067 -16.8772 l -0.35585 -11.20991 -5.35983 -10.78253 c -9.29294 -18.69489 -22.2636 -29.021642 -41.34234 -32.915219 -10.21988 -2.085665 -16.86704 -1.98355 -26.19615 0.402434 -14.66545 3.75079 -26.57836 12.212185 -34.973988 24.841005 -13.320304 20.0366 -13.52134 44.1415 -0.539575 64.69667 7.547273 11.95025 21.427713 22.51718 34.029883 25.90633 7.02269 1.88864 19.59421 1.92236 28.38767 0.0761 z" FillRule="NonZero"/>
                        </Path.Data>
                    </Path>
                </Canvas>
            </DataTemplate>


            <DataTemplate x:Key="icoError">
                <Canvas HorizontalAlignment="Left" Height="15" VerticalAlignment="Top" Width="15">
                    <Ellipse Height="15" Width="15" Fill="{StaticResource ImageErrorColor}"/>
                    <Path Data="M2.8125,7.1875 L12.4375,7.1875" Height="2" Canvas.Left="1.812" Stretch="Fill" Stroke="{StaticResource ImageLightTextColor}" StrokeThickness="2" Canvas.Top="6.5" Width="11.626" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="-45"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                    <Path Data="M2.8125,7.1875 L12.4375,7.1875" Height="2" Canvas.Left="1.812" Stretch="Fill" Stroke="{StaticResource ImageLightTextColor}"  StrokeThickness="2" Canvas.Top="6.5" Width="11.626" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="45"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                </Canvas>
            </DataTemplate>

            <DataTemplate x:Key="icoWarning">
                <Canvas Width="32" Height="32">
                    <Path x:Name="Triangle29" Fill="{StaticResource ImageWarningColor}" StrokeThickness="1">
                        <Path.Data>
                            <PathGeometry Figures="M14.4242327 6.14839275 C15.2942987 4.74072976 16.707028 4.74408442 17.5750205 6.14839275 L28.3601099 23.59738 C29.5216388 25.4765951 28.6755462 27 26.4714068 27 L5.5278464 27 C3.32321557 27 2.47386317 25.4826642 3.63914331 23.59738 Z M16 20 C16.5522847 20 17 19.5469637 17 19.0029699 L17 12.9970301 C17 12.4463856 16.5561352 12 16 12 C15.4477153 12 15 12.4530363 15 12.9970301 L15 19.0029699 C15 19.5536144 15.4438648 20 16 20 Z M16 24 C16.5522848 24 17 23.5522848 17 23 C17 22.4477152 16.5522848 22 16 22 C15.4477152 22 15 22.4477152 15 23 C15 23.5522848 15.4477152 24 16 24 Z M16 24" FillRule="EvenOdd"/>
                        </Path.Data>
                    </Path>
                </Canvas>
            </DataTemplate>


            <DataTemplate x:Key="icoValid">
                <Canvas x:Name="Layer_1" Width="512" Height="512">
                    <Canvas x:Name="g33">
                        <Polygon xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Points="434.8,49 174.2,309.7 76.8,212.3 0,289.2 174.1,463.3 196.6,440.9 196.6,440.9 511.7,125.8 434.8,49" x:Name="polygon31" FillRule="NonZero" Fill="{StaticResource ImageValidColor}"/>
                    </Canvas>
                </Canvas>
            </DataTemplate>
            
            <!--
        A data-template that defines the UI for input connectors.
    -->
            <DataTemplate x:Key="inputConnectorTemplate">
                <Grid Margin="0,2,0,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <!--  The 'ConnectorItem' or anchor point for the connector.  -->
                    <GraphUI:ConnectorItem Grid.Row="0"
                Width="17"
                Height="17"
                HorizontalAlignment="Center"
                Cursor="Hand" />
                </Grid>
            </DataTemplate>

            <!--
        A data-template that defines the UI for output connectors.
    -->
            <DataTemplate x:Key="outputConnectorTemplate">
                <Grid Margin="0,2,0,0" HorizontalAlignment="Right">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <Grid Grid.Row="1"
                Width="17"
                Height="17"
                Cursor="Hand">

                        <!--  The 'ConnectorItem' or anchor point for the connector.  -->
                        <GraphUI:ConnectorItem x:Name="ConnectorItem" />

                    </Grid>
                </Grid>
            </DataTemplate>


            <!--
        This graphic is used to indicate that a connection cannot be made between two particular connectors.
    -->
            <DataTemplate DataType="{x:Type local:ConnectionBadIndicator}">
                <Grid Width="80">
                    <Image Source="{StaticResource Block}" Height="25"  Margin="0,-40,0,0"/>
                </Grid>
            </DataTemplate>

            <!--
        This graphic is used to indicate that a connection can be made between two particular connectors.
    -->
            <DataTemplate DataType="{x:Type local:ConnectionOkIndicator}">
                <Grid Width="80">
                    <Image Source="{StaticResource ValidWithCircle}" Height="25"  Margin="0,-40,0,0"/>
                </Grid>               
            </DataTemplate>

            <!--
        Template for the button that is used to delete nodes and connections in the graph.
        This button is displayed in an adorner when the user hovers the mouse over a node or connection.
    -->
            <ControlTemplate x:Key="deleteButtonTemplate" TargetType="{x:Type Button}">
                <Grid x:Name="grid">
                    <Grid.RenderTransform>
                        <ScaleTransform
                    CenterX="10"
                    CenterY="10"
                    ScaleX="1"
                    ScaleY="1" />
                    </Grid.RenderTransform>
                    <Ellipse x:Name="shadow"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Fill="Gray">
                        <Ellipse.RenderTransform>
                            <TranslateTransform X="1.5" Y="1.5" />
                        </Ellipse.RenderTransform>
                    </Ellipse>
                    <Ellipse x:Name="ellipse"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Fill="White"
                Stroke="Black" />
                    <Image Source="{StaticResource Delete}" Height="16"  Margin="3"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <EventTrigger RoutedEvent="Mouse.MouseEnter">
                        <!--
                    Make the 'delete connection button' larger when the mouse
                    cursor is hovered over it.
                -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                            Storyboard.TargetName="grid"
                            Storyboard.TargetProperty="RenderTransform.ScaleX"
                            To="1.3"
                            Duration="0:0:0.25" />
                                <DoubleAnimation
                            Storyboard.TargetName="grid"
                            Storyboard.TargetProperty="RenderTransform.ScaleY"
                            To="1.3"
                            Duration="0:0:0.25" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>

                    <EventTrigger RoutedEvent="Mouse.MouseLeave">
                        <!--
                    Return the 'delete connection button' to normal size when the mouse
                    cursor is moved away.
                -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                            Storyboard.TargetName="grid"
                            Storyboard.TargetProperty="RenderTransform.ScaleX"
                            To="1"
                            Duration="0:0:0.05" />
                                <DoubleAnimation
                            Storyboard.TargetName="grid"
                            Storyboard.TargetProperty="RenderTransform.ScaleY"
                            To="1"
                            Duration="0:0:0.05" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--
                Data-template for ConectionViewModel.
                
                Note that the 'Start' and 'End' of the arrow are bound to 'SourceConnectorHotspot' and 'DestConnectorHotspot' in
                the view-model.
                
                In this sample a curved arrow represents connections between nodes.
            -->
            <DataTemplate DataType="{x:Type GraphModel:ConnectionViewModel}">

                <!--
                    An adorned control is used, to represent the connection.
                    When the user hovers the mouse cursor over the connection, the
                    'delete connection' adorner pops up and allows them to delete the connection.
                -->
                <ac:AdornedControl
                    HorizontalAdornerPlacement="Mouse"
                    IsMouseOverShowEnabled="False"
                    IsMouseButtonShowEnabled="{Binding ElementName=graphControl, Path=IsNotDragging}"
                    VerticalAdornerPlacement="Mouse">
                    <!--  IsMouseOverShowEnabled="{Binding ElementName=graphControl, Path=IsNotDragging}"  -->
                    <!--  IsMouseOverShowEnabled="{Binding ElementName=RecipeView, Path=IsAdornedEnabled}"  -->

                    <!--  <local:Arrow
                        Stroke="{StaticResource connectionBrush}"
                        StrokeThickness="1"
                        Fill="{StaticResource connectionBrush}"
                        Start="{Binding SourceConnectorHotspot}"
                        End="{Binding DestConnectorHotspot}"
                        IsHitTestVisible="False"
                    />-->

                    <!--  The connection is represented by a curved arrow.  -->
                    <local:CurvedArrow
                        Fill="{DynamicResource connectionBrush}"
                        Points="{Binding Points}"
                        Stroke="{DynamicResource connectionBrush}"
                        StrokeThickness="3" />

                    <ac:AdornedControl.AdornerContent >

                        <!--
                            This is the adorner that pops up when the user hovers the mouse over the connection.
                            It displays a button that the user can click to delete the connection.
                        -->
                        <Canvas x:Name="connectionAdornerCanvas"
                            Width="30"
                            Height="30"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top" Visibility="{Binding Data.IsEditable, Source={StaticResource proxy}, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Line
                                Stroke="Black"
                                StrokeThickness="1"
                                X1="0"
                                X2="15"
                                Y1="30"
                                Y2="15" />

                            <!--  Commande a deplacer de RecipeViewModel à GraphModel:ConnectionViewModel ????  -->
                            <!--Command="{Binding Source={StaticResource Locator}, Path=RecipeViewModel.DeleteConnectionCommand}"-->
                            <Button x:Name="deleteConnectionButton" Canvas.Left="10" Canvas.Top="0"
                                Width="20"
                                Height="20"                         
                                Command="{Binding Data.DataContext.DeleteConnectionCommand, Source={StaticResource proxy}}"
                                CommandParameter="{Binding}"
                                Cursor="Hand"
                                Focusable="False"
                                Template="{StaticResource deleteButtonTemplate}" />
                        </Canvas>
                    </ac:AdornedControl.AdornerContent>
                </ac:AdornedControl>
            </DataTemplate>


            <!--  Define a data-template for the 'NodeViewModel' class.  -->
            <DataTemplate DataType="{x:Type GraphModel:NodeViewModel}">
                <Grid
                    MinWidth="130"
                    Margin="6,10,6,10"
                        SizeChanged="Node_SizeChanged" Background="{StaticResource HighlightButtonBackgroundBrush}">

                    <!--
                        This grid contains the node's connectors.
                        The margin is negative so that the connectors overlap the body of the node and it's selection border.
                    -->
                    <Grid Margin="4,-8,4,-8">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <!--  spacer  -->
                            <RowDefinition Height="2" />
                            <!-- <RowDefinition Height="*" MinHeight="20" /> -->
                            <RowDefinition Height="auto" />
                            <!--  spacer  -->
                            <RowDefinition Height="2" />
                            <RowDefinition Height="auto" />
                            <!--  spacer  -->
                            <RowDefinition Height="2" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <!--  The name of the node.  -->
                        <TextBlock Grid.Row="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Foreground="White"
                            Text="{Binding Name}" />

                        <TextBlock Grid.Row="4"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Foreground="White"
                                Text="{Binding Info}" Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:GraphView}},Path=NodeInfoIsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        </TextBlock>

                        <!--  Displays the node's input connectors.  -->
                        <ItemsControl Grid.Row="0"
                            HorizontalAlignment="Center"
                            Focusable="False"
                            ItemTemplate="{StaticResource inputConnectorTemplate}"
                            ItemsSource="{Binding InputConnectors}" />

                        <!--  Displays the node's output connectors.  -->
                        <ItemsControl Grid.Row="6"
                            HorizontalAlignment="Center"
                            Focusable="False"
                            ItemTemplate="{StaticResource outputConnectorTemplate}"
                            ItemsSource="{Binding OutputConnectors}" />
                    </Grid>

                    <Image Width="20" Margin="-10,-10" HorizontalAlignment="Left"
                        VerticalAlignment="Top" Source="{Binding ActorType, Converter={StaticResource ActorTypeToImageDictionaryConverter}}"></Image>

                    <StackPanel Grid.Row="6" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,2,2">



                        <TextBlock FontSize="6"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Foreground="White" Margin="0,0,2,0"
                            Text="{Binding Status}" />



                        <Viewbox Height="10" Width="10" Margin="1" Visibility="{Binding Status, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Available}">
                            <Image sharedExtensions:ImageExt.SourceGeometry="{StaticResource HourglassGeometry}" sharedExtensions:ImageExt.GeometryBrush="DarkOrange"/>
                        </Viewbox>
                        <Viewbox Height="10" Width="10" Margin="1" Visibility="{Binding Status, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Executing}">
                            <Image sharedExtensions:ImageExt.SourceGeometry="{StaticResource GearSolidGeometry}" sharedExtensions:ImageExt.GeometryBrush="DarkGray"/>
                        </Viewbox>
                        <Viewbox Height="10" Width="10" Margin="1" Visibility="{Binding Status, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter=Terminated}">
                            <Image sharedExtensions:ImageExt.SourceGeometry="{StaticResource ValidateGeometry}" sharedExtensions:ImageExt.GeometryBrush="DarkGreen"/>
                        </Viewbox>
                        <Viewbox Height="10" Width="10" Margin="1" Visibility="Collapsed"><ContentControl Opacity="0.5" ContentTemplate="{StaticResource icoError}" ToolTip=""/></Viewbox>
                    </StackPanel>


                </Grid>
            </DataTemplate>
   
        </ResourceDictionary> 

    </UserControl.Resources>

    <UserControl.InputBindings>

        <!--  Bind input to commands.  -->
        <KeyBinding Command="{Binding CopyNodeCommand}" Gesture="CTRL+C" />
        <KeyBinding Command="{Binding PastNodeCommand}" Gesture="CTRL+V" />
        <KeyBinding Command="{Binding CutNodeCommand}" Gesture="CTRL+X" />
        <KeyBinding Key="Del" Command="{Binding DeleteNodeCommand}" />
        <KeyBinding Key="Minus" Command="{StaticResource Commands.ZoomOut}" />
        <KeyBinding Key="Plus" Command="{StaticResource Commands.ZoomIn}" />
        <KeyBinding Key="Backspace" Command="{StaticResource Commands.JumpBackToPrevZoom}" />
        <KeyBinding Key="Space" Command="{StaticResource Commands.FitContent}" />
        <!--  KeyBinding Key="F5" Command="{Binding RunGraphCommand}" /  -->

    </UserControl.InputBindings>

    <UserControl.CommandBindings>

        <!--  Bind commands to event handlers.  -->

        <CommandBinding Command="{StaticResource Commands.ZoomOut}" Executed="ZoomOut_Executed" />
        <CommandBinding Command="{StaticResource Commands.ZoomIn}" Executed="ZoomIn_Executed" />
        <CommandBinding
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            Command="{StaticResource Commands.JumpBackToPrevZoom}"
            Executed="JumpBackToPrevZoom_Executed" />
        <CommandBinding Command="{StaticResource Commands.FitContent}" Executed="FitContent_Executed" />
        <CommandBinding Command="{StaticResource Commands.Fill}" Executed="Fill_Executed"/>
        <CommandBinding Command="{StaticResource Commands.OneHundredPercent}" Executed="OneHundredPercent_Executed" />

    </UserControl.CommandBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>



        


        <!--  ScrollViewer Graph container  -->
        <ScrollViewer Grid.Row="0"
            Background="#FFEFEFF2"
            CanContentScroll="True"
            Focusable="False"
            HorizontalScrollBarVisibility="Visible"
            VerticalScrollBarVisibility="Visible">

            <ScrollViewer.Resources>
                <!--  The border brush for nodes.  -->
                <SolidColorBrush x:Key="nodeBorderBrush" Color="Black" />

                <!--  The brush for connections.  -->
                <SolidColorBrush x:Key="connectionBrush" Color="#58585A" />

                <!--  The brush for connectors.  -->
                <SolidColorBrush x:Key="connectorBackgroundBrush" Color="White" />

                <!--
        Define the visual style for a 'ConnectorItem'.
    -->
                <Style TargetType="{x:Type GraphUI:ConnectorItem}" BasedOn="{StaticResource {x:Type GraphUI:ConnectorItem}}">
                    <!--
            Data-binding for the connector hotspot.
            ConnectorItem automatically computes its center points and assings this value
            to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application
            view-model.
        -->
                    <Setter Property="Hotspot" Value="{Binding Hotspot, Mode=OneWayToSource}" />

                    <!--  The visual template.  -->
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type GraphUI:ConnectorItem}">
                                <!--  The visual for the connector.  -->
                                <Ellipse Fill="{StaticResource connectorBackgroundBrush}" Stroke="{StaticResource nodeBorderBrush}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <!--
        Define a style for 'NodeItem'.
        
        Binds 'X' and 'Y' in the view-model (the 'NodeViewModel' class)
        to 'X' and 'Y' in the NodeItem class.
        
        This sets the position of the node within the Canvas.
    -->
                <Style TargetType="{x:Type GraphUI:NodeItem}" BasedOn="{StaticResource {x:Type GraphUI:NodeItem}}">
                    <Setter Property="X" Value="{Binding X}" />
                    <Setter Property="Y" Value="{Binding Y}" />
                    <Setter Property="ZIndex" Value="{Binding ZIndex}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                </Style>


            </ScrollViewer.Resources>
            <!--
                The ZoomAndPanControl displays the GraphView as its content.
                We can use the mouse to zoom and pan about the GraphView.
            -->
            <ZoomAndPan:ZoomAndPanControl x:Name="zoomAndPanControl"
                Background="LightGray"
                    ContentOffsetX="{Binding Data.OffsetX, Source={StaticResource proxy}, Mode=TwoWay}"
                    ContentOffsetY="{Binding Data.OffsetY, Source={StaticResource proxy}, Mode=TwoWay}"
                    ContentScale="{Binding Data.Scale, Source={StaticResource proxy}, Mode=TwoWay}"
                    ContentViewportHeight="0"
                    ContentViewportWidth="0"
                Focusable="False"
                IsMouseWheelScrollingEnabled="True">
                <!--
                    We need to nest our GraphView in an AdornerDecorator so that adorners work correct when
                    we zoom in and out using the ZoomAndPanControl
                -->
                <AdornerDecorator>
                    <!--
                        This grid specifies the size of the ZoomAndPanControl's content.
                        It wraps up both the GraphView and drag-zooming Canvas.
                    -->
                    <Grid Width="600" Height="1000">
                        <!--  The GraphView is the content displayed by the ZoomAndPanControl.  -->

                        <GraphUI:GraphView x:Name="graphControl"
                                           Background="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:GraphView}},Path=GraphBackground}"
                            ConnectionDragCompleted="graphControl_ConnectionDragCompleted"
                            ConnectionDragStarted="graphControl_ConnectionDragStarted"
                            ConnectionDragging="graphControl_ConnectionDragging"
                            ConnectionsSource="{Binding Path=GraphVM.Connections}"
                            EnableNodeDragging="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:GraphView}},Path=IsEditable}"
                            MouseDown="graphControl_MouseDown"
                            MouseMove="graphControl_MouseMove"
                            MouseUp="graphControl_MouseUp"
                            MouseWheel="graphControl_MouseWheel"
                            NodeDragCompleted="graphControl_NodeDragCompletedEvent"
                            NodeDragStarted="graphControl_NodeDragStartedEvent"
                            NodeLeftClic="graphControl_NodeLeftClic"
                            NodesSource="{Binding Path=GraphVM.Nodes}"
                            QueryConnectionFeedback="graphControl_QueryConnectionFeedback"
                                SelectionChanged="graphControl_SelectionChanged"
                                Tag="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}">
                            <GraphUI:GraphView.ContextMenu>
                                <ContextMenu>

                                    <!--  Clicking this menu item creates a new node.  -->
                                    <MenuItem
                                        Command="{Binding InsertChildNodeCommand}"
                                        Header="Insert After..."
                                        ToolTip="Insert a PM/PP between this node and its children.">
                                        <MenuItem.Icon>
                                            <Image Source="{StaticResource InsertModuleAfter}" Height="18"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{Binding AddChildNodeCommand}"
                                        Header="Create new Branch from here..."
                                        ToolTip="Add a PM/PP in a new branch after this node .">
                                        <MenuItem.Icon>
                                            <Image Source="{StaticResource AddBranch}" Height="18"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{Binding DeleteNodeCommand}"
                                        Header="Delete PM/PP from dataflow">
                                            <MenuItem.Icon>
                                                <Image sharedExtensions:ImageExt.SourceGeometry="{StaticResource TrashGeometry}" sharedExtensions:ImageExt.GeometryBrush="{StaticResource ImageErrorColor}" />
                                            </MenuItem.Icon>
                                    </MenuItem>


                                    <!--<MenuItem
                                    Header="Insert Module Before..."
                                    IsEnabled="{Binding IsEditable}"
                                    ToolTip="Insert a module between this module and its parents.">
                                                        <MenuItem.Icon>
                                                            <Image Source="../../Resources/insert-module-before.png" />
                                                        </MenuItem.Icon>
                                                    </MenuItem>--><!--
                                    <MenuItem
                                        Command="{Binding InsertChildNodeCommand}"
                                        Header="Insert Module After..."
                                        ToolTip="Insert a module between this module and its children.">
                                        <MenuItem.Icon>
                                            <Viewbox>
                                                <ContentControl ContentTemplate="{DynamicResource InsertModuleAfter}"/>
                                            </Viewbox>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{Binding AddChildNodeCommand}"
                                        Header="Create new Branch from here..."
                                        ToolTip="Add a module in a new branch after this module.">
                                        <MenuItem.Icon>
                                            <Viewbox>
                                                <ContentControl ContentTemplate="{DynamicResource AddBranch}"/>
                                            </Viewbox>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{Binding DeleteNodeCommand}"
                Header="Delete Module">
                                        <MenuItem.Icon>
                                            <Viewbox>
                                                <ContentControl ContentTemplate="{DynamicResource Delete}"/>
                                            </Viewbox>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator />
                                    <MenuItem x:Name="ExporAsMetaBloc"
                                        Command="{Binding ExportAsMetaBlocCommand}"
                                        Header="Export as Metablock..."
                                        ToolTip="Save the selected modules in a file for later use." >
                                        <MenuItem.Icon>
                                            <Viewbox>
                                                <ContentControl ContentTemplate="{DynamicResource ExportMetablock}"/>
                                            </Viewbox>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem
                                        Command="{Binding ManageExportsCommand}"
                                        Header="Select visible Parameters..."
                                        ToolTip="Select Parameters that are displayed in the Simplified View." >
                                        <MenuItem.Icon>
                                            <Viewbox>
                                                <ContentControl ContentTemplate="{DynamicResource VisibleParameter}"/>
                                            </Viewbox>
                                        </MenuItem.Icon>
                                    </MenuItem>-->
                                </ContextMenu>
                            </GraphUI:GraphView.ContextMenu>
                        </GraphUI:GraphView>

                        <!--
                            This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                            uses to specify an area to zoom in on.
                        -->
                        <Canvas x:Name="dragZoomCanvas" Visibility="Collapsed">
                            <Border x:Name="dragZoomBorder"
                                Background="Silver"
                                BorderBrush="Black"
                                BorderThickness="1"
                                CornerRadius="1"
                                Opacity="0" />
                        </Canvas>                      

                    </Grid>
                </AdornerDecorator>
            </ZoomAndPan:ZoomAndPanControl>

          
        </ScrollViewer>

        <!--  Grid placed below the zoom and pan control that contains the zoom slider, zoom label and some buttons.  -->
        <Grid Grid.Row="1" Grid.Column="0"
            Style="{DynamicResource GraphGridStyle}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0" Orientation="Horizontal">
                <Menu>
                    <!--
                        The 'Maj content' button.  Causes the nodes to be placed automatiquely.
                    -->
                    <MenuItem
                        Command="{Binding AlignNodesCommand}"
                        Header="Align"
                        Style="{DynamicResource GraphMenuItemStyle}"
                        ToolTip="Fit all nodes to the viewport" />

                    <!--
                        The 'fit content' button.  Causes the content to be scaled so that all the graph nodes fit in the viewport.
                    -->
                    <MenuItem
                        Command="{DynamicResource Commands.FitContent}"
                        Header="Fit"
                        Style="{DynamicResource GraphMenuItemStyle}"
                        ToolTip="Fit all nodes to the viewport" />

                    <!--
                        The fill button.  Causes the content to be scaled so that it fits in the viewport.
                    -->
                    <MenuItem
                        Command="{StaticResource Commands.Fill}"
                        Header="Fill"
                        Style="{DynamicResource GraphMenuItemStyle}"
                        ToolTip="Fit the entire content area to the viewport" />

                    <!--
                        The 100% button.  Causes the content to be scaled to 100 percent.
                    -->
                    <MenuItem
                        Command="{StaticResource Commands.OneHundredPercent}"
                        Header="100%"
                        Style="{DynamicResource GraphMenuItemStyle}"
                        ToolTip="Scale the content to 100%" />

                    <!--  Button to zoom out.  -->
                    <MenuItem
                        Command="{StaticResource Commands.ZoomOut}"
                        Header="-"
                        Style="{DynamicResource GraphMenuItemStyle}"
                        ToolTip="Zoom out from the content" />
                </Menu>
            </StackPanel>

            <!--  Slider to change the current zoom level.  -->
            <Slider Grid.Column="1"
                Margin="5,5,5,5"
                LargeChange="20"
                Maximum="200"
                Minimum="10"
                SmallChange="10"
                TickFrequency="10"
                TickPlacement="TopLeft"
                ToolTip="Change the zoom level of the content"
                Value="{Binding ElementName=zoomAndPanControl, Path=ContentScale, Converter={StaticResource ScaleToPercentConverter}}" />

            <StackPanel Grid.Column="2" Orientation="Horizontal">
                <Menu>
                    <!--
                        Button to zoom in.
                    -->
                    <MenuItem
                        Command="{StaticResource Commands.ZoomIn}"
                        Header="+"
                        Style="{DynamicResource GraphMenuItemStyle}"
                        ToolTip="Zoom in on the content" />
                </Menu>
                <!--  Stick a resize grip in the bottom right corner of the window.  -->
                <ResizeGrip DockPanel.Dock="Right" />
            </StackPanel>
        </Grid>
        
       


    </Grid>
</UserControl>

